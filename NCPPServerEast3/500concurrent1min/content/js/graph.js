/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5479.0, "minX": 0.0, "maxY": 371484.0, "series": [{"data": [[0.0, 5479.0], [0.1, 5479.0], [0.2, 5483.0], [0.3, 5483.0], [0.4, 5588.0], [0.5, 5588.0], [0.6, 5596.0], [0.7, 5745.0], [0.8, 5745.0], [0.9, 5839.0], [1.0, 5839.0], [1.1, 9507.0], [1.2, 9507.0], [1.3, 9763.0], [1.4, 9869.0], [1.5, 9869.0], [1.6, 9892.0], [1.7, 9892.0], [1.8, 9978.0], [1.9, 9978.0], [2.0, 10298.0], [2.1, 14111.0], [2.2, 14111.0], [2.3, 14164.0], [2.4, 14164.0], [2.5, 14164.0], [2.6, 14232.0], [2.7, 14232.0], [2.8, 14277.0], [2.9, 14277.0], [3.0, 14408.0], [3.1, 14408.0], [3.2, 18441.0], [3.3, 18517.0], [3.4, 18517.0], [3.5, 18647.0], [3.6, 18647.0], [3.7, 18680.0], [3.8, 18680.0], [3.9, 18709.0], [4.0, 18843.0], [4.1, 18843.0], [4.2, 22697.0], [4.3, 22697.0], [4.4, 22726.0], [4.5, 22726.0], [4.6, 22727.0], [4.7, 22790.0], [4.8, 22790.0], [4.9, 22853.0], [5.0, 22853.0], [5.1, 22958.0], [5.2, 26726.0], [5.3, 26726.0], [5.4, 26776.0], [5.5, 26776.0], [5.6, 26888.0], [5.7, 26888.0], [5.8, 26902.0], [5.9, 26976.0], [6.0, 26976.0], [6.1, 26984.0], [6.2, 26984.0], [6.3, 31155.0], [6.4, 31155.0], [6.5, 31393.0], [6.6, 31444.0], [6.7, 31444.0], [6.8, 31488.0], [6.9, 31488.0], [7.0, 31539.0], [7.1, 31539.0], [7.2, 31546.0], [7.3, 35493.0], [7.4, 35493.0], [7.5, 35660.0], [7.6, 35660.0], [7.7, 35693.0], [7.8, 35746.0], [7.9, 35746.0], [8.0, 35806.0], [8.1, 35806.0], [8.2, 35862.0], [8.3, 35862.0], [8.4, 39868.0], [8.5, 39933.0], [8.6, 39933.0], [8.7, 39942.0], [8.8, 39942.0], [8.9, 40007.0], [9.0, 40007.0], [9.1, 40077.0], [9.2, 40084.0], [9.3, 40084.0], [9.4, 44495.0], [9.5, 44495.0], [9.6, 44520.0], [9.7, 44520.0], [9.8, 44796.0], [9.9, 44930.0], [10.0, 44930.0], [10.1, 44987.0], [10.2, 44987.0], [10.3, 45667.0], [10.4, 48616.0], [10.5, 48616.0], [10.6, 48633.0], [10.7, 48633.0], [10.8, 48713.0], [10.9, 48713.0], [11.0, 48944.0], [11.1, 48973.0], [11.2, 48973.0], [11.3, 50266.0], [11.4, 50266.0], [11.5, 53209.0], [11.6, 53209.0], [11.7, 53284.0], [11.8, 53323.0], [11.9, 53323.0], [12.0, 53356.0], [12.1, 53356.0], [12.2, 53394.0], [12.3, 53394.0], [12.4, 54500.0], [12.5, 57337.0], [12.6, 57337.0], [12.7, 57632.0], [12.8, 57632.0], [12.9, 57752.0], [13.0, 57754.0], [13.1, 57754.0], [13.2, 57822.0], [13.3, 57822.0], [13.4, 58744.0], [13.5, 58744.0], [13.6, 61587.0], [13.7, 61875.0], [13.8, 61875.0], [13.9, 62227.0], [14.0, 62227.0], [14.1, 62236.0], [14.2, 62236.0], [14.3, 62398.0], [14.4, 63338.0], [14.5, 63338.0], [14.6, 66053.0], [14.7, 66053.0], [14.8, 66055.0], [14.9, 66055.0], [15.0, 66060.0], [15.1, 66176.0], [15.2, 66176.0], [15.3, 66384.0], [15.4, 66384.0], [15.5, 67867.0], [15.6, 70142.0], [15.7, 70142.0], [15.8, 70236.0], [15.9, 70236.0], [16.0, 70335.0], [16.1, 70335.0], [16.2, 70419.0], [16.3, 70526.0], [16.4, 70526.0], [16.5, 72409.0], [16.6, 72409.0], [16.7, 74300.0], [16.8, 74300.0], [16.9, 74342.0], [17.0, 74425.0], [17.1, 74425.0], [17.2, 74491.0], [17.3, 74491.0], [17.4, 74569.0], [17.5, 74569.0], [17.6, 76504.0], [17.7, 78391.0], [17.8, 78391.0], [17.9, 78472.0], [18.0, 78472.0], [18.1, 78657.0], [18.2, 78680.0], [18.3, 78680.0], [18.4, 78740.0], [18.5, 78740.0], [18.6, 81084.0], [18.7, 81084.0], [18.8, 82529.0], [18.9, 82547.0], [19.0, 82547.0], [19.1, 82563.0], [19.2, 82563.0], [19.3, 82637.0], [19.4, 82637.0], [19.5, 82829.0], [19.6, 85305.0], [19.7, 85305.0], [19.8, 86515.0], [19.9, 86515.0], [20.0, 86587.0], [20.1, 86587.0], [20.2, 86702.0], [20.3, 86852.0], [20.4, 86852.0], [20.5, 86854.0], [20.6, 86854.0], [20.7, 89475.0], [20.8, 90599.0], [20.9, 90599.0], [21.0, 90697.0], [21.1, 90697.0], [21.2, 90751.0], [21.3, 90751.0], [21.4, 90755.0], [21.5, 90831.0], [21.6, 90831.0], [21.7, 94036.0], [21.8, 94036.0], [21.9, 95167.0], [22.0, 95167.0], [22.1, 95281.0], [22.2, 95484.0], [22.3, 95484.0], [22.4, 95625.0], [22.5, 95625.0], [22.6, 95649.0], [22.7, 95649.0], [22.8, 98870.0], [22.9, 98987.0], [23.0, 98987.0], [23.1, 98991.0], [23.2, 98991.0], [23.3, 99887.0], [23.4, 99985.0], [23.5, 99985.0], [23.6, 100290.0], [23.7, 100290.0], [23.8, 103308.0], [23.9, 103308.0], [24.0, 103318.0], [24.1, 103350.0], [24.2, 103350.0], [24.3, 103374.0], [24.4, 103374.0], [24.5, 104342.0], [24.6, 104342.0], [24.7, 104448.0], [24.8, 107525.0], [24.9, 107525.0], [25.0, 107532.0], [25.1, 107532.0], [25.2, 107540.0], [25.3, 107540.0], [25.4, 107754.0], [25.5, 108954.0], [25.6, 108954.0], [25.7, 108955.0], [25.8, 108955.0], [25.9, 112055.0], [26.0, 112218.0], [26.1, 112218.0], [26.2, 112296.0], [26.3, 112296.0], [26.4, 112333.0], [26.5, 112333.0], [26.6, 113447.0], [26.7, 113538.0], [26.8, 113538.0], [26.9, 116626.0], [27.0, 116626.0], [27.1, 116637.0], [27.2, 116637.0], [27.3, 116655.0], [27.4, 116657.0], [27.5, 116657.0], [27.6, 117670.0], [27.7, 117670.0], [27.8, 117689.0], [27.9, 117689.0], [28.0, 121232.0], [28.1, 121385.0], [28.2, 121385.0], [28.3, 121390.0], [28.4, 121390.0], [28.5, 121477.0], [28.6, 122611.0], [28.7, 122611.0], [28.8, 122680.0], [28.9, 122680.0], [29.0, 125389.0], [29.1, 125389.0], [29.2, 125442.0], [29.3, 125570.0], [29.4, 125570.0], [29.5, 126371.0], [29.6, 126371.0], [29.7, 126406.0], [29.8, 126406.0], [29.9, 126512.0], [30.0, 129150.0], [30.1, 129150.0], [30.2, 129224.0], [30.3, 129224.0], [30.4, 129295.0], [30.5, 129295.0], [30.6, 130198.0], [30.7, 130202.0], [30.8, 130202.0], [30.9, 130536.0], [31.0, 130536.0], [31.1, 133156.0], [31.2, 133225.0], [31.3, 133225.0], [31.4, 133310.0], [31.5, 133310.0], [31.6, 134709.0], [31.7, 134709.0], [31.8, 134969.0], [31.9, 134987.0], [32.0, 134987.0], [32.1, 137812.0], [32.2, 137812.0], [32.3, 137910.0], [32.4, 137910.0], [32.5, 137955.0], [32.6, 139393.0], [32.7, 139393.0], [32.8, 139411.0], [32.9, 139411.0], [33.0, 139462.0], [33.1, 139462.0], [33.2, 141918.0], [33.3, 142120.0], [33.4, 142120.0], [33.5, 142179.0], [33.6, 142179.0], [33.7, 143667.0], [33.8, 143793.0], [33.9, 143793.0], [34.0, 143861.0], [34.1, 143861.0], [34.2, 145763.0], [34.3, 145763.0], [34.4, 145837.0], [34.5, 145943.0], [34.6, 145943.0], [34.7, 147926.0], [34.8, 147926.0], [34.9, 148112.0], [35.0, 148112.0], [35.1, 148160.0], [35.2, 150360.0], [35.3, 150360.0], [35.4, 150377.0], [35.5, 150377.0], [35.6, 150535.0], [35.7, 150535.0], [35.8, 152547.0], [35.9, 152680.0], [36.0, 152680.0], [36.1, 152919.0], [36.2, 152919.0], [36.3, 154685.0], [36.4, 154710.0], [36.5, 154710.0], [36.6, 154913.0], [36.7, 154913.0], [36.8, 157248.0], [36.9, 157248.0], [37.0, 157347.0], [37.1, 157372.0], [37.2, 157372.0], [37.3, 158937.0], [37.4, 158937.0], [37.5, 159078.0], [37.6, 159078.0], [37.7, 159092.0], [37.8, 161168.0], [37.9, 161168.0], [38.0, 161190.0], [38.1, 161190.0], [38.2, 161266.0], [38.3, 161266.0], [38.4, 162911.0], [38.5, 163101.0], [38.6, 163101.0], [38.7, 163201.0], [38.8, 163201.0], [38.9, 165456.0], [39.0, 165652.0], [39.1, 165652.0], [39.2, 165760.0], [39.3, 165760.0], [39.4, 167040.0], [39.5, 167040.0], [39.6, 167043.0], [39.7, 167174.0], [39.8, 167174.0], [39.9, 169762.0], [40.0, 169762.0], [40.1, 169772.0], [40.2, 169772.0], [40.3, 169872.0], [40.4, 171581.0], [40.5, 171581.0], [40.6, 171723.0], [40.7, 171723.0], [40.8, 171742.0], [40.9, 171742.0], [41.0, 174575.0], [41.1, 174830.0], [41.2, 174830.0], [41.3, 175047.0], [41.4, 175047.0], [41.5, 175971.0], [41.6, 176208.0], [41.7, 176208.0], [41.8, 176230.0], [41.9, 176230.0], [42.0, 179442.0], [42.1, 179442.0], [42.2, 179569.0], [42.3, 179667.0], [42.4, 179667.0], [42.5, 180434.0], [42.6, 180434.0], [42.7, 180511.0], [42.8, 180511.0], [42.9, 180625.0], [43.0, 183512.0], [43.1, 183512.0], [43.2, 183773.0], [43.3, 183773.0], [43.4, 183794.0], [43.5, 183794.0], [43.6, 184488.0], [43.7, 184587.0], [43.8, 184587.0], [43.9, 184807.0], [44.0, 184807.0], [44.1, 187713.0], [44.2, 187786.0], [44.3, 187786.0], [44.4, 187956.0], [44.5, 187956.0], [44.6, 189115.0], [44.7, 189115.0], [44.8, 189116.0], [44.9, 189149.0], [45.0, 189149.0], [45.1, 192038.0], [45.2, 192038.0], [45.3, 192074.0], [45.4, 192074.0], [45.5, 192288.0], [45.6, 194987.0], [45.7, 194987.0], [45.8, 195102.0], [45.9, 195102.0], [46.0, 195252.0], [46.1, 195252.0], [46.2, 196367.0], [46.3, 196458.0], [46.4, 196458.0], [46.5, 196561.0], [46.6, 196561.0], [46.7, 199110.0], [46.8, 199147.0], [46.9, 199147.0], [47.0, 199149.0], [47.1, 199149.0], [47.2, 200642.0], [47.3, 200642.0], [47.4, 200644.0], [47.5, 200730.0], [47.6, 200730.0], [47.7, 203419.0], [47.8, 203419.0], [47.9, 203484.0], [48.0, 203484.0], [48.1, 203724.0], [48.2, 205205.0], [48.3, 205205.0], [48.4, 205362.0], [48.5, 205362.0], [48.6, 205378.0], [48.7, 205378.0], [48.8, 207701.0], [48.9, 207712.0], [49.0, 207712.0], [49.1, 207878.0], [49.2, 207878.0], [49.3, 209620.0], [49.4, 209756.0], [49.5, 209756.0], [49.6, 209797.0], [49.7, 209797.0], [49.8, 212188.0], [49.9, 212188.0], [50.0, 212392.0], [50.1, 212464.0], [50.2, 212464.0], [50.3, 213695.0], [50.4, 213695.0], [50.5, 213788.0], [50.6, 213788.0], [50.7, 213977.0], [50.8, 216755.0], [50.9, 216755.0], [51.0, 216774.0], [51.1, 216774.0], [51.2, 216796.0], [51.3, 218247.0], [51.4, 218247.0], [51.5, 218317.0], [51.6, 218317.0], [51.7, 218528.0], [51.8, 218528.0], [51.9, 221686.0], [52.0, 221777.0], [52.1, 221777.0], [52.2, 221820.0], [52.3, 221820.0], [52.4, 222771.0], [52.5, 222771.0], [52.6, 222969.0], [52.7, 222989.0], [52.8, 222989.0], [52.9, 225802.0], [53.0, 225802.0], [53.1, 225859.0], [53.2, 225859.0], [53.3, 225957.0], [53.4, 226785.0], [53.5, 226785.0], [53.6, 226921.0], [53.7, 226921.0], [53.8, 227057.0], [53.9, 229934.0], [54.0, 229934.0], [54.1, 229969.0], [54.2, 229969.0], [54.3, 230186.0], [54.4, 230186.0], [54.5, 230197.0], [54.6, 231160.0], [54.7, 231160.0], [54.8, 231270.0], [54.9, 231270.0], [55.0, 234002.0], [55.1, 234002.0], [55.2, 234059.0], [55.3, 234082.0], [55.4, 234082.0], [55.5, 234392.0], [55.6, 234392.0], [55.7, 235435.0], [55.8, 235435.0], [55.9, 235482.0], [56.0, 238493.0], [56.1, 238493.0], [56.2, 238635.0], [56.3, 238635.0], [56.4, 238645.0], [56.5, 238745.0], [56.6, 238745.0], [56.7, 238755.0], [56.8, 238755.0], [56.9, 238769.0], [57.0, 238769.0], [57.1, 242274.0], [57.2, 242293.0], [57.3, 242293.0], [57.4, 242384.0], [57.5, 242384.0], [57.6, 242427.0], [57.7, 242427.0], [57.8, 242506.0], [57.9, 242602.0], [58.0, 242602.0], [58.1, 246265.0], [58.2, 246265.0], [58.3, 246342.0], [58.4, 246342.0], [58.5, 246445.0], [58.6, 246452.0], [58.7, 246452.0], [58.8, 246549.0], [58.9, 246549.0], [59.0, 246586.0], [59.1, 250468.0], [59.2, 250468.0], [59.3, 250537.0], [59.4, 250537.0], [59.5, 250624.0], [59.6, 250624.0], [59.7, 250639.0], [59.8, 250754.0], [59.9, 250754.0], [60.0, 250781.0], [60.1, 250781.0], [60.2, 254440.0], [60.3, 254440.0], [60.4, 254440.0], [60.5, 254458.0], [60.6, 254458.0], [60.7, 254591.0], [60.8, 254591.0], [60.9, 254593.0], [61.0, 254593.0], [61.1, 254636.0], [61.2, 258624.0], [61.3, 258624.0], [61.4, 258657.0], [61.5, 258657.0], [61.6, 258666.0], [61.7, 258713.0], [61.8, 258713.0], [61.9, 258798.0], [62.0, 258798.0], [62.1, 258812.0], [62.2, 258812.0], [62.3, 262808.0], [62.4, 262815.0], [62.5, 262815.0], [62.6, 262901.0], [62.7, 262901.0], [62.8, 262938.0], [62.9, 262938.0], [63.0, 263001.0], [63.1, 263109.0], [63.2, 263109.0], [63.3, 266370.0], [63.4, 266370.0], [63.5, 266407.0], [63.6, 266407.0], [63.7, 266443.0], [63.8, 266452.0], [63.9, 266452.0], [64.0, 266549.0], [64.1, 266549.0], [64.2, 266572.0], [64.3, 270132.0], [64.4, 270132.0], [64.5, 270473.0], [64.6, 270473.0], [64.7, 270485.0], [64.8, 270485.0], [64.9, 270517.0], [65.0, 270556.0], [65.1, 270556.0], [65.2, 270591.0], [65.3, 270591.0], [65.4, 274575.0], [65.5, 274575.0], [65.6, 274603.0], [65.7, 274813.0], [65.8, 274813.0], [65.9, 274856.0], [66.0, 274856.0], [66.1, 274858.0], [66.2, 274858.0], [66.3, 274904.0], [66.4, 278615.0], [66.5, 278615.0], [66.6, 278674.0], [66.7, 278674.0], [66.8, 278688.0], [66.9, 278694.0], [67.0, 278694.0], [67.1, 278851.0], [67.2, 278851.0], [67.3, 278872.0], [67.4, 278872.0], [67.5, 282771.0], [67.6, 282782.0], [67.7, 282782.0], [67.8, 282822.0], [67.9, 282822.0], [68.0, 282853.0], [68.1, 282853.0], [68.2, 282912.0], [68.3, 282941.0], [68.4, 282941.0], [68.5, 286537.0], [68.6, 286537.0], [68.7, 286538.0], [68.8, 286538.0], [68.9, 286588.0], [69.0, 286651.0], [69.1, 286651.0], [69.2, 286842.0], [69.3, 286842.0], [69.4, 286923.0], [69.5, 290810.0], [69.6, 290810.0], [69.7, 290835.0], [69.8, 290835.0], [69.9, 290995.0], [70.0, 290995.0], [70.1, 291051.0], [70.2, 291142.0], [70.3, 291142.0], [70.4, 291232.0], [70.5, 291232.0], [70.6, 294799.0], [70.7, 294799.0], [70.8, 294964.0], [70.9, 295065.0], [71.0, 295065.0], [71.1, 295102.0], [71.2, 295102.0], [71.3, 295141.0], [71.4, 295141.0], [71.5, 295157.0], [71.6, 299031.0], [71.7, 299031.0], [71.8, 299093.0], [71.9, 299093.0], [72.0, 299106.0], [72.1, 299160.0], [72.2, 299160.0], [72.3, 299172.0], [72.4, 299172.0], [72.5, 299176.0], [72.6, 299176.0], [72.7, 303546.0], [72.8, 303612.0], [72.9, 303612.0], [73.0, 303639.0], [73.1, 303639.0], [73.2, 303725.0], [73.3, 303725.0], [73.4, 303746.0], [73.5, 303786.0], [73.6, 303786.0], [73.7, 308314.0], [73.8, 308314.0], [73.9, 308480.0], [74.0, 308480.0], [74.1, 308498.0], [74.2, 308571.0], [74.3, 308571.0], [74.4, 308601.0], [74.5, 308601.0], [74.6, 308610.0], [74.7, 312211.0], [74.8, 312211.0], [74.9, 312307.0], [75.0, 312307.0], [75.1, 312357.0], [75.2, 312357.0], [75.3, 312385.0], [75.4, 312452.0], [75.5, 312452.0], [75.6, 312634.0], [75.7, 312634.0], [75.8, 315880.0], [75.9, 315880.0], [76.0, 315922.0], [76.1, 315975.0], [76.2, 315975.0], [76.3, 316092.0], [76.4, 316092.0], [76.5, 316174.0], [76.6, 316174.0], [76.7, 317019.0], [76.8, 320206.0], [76.9, 320206.0], [77.0, 320219.0], [77.1, 320219.0], [77.2, 320293.0], [77.3, 320344.0], [77.4, 320344.0], [77.5, 320454.0], [77.6, 320454.0], [77.7, 321354.0], [77.8, 321354.0], [77.9, 324785.0], [78.0, 324907.0], [78.1, 324907.0], [78.2, 324921.0], [78.3, 324921.0], [78.4, 324952.0], [78.5, 324952.0], [78.6, 325024.0], [78.7, 325073.0], [78.8, 325073.0], [78.9, 329415.0], [79.0, 329415.0], [79.1, 329511.0], [79.2, 329511.0], [79.3, 329793.0], [79.4, 329814.0], [79.5, 329814.0], [79.6, 329828.0], [79.7, 329828.0], [79.8, 329834.0], [79.9, 333580.0], [80.0, 333580.0], [80.1, 333629.0], [80.2, 333629.0], [80.3, 333631.0], [80.4, 333631.0], [80.5, 333680.0], [80.6, 333739.0], [80.7, 333739.0], [80.8, 333931.0], [80.9, 333931.0], [81.0, 337697.0], [81.1, 337697.0], [81.2, 337706.0], [81.3, 337783.0], [81.4, 337783.0], [81.5, 337787.0], [81.6, 337787.0], [81.7, 337815.0], [81.8, 337815.0], [81.9, 337822.0], [82.0, 341710.0], [82.1, 341710.0], [82.2, 341744.0], [82.3, 341744.0], [82.4, 341776.0], [82.5, 341808.0], [82.6, 341808.0], [82.7, 341971.0], [82.8, 341971.0], [82.9, 341978.0], [83.0, 341978.0], [83.1, 345883.0], [83.2, 345982.0], [83.3, 345982.0], [83.4, 346007.0], [83.5, 346007.0], [83.6, 346085.0], [83.7, 346085.0], [83.8, 346090.0], [83.9, 346179.0], [84.0, 346179.0], [84.1, 350411.0], [84.2, 350411.0], [84.3, 350433.0], [84.4, 350433.0], [84.5, 350435.0], [84.6, 350544.0], [84.7, 350544.0], [84.8, 350650.0], [84.9, 350650.0], [85.0, 350733.0], [85.1, 354628.0], [85.2, 354628.0], [85.3, 354666.0], [85.4, 354666.0], [85.5, 354741.0], [85.6, 354741.0], [85.7, 354761.0], [85.8, 354770.0], [85.9, 354770.0], [86.0, 354801.0], [86.1, 354801.0], [86.2, 358711.0], [86.3, 358711.0], [86.4, 358799.0], [86.5, 358842.0], [86.6, 358842.0], [86.7, 358851.0], [86.8, 358851.0], [86.9, 358937.0], [87.0, 358937.0], [87.1, 359022.0], [87.2, 362470.0], [87.3, 362470.0], [87.4, 362534.0], [87.5, 362534.0], [87.6, 362574.0], [87.7, 362616.0], [87.8, 362616.0], [87.9, 362789.0], [88.0, 362789.0], [88.1, 362807.0], [88.2, 362807.0], [88.3, 362830.0], [88.4, 362839.0], [88.5, 362839.0], [88.6, 362879.0], [88.7, 362879.0], [88.8, 362899.0], [88.9, 362899.0], [89.0, 362914.0], [89.1, 362942.0], [89.2, 362942.0], [89.3, 363028.0], [89.4, 363028.0], [89.5, 363222.0], [89.6, 363222.0], [89.7, 364029.0], [89.8, 364159.0], [89.9, 364159.0], [90.0, 364164.0], [90.1, 364164.0], [90.2, 364222.0], [90.3, 364243.0], [90.4, 364243.0], [90.5, 364429.0], [90.6, 364429.0], [90.7, 364489.0], [90.8, 364489.0], [90.9, 365798.0], [91.0, 366356.0], [91.1, 366356.0], [91.2, 366769.0], [91.3, 366769.0], [91.4, 366834.0], [91.5, 366834.0], [91.6, 366987.0], [91.7, 367206.0], [91.8, 367206.0], [91.9, 367229.0], [92.0, 367229.0], [92.1, 367229.0], [92.2, 367229.0], [92.3, 367241.0], [92.4, 367258.0], [92.5, 367258.0], [92.6, 367280.0], [92.7, 367280.0], [92.8, 367282.0], [92.9, 367282.0], [93.0, 367282.0], [93.1, 367331.0], [93.2, 367331.0], [93.3, 367333.0], [93.4, 367333.0], [93.5, 367368.0], [93.6, 367370.0], [93.7, 367370.0], [93.8, 367378.0], [93.9, 367378.0], [94.0, 367389.0], [94.1, 367389.0], [94.2, 367407.0], [94.3, 367407.0], [94.4, 367407.0], [94.5, 367408.0], [94.6, 367408.0], [94.7, 367420.0], [94.8, 367420.0], [94.9, 367421.0], [95.0, 367436.0], [95.1, 367436.0], [95.2, 367498.0], [95.3, 367498.0], [95.4, 367514.0], [95.5, 367528.0], [95.6, 367528.0], [95.7, 367535.0], [95.8, 367535.0], [95.9, 367736.0], [96.0, 367736.0], [96.1, 367793.0], [96.2, 367819.0], [96.3, 367819.0], [96.4, 367837.0], [96.5, 367837.0], [96.6, 367887.0], [96.7, 367887.0], [96.8, 368127.0], [96.9, 368261.0], [97.0, 368261.0], [97.1, 368323.0], [97.2, 368323.0], [97.3, 368375.0], [97.4, 368375.0], [97.5, 368406.0], [97.6, 368500.0], [97.7, 368500.0], [97.8, 368526.0], [97.9, 368526.0], [98.0, 368564.0], [98.1, 368604.0], [98.2, 368604.0], [98.3, 368609.0], [98.4, 368609.0], [98.5, 368621.0], [98.6, 368621.0], [98.7, 368676.0], [98.8, 368680.0], [98.9, 368680.0], [99.0, 368701.0], [99.1, 368701.0], [99.2, 368717.0], [99.3, 368717.0], [99.4, 368747.0], [99.5, 368762.0], [99.6, 368762.0], [99.7, 368818.0], [99.8, 368818.0], [99.9, 371484.0], [100.0, 371484.0]], "isOverall": false, "label": "NCPPServerEastGFSAreaUS-1time-fullzedd", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 5400.0, "maxY": 16.0, "series": [{"data": [[274500.0, 2.0], [316100.0, 2.0], [165600.0, 2.0], [341700.0, 6.0], [184800.0, 2.0], [364100.0, 4.0], [367300.0, 12.0], [213600.0, 2.0], [221600.0, 2.0], [231200.0, 2.0], [242400.0, 2.0], [250400.0, 2.0], [270400.0, 4.0], [337600.0, 2.0], [350400.0, 6.0], [363200.0, 2.0], [139300.0, 2.0], [145700.0, 2.0], [282700.0, 4.0], [150500.0, 2.0], [308300.0, 2.0], [169700.0, 4.0], [333900.0, 2.0], [174500.0, 2.0], [362700.0, 2.0], [209700.0, 4.0], [246500.0, 4.0], [254500.0, 4.0], [278600.0, 8.0], [78700.0, 2.0], [317000.0, 2.0], [320200.0, 6.0], [329800.0, 6.0], [86700.0, 2.0], [345800.0, 2.0], [90700.0, 4.0], [368200.0, 2.0], [371400.0, 2.0], [104300.0, 2.0], [107500.0, 6.0], [112300.0, 2.0], [129100.0, 2.0], [274900.0, 2.0], [290900.0, 2.0], [154600.0, 2.0], [303700.0, 6.0], [367700.0, 4.0], [221800.0, 2.0], [242600.0, 2.0], [250600.0, 4.0], [258600.0, 6.0], [286800.0, 2.0], [312400.0, 2.0], [366800.0, 2.0], [133100.0, 2.0], [134700.0, 2.0], [137900.0, 4.0], [35700.0, 2.0], [145900.0, 2.0], [299100.0, 8.0], [324700.0, 2.0], [171500.0, 2.0], [44500.0, 2.0], [44900.0, 4.0], [179500.0, 2.0], [366300.0, 2.0], [48900.0, 4.0], [189100.0, 6.0], [53300.0, 6.0], [54500.0, 2.0], [57300.0, 2.0], [222700.0, 2.0], [225900.0, 2.0], [57700.0, 4.0], [238700.0, 6.0], [63300.0, 2.0], [263000.0, 2.0], [295000.0, 2.0], [78600.0, 4.0], [81000.0, 2.0], [82600.0, 2.0], [359000.0, 2.0], [90600.0, 2.0], [368600.0, 10.0], [95400.0, 2.0], [100200.0, 2.0], [112200.0, 4.0], [122600.0, 4.0], [143600.0, 2.0], [161200.0, 2.0], [329700.0, 2.0], [180400.0, 2.0], [368100.0, 2.0], [196400.0, 2.0], [212400.0, 2.0], [258800.0, 2.0], [316000.0, 2.0], [367200.0, 16.0], [364000.0, 2.0], [133300.0, 2.0], [134900.0, 4.0], [152500.0, 2.0], [157300.0, 4.0], [158900.0, 2.0], [312300.0, 6.0], [171700.0, 4.0], [350700.0, 2.0], [184500.0, 2.0], [187700.0, 4.0], [366700.0, 2.0], [203700.0, 2.0], [205300.0, 4.0], [222900.0, 4.0], [70500.0, 2.0], [74500.0, 2.0], [82500.0, 6.0], [5400.0, 4.0], [5500.0, 4.0], [86500.0, 4.0], [5700.0, 2.0], [5800.0, 2.0], [90500.0, 2.0], [362600.0, 2.0], [103300.0, 8.0], [108900.0, 4.0], [126500.0, 2.0], [130500.0, 2.0], [262900.0, 4.0], [143800.0, 2.0], [294900.0, 2.0], [9500.0, 2.0], [9700.0, 2.0], [9800.0, 4.0], [9900.0, 2.0], [10200.0, 2.0], [346100.0, 2.0], [358900.0, 2.0], [180600.0, 2.0], [368500.0, 6.0], [207800.0, 2.0], [14100.0, 6.0], [14200.0, 4.0], [227000.0, 2.0], [14400.0, 2.0], [246200.0, 2.0], [274800.0, 6.0], [18400.0, 2.0], [290800.0, 4.0], [18600.0, 4.0], [18800.0, 2.0], [303600.0, 4.0], [354800.0, 2.0], [22600.0, 2.0], [22800.0, 2.0], [364400.0, 4.0], [26800.0, 2.0], [31400.0, 4.0], [35600.0, 4.0], [147900.0, 2.0], [40000.0, 6.0], [315900.0, 4.0], [167100.0, 2.0], [44400.0, 2.0], [45600.0, 2.0], [187900.0, 2.0], [199100.0, 6.0], [200700.0, 2.0], [53200.0, 4.0], [216700.0, 6.0], [218300.0, 2.0], [57600.0, 2.0], [231100.0, 2.0], [234300.0, 2.0], [242300.0, 2.0], [70400.0, 2.0], [74400.0, 4.0], [299000.0, 4.0], [308600.0, 4.0], [78400.0, 2.0], [363000.0, 2.0], [95200.0, 2.0], [112000.0, 2.0], [117600.0, 4.0], [126400.0, 2.0], [266500.0, 4.0], [163200.0, 2.0], [333700.0, 2.0], [362500.0, 4.0], [365700.0, 2.0], [192000.0, 4.0], [195200.0, 2.0], [209600.0, 2.0], [238400.0, 2.0], [246400.0, 4.0], [254400.0, 6.0], [291200.0, 2.0], [148100.0, 4.0], [152900.0, 2.0], [303500.0, 2.0], [165700.0, 2.0], [341900.0, 4.0], [354700.0, 6.0], [367500.0, 6.0], [212100.0, 2.0], [213700.0, 2.0], [218500.0, 2.0], [221700.0, 2.0], [242500.0, 2.0], [250500.0, 2.0], [66300.0, 2.0], [70300.0, 2.0], [286600.0, 2.0], [74300.0, 4.0], [78300.0, 2.0], [312200.0, 2.0], [325000.0, 4.0], [337800.0, 4.0], [350600.0, 2.0], [95100.0, 2.0], [99900.0, 2.0], [113500.0, 2.0], [125500.0, 2.0], [126300.0, 2.0], [137800.0, 2.0], [270100.0, 2.0], [139400.0, 4.0], [145800.0, 2.0], [282900.0, 4.0], [308500.0, 2.0], [321300.0, 2.0], [169800.0, 2.0], [176200.0, 4.0], [179400.0, 2.0], [362900.0, 4.0], [192200.0, 2.0], [203400.0, 4.0], [225800.0, 4.0], [235400.0, 4.0], [238600.0, 4.0], [254600.0, 2.0], [262800.0, 4.0], [278800.0, 4.0], [320400.0, 2.0], [346000.0, 6.0], [358800.0, 4.0], [368400.0, 2.0], [141900.0, 2.0], [291100.0, 2.0], [154700.0, 2.0], [39900.0, 4.0], [161100.0, 4.0], [329500.0, 2.0], [44700.0, 2.0], [183500.0, 2.0], [48700.0, 2.0], [196300.0, 2.0], [212300.0, 2.0], [213900.0, 2.0], [226700.0, 2.0], [58700.0, 2.0], [229900.0, 4.0], [61500.0, 2.0], [62300.0, 2.0], [250700.0, 4.0], [258700.0, 4.0], [67800.0, 2.0], [70200.0, 2.0], [312600.0, 2.0], [315800.0, 2.0], [89400.0, 2.0], [99800.0, 2.0], [113400.0, 2.0], [116600.0, 8.0], [121400.0, 2.0], [125400.0, 2.0], [130200.0, 2.0], [133200.0, 2.0], [270500.0, 6.0], [286500.0, 6.0], [157200.0, 2.0], [324900.0, 6.0], [337700.0, 6.0], [174800.0, 2.0], [179600.0, 2.0], [350500.0, 2.0], [184400.0, 2.0], [205200.0, 2.0], [234000.0, 6.0], [266400.0, 6.0], [333600.0, 6.0], [362400.0, 2.0], [368800.0, 2.0], [142100.0, 4.0], [143700.0, 2.0], [294700.0, 2.0], [154900.0, 2.0], [162900.0, 2.0], [320300.0, 2.0], [345900.0, 2.0], [358700.0, 4.0], [180500.0, 2.0], [183700.0, 4.0], [368300.0, 4.0], [194900.0, 2.0], [196500.0, 2.0], [207700.0, 4.0], [226900.0, 2.0], [230100.0, 4.0], [66100.0, 2.0], [274600.0, 2.0], [70100.0, 2.0], [76500.0, 2.0], [85300.0, 2.0], [341800.0, 2.0], [354600.0, 4.0], [367400.0, 14.0], [364200.0, 4.0], [98900.0, 4.0], [107700.0, 2.0], [121300.0, 4.0], [125300.0, 2.0], [130100.0, 2.0], [286900.0, 2.0], [152600.0, 2.0], [159000.0, 4.0], [165400.0, 2.0], [167000.0, 4.0], [175000.0, 2.0], [366900.0, 2.0], [200600.0, 4.0], [218200.0, 2.0], [242200.0, 4.0], [282800.0, 4.0], [18500.0, 2.0], [18700.0, 2.0], [308400.0, 4.0], [22700.0, 6.0], [22900.0, 2.0], [362800.0, 10.0], [26700.0, 4.0], [26900.0, 6.0], [31100.0, 2.0], [31300.0, 2.0], [31500.0, 4.0], [263100.0, 2.0], [266300.0, 2.0], [35400.0, 2.0], [35800.0, 4.0], [150300.0, 4.0], [295100.0, 6.0], [39800.0, 2.0], [163100.0, 2.0], [333500.0, 2.0], [175900.0, 2.0], [368700.0, 8.0], [48600.0, 4.0], [195100.0, 2.0], [50200.0, 2.0], [57800.0, 2.0], [61800.0, 2.0], [62200.0, 4.0], [246300.0, 2.0], [66000.0, 6.0], [72400.0, 2.0], [291000.0, 2.0], [82800.0, 2.0], [329400.0, 2.0], [86800.0, 4.0], [90800.0, 2.0], [94000.0, 2.0], [367800.0, 6.0], [95600.0, 4.0], [98800.0, 2.0], [104400.0, 2.0], [121200.0, 2.0], [129200.0, 4.0]], "isOverall": false, "label": "NCPPServerEastGFSAreaUS-1time-fullzedd", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 371400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1154.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1154.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1154.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 23.5, "minX": 1.65833004E12, "maxY": 488.423076923077, "series": [{"data": [[1.65833034E12, 170.51190476190473], [1.65833016E12, 416.0120481927711], [1.65833022E12, 335.5128205128205], [1.65833004E12, 469.8571428571427], [1.6583301E12, 488.423076923077], [1.6583304E12, 87.5], [1.65833046E12, 23.5], [1.65833028E12, 254.52380952380955]], "isOverall": false, "label": "NCPPServerEastGFSAreaUS-1time-fullzedd", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65833046E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 34423.08571428572, "minX": 1.0, "maxY": 371484.0, "series": [{"data": [[2.0, 368375.0], [3.0, 368526.0], [4.0, 368127.0], [5.0, 368818.0], [6.0, 368762.0], [7.0, 367535.0], [8.0, 368747.0], [9.0, 368701.0], [10.0, 364429.0], [11.0, 368564.0], [12.0, 367206.0], [13.0, 368500.0], [14.0, 364029.0], [15.0, 368676.0], [16.0, 368604.0], [17.0, 367229.0], [18.0, 367241.0], [19.0, 367498.0], [20.0, 367280.0], [21.0, 366356.0], [22.0, 363222.0], [23.0, 367887.0], [24.0, 367793.0], [25.0, 367819.0], [26.0, 367837.0], [27.0, 367736.0], [28.0, 363028.0], [29.0, 364222.0], [30.0, 367528.0], [31.0, 367408.0], [33.0, 367420.0], [32.0, 367333.0], [35.0, 364243.0], [34.0, 367378.0], [37.0, 367229.0], [36.0, 367389.0], [39.0, 367331.0], [38.0, 367258.0], [41.0, 368717.0], [40.0, 367282.0], [43.0, 367370.0], [42.0, 367407.0], [45.0, 367368.0], [44.0, 367514.0], [47.0, 368621.0], [46.0, 362839.0], [49.0, 368609.0], [48.0, 368680.0], [51.0, 371484.0], [50.0, 364489.0], [53.0, 368323.0], [52.0, 367282.0], [55.0, 364164.0], [54.0, 368261.0], [57.0, 365798.0], [56.0, 364159.0], [59.0, 367436.0], [58.0, 367407.0], [61.0, 362899.0], [60.0, 367421.0], [63.0, 366987.0], [62.0, 362942.0], [67.0, 362616.0], [66.0, 366769.0], [65.0, 366834.0], [64.0, 362534.0], [71.0, 362789.0], [70.0, 362879.0], [69.0, 362914.0], [68.0, 362470.0], [75.0, 359022.0], [74.0, 362574.0], [73.0, 362830.0], [72.0, 362807.0], [79.0, 358711.0], [78.0, 358851.0], [77.0, 358842.0], [76.0, 358937.0], [83.0, 354801.0], [82.0, 354770.0], [81.0, 354761.0], [80.0, 358799.0], [87.0, 350650.0], [86.0, 354628.0], [85.0, 354666.0], [84.0, 354741.0], [91.0, 350435.0], [90.0, 350433.0], [89.0, 350544.0], [88.0, 350733.0], [95.0, 346085.0], [94.0, 346179.0], [93.0, 346090.0], [92.0, 350411.0], [99.0, 341978.0], [98.0, 345883.0], [97.0, 345982.0], [96.0, 346007.0], [103.0, 341744.0], [102.0, 341808.0], [101.0, 341776.0], [100.0, 341971.0], [107.0, 337822.0], [106.0, 337815.0], [105.0, 337787.0], [104.0, 341710.0], [111.0, 333931.0], [110.0, 337697.0], [109.0, 337783.0], [108.0, 337706.0], [115.0, 333631.0], [114.0, 333629.0], [113.0, 333739.0], [112.0, 333680.0], [119.0, 329814.0], [118.0, 329793.0], [117.0, 329834.0], [116.0, 333580.0], [123.0, 325024.0], [122.0, 329415.0], [121.0, 329511.0], [120.0, 329828.0], [127.0, 324921.0], [126.0, 324907.0], [125.0, 324952.0], [124.0, 325073.0], [135.0, 317019.0], [134.0, 320206.0], [133.0, 320219.0], [132.0, 320344.0], [131.0, 320293.0], [130.0, 320454.0], [129.0, 321354.0], [128.0, 324785.0], [143.0, 312385.0], [142.0, 312452.0], [141.0, 312634.0], [140.0, 315880.0], [139.0, 315975.0], [138.0, 315922.0], [137.0, 316092.0], [136.0, 316174.0], [151.0, 308480.0], [150.0, 308498.0], [149.0, 308571.0], [148.0, 308601.0], [147.0, 308610.0], [146.0, 312211.0], [145.0, 312307.0], [144.0, 312357.0], [159.0, 299176.0], [158.0, 303546.0], [157.0, 303639.0], [156.0, 303612.0], [155.0, 303725.0], [154.0, 303746.0], [153.0, 303786.0], [152.0, 308314.0], [167.0, 295102.0], [166.0, 295157.0], [165.0, 295141.0], [164.0, 299106.0], [163.0, 299093.0], [162.0, 299031.0], [161.0, 299160.0], [160.0, 299172.0], [175.0, 290835.0], [174.0, 291051.0], [173.0, 290995.0], [172.0, 291142.0], [171.0, 291232.0], [170.0, 294799.0], [169.0, 294964.0], [168.0, 295065.0], [183.0, 282941.0], [182.0, 286537.0], [181.0, 286588.0], [180.0, 286538.0], [179.0, 286651.0], [178.0, 286842.0], [177.0, 286923.0], [176.0, 290810.0], [191.0, 278694.0], [190.0, 278851.0], [189.0, 278872.0], [188.0, 282771.0], [187.0, 282822.0], [186.0, 282782.0], [185.0, 282853.0], [184.0, 282912.0], [199.0, 274575.0], [198.0, 274858.0], [197.0, 274834.5], [195.0, 274904.0], [194.0, 278615.0], [193.0, 278688.0], [192.0, 278674.0], [207.0, 266572.0], [206.0, 270132.0], [205.0, 270473.0], [204.0, 270485.0], [203.0, 270517.0], [202.0, 270591.0], [201.0, 270556.0], [200.0, 274603.0], [214.0, 263001.0], [213.0, 263109.0], [212.0, 266370.0], [211.0, 266407.0], [210.0, 266443.0], [209.0, 266452.0], [208.0, 266549.0], [223.0, 258657.0], [222.0, 258666.0], [221.0, 258713.0], [220.0, 258798.0], [219.0, 258812.0], [218.0, 262815.0], [217.0, 262808.0], [216.0, 262919.5], [231.0, 250754.0], [230.0, 254440.0], [229.0, 254458.0], [228.0, 254440.0], [227.0, 254593.0], [226.0, 254636.0], [225.0, 254591.0], [224.0, 258624.0], [239.0, 246452.0], [238.0, 246586.0], [237.0, 246549.0], [236.0, 250468.0], [235.0, 250537.0], [234.0, 250639.0], [233.0, 250624.0], [232.0, 250781.0], [247.0, 242293.0], [246.0, 242384.0], [245.0, 242427.0], [244.0, 242506.0], [243.0, 242602.0], [242.0, 246265.0], [241.0, 246342.0], [240.0, 246445.0], [255.0, 235482.0], [254.0, 238493.0], [253.0, 238645.0], [252.0, 238635.0], [251.0, 238769.0], [250.0, 238755.0], [249.0, 238745.0], [248.0, 242274.0], [270.0, 225957.0], [271.0, 225859.0], [269.0, 226785.0], [268.0, 226921.0], [267.0, 227057.0], [266.0, 229969.0], [265.0, 229934.0], [264.0, 230197.0], [263.0, 230186.0], [256.0, 235435.0], [259.0, 234070.5], [257.0, 234392.0], [262.0, 231160.0], [261.0, 231270.0], [260.0, 234002.0], [287.0, 213695.0], [283.0, 111119.0], [284.0, 111126.5], [275.0, 222771.0], [274.0, 222989.0], [273.0, 222969.0], [272.0, 225802.0], [286.0, 213788.0], [285.0, 213977.0], [282.0, 216796.0], [281.0, 218247.0], [280.0, 218317.0], [279.0, 218528.0], [278.0, 221686.0], [277.0, 221777.0], [276.0, 221820.0], [302.0, 203419.0], [295.0, 106728.5], [291.0, 107696.5], [290.0, 212188.0], [289.0, 212392.0], [288.0, 212464.0], [292.0, 107672.0], [294.0, 207878.0], [293.0, 209620.0], [303.0, 103284.5], [297.0, 205362.0], [296.0, 207701.0], [301.0, 203484.0], [300.0, 203724.0], [299.0, 205205.0], [298.0, 205378.0], [318.0, 189115.0], [319.0, 189149.0], [317.0, 192038.0], [316.0, 192074.0], [315.0, 192288.0], [314.0, 194987.0], [313.0, 195102.0], [312.0, 195252.0], [311.0, 196367.0], [305.0, 200642.0], [304.0, 200644.0], [307.0, 199110.0], [306.0, 199149.0], [310.0, 196458.0], [309.0, 196561.0], [308.0, 199147.0], [334.0, 179569.0], [335.0, 179442.0], [333.0, 179667.0], [332.0, 180434.0], [331.0, 180511.0], [330.0, 180625.0], [329.0, 183512.0], [328.0, 183783.5], [326.0, 184488.0], [321.0, 187956.0], [320.0, 189116.0], [323.0, 187713.0], [322.0, 187786.0], [325.0, 184587.0], [324.0, 184807.0], [350.0, 167040.0], [351.0, 165760.0], [349.0, 167043.0], [348.0, 167174.0], [347.0, 169772.0], [346.0, 169762.0], [345.0, 169872.0], [344.0, 171581.0], [343.0, 171742.0], [337.0, 176230.0], [336.0, 176208.0], [339.0, 175047.0], [338.0, 175971.0], [342.0, 171723.0], [341.0, 174575.0], [340.0, 174830.0], [366.0, 154913.0], [367.0, 154710.0], [365.0, 157248.0], [364.0, 157347.0], [363.0, 157372.0], [362.0, 158937.0], [361.0, 159092.0], [360.0, 159078.0], [359.0, 161190.0], [353.0, 165456.0], [352.0, 165652.0], [355.0, 163101.0], [354.0, 163201.0], [358.0, 161168.0], [357.0, 161266.0], [356.0, 162911.0], [382.0, 143793.0], [383.0, 143667.0], [381.0, 143861.0], [380.0, 145763.0], [379.0, 145837.0], [378.0, 145943.0], [377.0, 147926.0], [376.0, 148112.0], [375.0, 148160.0], [369.0, 152919.0], [368.0, 154685.0], [371.0, 152547.0], [370.0, 152680.0], [374.0, 150377.0], [373.0, 150360.0], [372.0, 150535.0], [398.0, 133156.0], [399.0, 130536.0], [397.0, 133225.0], [396.0, 133310.0], [395.0, 134709.0], [394.0, 134987.0], [393.0, 134969.0], [392.0, 137812.0], [391.0, 137910.0], [385.0, 142120.0], [384.0, 142179.0], [387.0, 139462.0], [386.0, 141918.0], [390.0, 137955.0], [389.0, 139411.0], [388.0, 139393.0], [414.0, 121385.0], [415.0, 121390.0], [413.0, 121477.0], [412.0, 122611.0], [411.0, 122680.0], [410.0, 125389.0], [409.0, 125442.0], [408.0, 125570.0], [407.0, 126406.0], [401.0, 130198.0], [400.0, 130202.0], [403.0, 129224.0], [402.0, 129295.0], [406.0, 126371.0], [405.0, 126512.0], [404.0, 129150.0], [430.0, 108954.0], [431.0, 107754.0], [429.0, 108955.0], [428.0, 112055.0], [427.0, 112218.0], [426.0, 112296.0], [425.0, 112333.0], [424.0, 113447.0], [423.0, 113538.0], [416.0, 121232.0], [419.0, 116657.0], [418.0, 117679.5], [422.0, 116637.0], [421.0, 116655.0], [420.0, 116626.0], [446.0, 98870.0], [447.0, 95649.0], [445.0, 98991.0], [444.0, 98987.0], [443.0, 99887.0], [442.0, 99985.0], [441.0, 100290.0], [440.0, 103318.0], [439.0, 103308.0], [433.0, 107525.0], [432.0, 107532.0], [435.0, 104448.0], [434.0, 107540.0], [438.0, 103374.0], [437.0, 103350.0], [436.0, 104342.0], [462.0, 86587.0], [463.0, 86515.0], [461.0, 86702.0], [460.0, 86852.0], [459.0, 86854.0], [458.0, 89475.0], [457.0, 90599.0], [456.0, 90697.0], [455.0, 90751.0], [449.0, 95484.0], [448.0, 95625.0], [451.0, 95167.0], [450.0, 95281.0], [454.0, 90755.0], [453.0, 90831.0], [452.0, 94036.0], [478.0, 74491.0], [479.0, 74425.0], [477.0, 74569.0], [476.0, 76504.0], [475.0, 78391.0], [474.0, 78472.0], [473.0, 78657.0], [472.0, 78740.0], [471.0, 78680.0], [465.0, 82829.0], [464.0, 85305.0], [467.0, 82563.0], [466.0, 82637.0], [470.0, 81084.0], [469.0, 82529.0], [468.0, 82547.0], [495.0, 62398.0], [490.0, 37841.5], [494.0, 63338.0], [493.0, 66055.0], [492.0, 66053.0], [483.0, 70526.0], [482.0, 72409.0], [481.0, 74300.0], [480.0, 74342.0], [491.0, 66060.0], [489.0, 66384.0], [488.0, 67867.0], [487.0, 70142.0], [486.0, 70236.0], [485.0, 70335.0], [484.0, 70419.0], [496.0, 35995.0], [500.0, 34423.08571428572], [499.0, 61587.0], [498.0, 61875.0], [497.0, 62236.0], [1.0, 368406.0]], "isOverall": false, "label": "NCPPServerEastGFSAreaUS-1time-fullzedd", "isController": false}, {"data": [[281.6100519930672, 207023.90987868284]], "isOverall": false, "label": "NCPPServerEastGFSAreaUS-1time-fullzedd-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1617.0, "minX": 1.65833004E12, "maxY": 4961342.4, "series": [{"data": [[1.65833034E12, 4961342.4], [1.65833016E12, 4902278.8], [1.65833022E12, 4606960.8], [1.65833004E12, 2480671.2], [1.6583301E12, 4606960.8], [1.6583304E12, 4843215.2], [1.65833046E12, 2716925.6], [1.65833028E12, 4961342.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65833034E12, 3234.0], [1.65833016E12, 3195.5], [1.65833022E12, 3003.0], [1.65833004E12, 1617.0], [1.6583301E12, 3003.0], [1.6583304E12, 3157.0], [1.65833046E12, 1771.0], [1.65833028E12, 3234.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65833046E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 18495.19047619048, "minX": 1.65833004E12, "maxY": 367177.5434782609, "series": [{"data": [[1.65833034E12, 293311.2738095241], [1.65833016E12, 119406.67469879519], [1.65833022E12, 177746.66666666677], [1.65833004E12, 18495.19047619048], [1.6583301E12, 61874.24358974361], [1.6583304E12, 350019.3048780489], [1.65833046E12, 367177.5434782609], [1.65833028E12, 236249.0]], "isOverall": false, "label": "NCPPServerEastGFSAreaUS-1time-fullzedd", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65833046E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 18104.309523809527, "minX": 1.65833004E12, "maxY": 366851.3913043477, "series": [{"data": [[1.65833034E12, 292928.94047619065], [1.65833016E12, 119058.53012048191], [1.65833022E12, 177388.48717948722], [1.65833004E12, 18104.309523809527], [1.6583301E12, 61475.858974358984], [1.6583304E12, 349633.2439024389], [1.65833046E12, 366851.3913043477], [1.65833028E12, 235863.35714285716]], "isOverall": false, "label": "NCPPServerEastGFSAreaUS-1time-fullzedd", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65833046E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.65833004E12, "maxY": 30.119047619047624, "series": [{"data": [[1.65833034E12, 19.940476190476193], [1.65833016E12, 19.614457831325296], [1.65833022E12, 19.820512820512825], [1.65833004E12, 30.119047619047624], [1.6583301E12, 21.57692307692306], [1.6583304E12, 14.829268292682912], [1.65833046E12, 0.0], [1.65833028E12, 20.119047619047624]], "isOverall": false, "label": "NCPPServerEastGFSAreaUS-1time-fullzedd", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65833046E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5479.0, "minX": 1.65833004E12, "maxY": 371484.0, "series": [{"data": [[1.65833034E12, 321354.0], [1.65833016E12, 148160.0], [1.65833022E12, 205378.0], [1.65833004E12, 31546.0], [1.6583301E12, 89475.0], [1.6583304E12, 371484.0], [1.65833046E12, 368818.0], [1.65833028E12, 263109.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65833034E12, 316100.2], [1.65833016E12, 143704.8], [1.65833022E12, 200644.0], [1.65833004E12, 31418.5], [1.6583301E12, 82829.0], [1.6583304E12, 367414.0], [1.65833046E12, 368701.0], [1.65833028E12, 258721.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65833034E12, 321354.0], [1.65833016E12, 148160.0], [1.65833022E12, 205378.0], [1.65833004E12, 31546.0], [1.6583301E12, 89475.0], [1.6583304E12, 371484.0], [1.65833046E12, 368818.0], [1.65833028E12, 263109.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65833034E12, 320259.7], [1.65833016E12, 145905.9], [1.65833022E12, 203724.0], [1.65833004E12, 31526.25], [1.6583301E12, 86702.0], [1.6583304E12, 368537.5], [1.65833046E12, 368752.25], [1.65833028E12, 262862.3]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65833034E12, 266370.0], [1.65833016E12, 90599.0], [1.65833022E12, 150360.0], [1.65833004E12, 5479.0], [1.6583301E12, 35493.0], [1.6583304E12, 324785.0], [1.65833046E12, 362839.0], [1.65833028E12, 207701.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65833034E12, 293015.5], [1.65833016E12, 121232.0], [1.65833022E12, 177836.0], [1.65833004E12, 18663.5], [1.6583301E12, 62231.5], [1.6583304E12, 350691.5], [1.65833046E12, 367414.0], [1.65833028E12, 236987.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65833046E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 109904.5, "minX": 2.0, "maxY": 286619.5, "series": [{"data": [[2.0, 152919.0], [4.0, 154697.5], [8.0, 109904.5], [10.0, 254697.0], [12.0, 286619.5], [6.0, 182068.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 12.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 109537.5, "minX": 2.0, "maxY": 286336.0, "series": [{"data": [[2.0, 152401.0], [4.0, 154493.0], [8.0, 109537.5], [10.0, 254301.5], [12.0, 286336.0], [6.0, 181731.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 12.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.1666666666666667, "minX": 1.65833004E12, "maxY": 18.066666666666666, "series": [{"data": [[1.65833004E12, 18.066666666666666], [1.6583301E12, 1.1666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6583301E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.4, "minX": 1.65833004E12, "maxY": 2.8, "series": [{"data": [[1.65833034E12, 2.8], [1.65833016E12, 2.7666666666666666], [1.65833022E12, 2.6], [1.65833004E12, 1.4], [1.6583301E12, 2.6], [1.6583304E12, 2.7333333333333334], [1.65833046E12, 1.5333333333333334], [1.65833028E12, 2.8]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65833046E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.4, "minX": 1.65833004E12, "maxY": 2.8, "series": [{"data": [[1.65833034E12, 2.8], [1.65833016E12, 2.7666666666666666], [1.65833022E12, 2.6], [1.65833004E12, 1.4], [1.6583301E12, 2.6], [1.6583304E12, 2.7333333333333334], [1.65833046E12, 1.5333333333333334], [1.65833028E12, 2.8]], "isOverall": false, "label": "NCPPServerEastGFSAreaUS-1time-fullzedd-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65833046E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.4, "minX": 1.65833004E12, "maxY": 2.8, "series": [{"data": [[1.65833034E12, 2.8], [1.65833016E12, 2.7666666666666666], [1.65833022E12, 2.6], [1.65833004E12, 1.4], [1.6583301E12, 2.6], [1.6583304E12, 2.7333333333333334], [1.65833046E12, 1.5333333333333334], [1.65833028E12, 2.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65833046E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 454.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 0.0], [7.1, 0.0], [7.2, 0.0], [7.3, 0.0], [7.4, 0.0], [7.5, 0.0], [7.6, 0.0], [7.7, 0.0], [7.8, 0.0], [7.9, 0.0], [8.0, 0.0], [8.1, 0.0], [8.2, 0.0], [8.3, 0.0], [8.4, 0.0], [8.5, 0.0], [8.6, 0.0], [8.7, 0.0], [8.8, 0.0], [8.9, 0.0], [9.0, 0.0], [9.1, 0.0], [9.2, 0.0], [9.3, 0.0], [9.4, 0.0], [9.5, 0.0], [9.6, 0.0], [9.7, 0.0], [9.8, 0.0], [9.9, 0.0], [10.0, 0.0], [10.1, 0.0], [10.2, 0.0], [10.3, 0.0], [10.4, 0.0], [10.5, 0.0], [10.6, 0.0], [10.7, 0.0], [10.8, 0.0], [10.9, 0.0], [11.0, 0.0], [11.1, 0.0], [11.2, 0.0], [11.3, 0.0], [11.4, 0.0], [11.5, 0.0], [11.6, 0.0], [11.7, 0.0], [11.8, 0.0], [11.9, 0.0], [12.0, 0.0], [12.1, 0.0], [12.2, 0.0], [12.3, 0.0], [12.4, 0.0], [12.5, 0.0], [12.6, 0.0], [12.7, 0.0], [12.8, 0.0], [12.9, 0.0], [13.0, 0.0], [13.1, 0.0], [13.2, 0.0], [13.3, 0.0], [13.4, 0.0], [13.5, 0.0], [13.6, 0.0], [13.7, 0.0], [13.8, 0.0], [13.9, 0.0], [14.0, 0.0], [14.1, 0.0], [14.2, 0.0], [14.3, 0.0], [14.4, 0.0], [14.5, 0.0], [14.6, 0.0], [14.7, 0.0], [14.8, 0.0], [14.9, 0.0], [15.0, 0.0], [15.1, 0.0], [15.2, 0.0], [15.3, 0.0], [15.4, 0.0], [15.5, 0.0], [15.6, 0.0], [15.7, 0.0], [15.8, 0.0], [15.9, 0.0], [16.0, 0.0], [16.1, 0.0], [16.2, 0.0], [16.3, 0.0], [16.4, 0.0], [16.5, 0.0], [16.6, 0.0], [16.7, 0.0], [16.8, 0.0], [16.9, 0.0], [17.0, 0.0], [17.1, 0.0], [17.2, 0.0], [17.3, 0.0], [17.4, 0.0], [17.5, 0.0], [17.6, 0.0], [17.7, 0.0], [17.8, 0.0], [17.9, 0.0], [18.0, 0.0], [18.1, 0.0], [18.2, 0.0], [18.3, 0.0], [18.4, 0.0], [18.5, 0.0], [18.6, 0.0], [18.7, 0.0], [18.8, 0.0], [18.9, 0.0], [19.0, 0.0], [19.1, 0.0], [19.2, 0.0], [19.3, 0.0], [19.4, 0.0], [19.5, 0.0], [19.6, 0.0], [19.7, 0.0], [19.8, 0.0], [19.9, 0.0], [20.0, 0.0], [20.1, 0.0], [20.2, 0.0], [20.3, 0.0], [20.4, 0.0], [20.5, 0.0], [20.6, 0.0], [20.7, 0.0], [20.8, 0.0], [20.9, 0.0], [21.0, 0.0], [21.1, 0.0], [21.2, 0.0], [21.3, 0.0], [21.4, 0.0], [21.5, 0.0], [21.6, 0.0], [21.7, 0.0], [21.8, 0.0], [21.9, 0.0], [22.0, 0.0], [22.1, 0.0], [22.2, 0.0], [22.3, 0.0], [22.4, 0.0], [22.5, 0.0], [22.6, 0.0], [22.7, 0.0], [22.8, 0.0], [22.9, 0.0], [23.0, 0.0], [23.1, 0.0], [23.2, 0.0], [23.3, 0.0], [23.4, 0.0], [23.5, 0.0], [23.6, 0.0], [23.7, 0.0], [23.8, 0.0], [23.9, 0.0], [24.0, 0.0], [24.1, 0.0], [24.2, 0.0], [24.3, 0.0], [24.4, 0.0], [24.5, 0.0], [24.6, 0.0], [24.7, 0.0], [24.8, 0.0], [24.9, 0.0], [25.0, 0.0], [25.1, 0.0], [25.2, 0.0], [25.3, 0.0], [25.4, 0.0], [25.5, 0.0], [25.6, 0.0], [25.7, 0.0], [25.8, 0.0], [25.9, 0.0], [26.0, 0.0], [26.1, 0.0], [26.2, 0.0], [26.3, 0.0], [26.4, 0.0], [26.5, 0.0], [26.6, 0.0], [26.7, 0.0], [26.8, 0.0], [26.9, 0.0], [27.0, 0.0], [27.1, 0.0], [27.2, 0.0], [27.3, 0.0], [27.4, 0.0], [27.5, 0.0], [27.6, 0.0], [27.7, 0.0], [27.8, 0.0], [27.9, 0.0], [28.0, 0.0], [28.1, 0.0], [28.2, 0.0], [28.3, 0.0], [28.4, 0.0], [28.5, 0.0], [28.6, 0.0], [28.7, 0.0], [28.8, 0.0], [28.9, 0.0], [29.0, 0.0], [29.1, 0.0], [29.2, 0.0], [29.3, 0.0], [29.4, 0.0], [29.5, 0.0], [29.6, 0.0], [29.7, 0.0], [29.8, 0.0], [29.9, 0.0], [30.0, 0.0], [30.1, 0.0], [30.2, 0.0], [30.3, 0.0], [30.4, 0.0], [30.5, 0.0], [30.6, 0.0], [30.7, 0.0], [30.8, 0.0], [30.9, 0.0], [31.0, 0.0], [31.1, 0.0], [31.2, 0.0], [31.3, 0.0], [31.4, 0.0], [31.5, 0.0], [31.6, 0.0], [31.7, 0.0], [31.8, 0.0], [31.9, 0.0], [32.0, 0.0], [32.1, 0.0], [32.2, 0.0], [32.3, 0.0], [32.4, 0.0], [32.5, 0.0], [32.6, 0.0], [32.7, 0.0], [32.8, 0.0], [32.9, 0.0], [33.0, 0.0], [33.1, 0.0], [33.2, 0.0], [33.3, 0.0], [33.4, 0.0], [33.5, 0.0], [33.6, 0.0], [33.7, 0.0], [33.8, 0.0], [33.9, 0.0], [34.0, 0.0], [34.1, 0.0], [34.2, 0.0], [34.3, 0.0], [34.4, 0.0], [34.5, 0.0], [34.6, 0.0], [34.7, 0.0], [34.8, 0.0], [34.9, 0.0], [35.0, 0.0], [35.1, 0.0], [35.2, 0.0], [35.3, 0.0], [35.4, 0.0], [35.5, 0.0], [35.6, 0.0], [35.7, 0.0], [35.8, 0.0], [35.9, 0.0], [36.0, 0.0], [36.1, 0.0], [36.2, 0.0], [36.3, 0.0], [36.4, 0.0], [36.5, 0.0], [36.6, 0.0], [36.7, 0.0], [36.8, 0.0], [36.9, 0.0], [37.0, 0.0], [37.1, 0.0], [37.2, 0.0], [37.3, 0.0], [37.4, 0.0], [37.5, 0.0], [37.6, 0.0], [37.7, 0.0], [37.8, 0.0], [37.9, 0.0], [38.0, 0.0], [38.1, 0.0], [38.2, 0.0], [38.3, 0.0], [38.4, 0.0], [38.5, 0.0], [38.6, 0.0], [38.7, 0.0], [38.8, 0.0], [38.9, 0.0], [39.0, 0.0], [39.1, 0.0], [39.2, 0.0], [39.3, 0.0], [39.4, 0.0], [39.5, 0.0], [39.6, 0.0], [39.7, 0.0], [39.8, 0.0], [39.9, 0.0], [40.0, 0.0], [40.1, 0.0], [40.2, 0.0], [40.3, 0.0], [40.4, 0.0], [40.5, 0.0], [40.6, 0.0], [40.7, 0.0], [40.8, 0.0], [40.9, 0.0], [41.0, 0.0], [41.1, 0.0], [41.2, 0.0], [41.3, 0.0], [41.4, 0.0], [41.5, 0.0], [41.6, 0.0], [41.7, 0.0], [41.8, 0.0], [41.9, 0.0], [42.0, 0.0], [42.1, 0.0], [42.2, 0.0], [42.3, 0.0], [42.4, 0.0], [42.5, 0.0], [42.6, 0.0], [42.7, 0.0], [42.8, 0.0], [42.9, 0.0], [43.0, 0.0], [43.1, 0.0], [43.2, 0.0], [43.3, 0.0], [43.4, 0.0], [43.5, 0.0], [43.6, 0.0], [43.7, 0.0], [43.8, 0.0], [43.9, 0.0], [44.0, 0.0], [44.1, 0.0], [44.2, 0.0], [44.3, 0.0], [44.4, 0.0], [44.5, 0.0], [44.6, 0.0], [44.7, 0.0], [44.8, 0.0], [44.9, 0.0], [45.0, 0.0], [45.1, 0.0], [45.2, 0.0], [45.3, 0.0], [45.4, 0.0], [45.5, 0.0], [45.6, 0.0], [45.7, 0.0], [45.8, 0.0], [45.9, 0.0], [46.0, 0.0], [46.1, 0.0], [46.2, 0.0], [46.3, 0.0], [46.4, 0.0], [46.5, 0.0], [46.6, 0.0], [46.7, 0.0], [46.8, 0.0], [46.9, 0.0], [47.0, 0.0], [47.1, 0.0], [47.2, 0.0], [47.3, 0.0], [47.4, 0.0], [47.5, 0.0], [47.6, 0.0], [47.7, 0.0], [47.8, 0.0], [47.9, 0.0], [48.0, 0.0], [48.1, 0.0], [48.2, 0.0], [48.3, 0.0], [48.4, 0.0], [48.5, 0.0], [48.6, 0.0], [48.7, 0.0], [48.8, 0.0], [48.9, 0.0], [49.0, 0.0], [49.1, 0.0], [49.2, 0.0], [49.3, 0.0], [49.4, 0.0], [49.5, 0.0], [49.6, 0.0], [49.7, 0.0], [49.8, 0.0], [49.9, 0.0], [50.0, 0.0], [50.1, 0.0], [50.2, 0.0], [50.3, 0.0], [50.4, 0.0], [50.5, 0.0], [50.6, 0.0], [50.7, 0.0], [50.8, 0.0], [50.9, 0.0], [51.0, 0.0], [51.1, 0.0], [51.2, 0.0], [51.3, 0.0], [51.4, 0.0], [51.5, 0.0], [51.6, 0.0], [51.7, 0.0], [51.8, 0.0], [51.9, 0.0], [52.0, 0.0], [52.1, 0.0], [52.2, 0.0], [52.3, 0.0], [52.4, 0.0], [52.5, 0.0], [52.6, 0.0], [52.7, 0.0], [52.8, 0.0], [52.9, 0.0], [53.0, 0.0], [53.1, 0.0], [53.2, 0.0], [53.3, 0.0], [53.4, 0.0], [53.5, 0.0], [53.6, 0.0], [53.7, 0.0], [53.8, 0.0], [53.9, 0.0], [54.0, 0.0], [54.1, 0.0], [54.2, 0.0], [54.3, 0.0], [54.4, 0.0], [54.5, 0.0], [54.6, 0.0], [54.7, 0.0], [54.8, 0.0], [54.9, 0.0], [55.0, 0.0], [55.1, 0.0], [55.2, 0.0], [55.3, 0.0], [55.4, 0.0], [55.5, 0.0], [55.6, 0.0], [55.7, 0.0], [55.8, 0.0], [55.9, 0.0], [56.0, 0.0], [56.1, 0.0], [56.2, 0.0], [56.3, 0.0], [56.4, 0.0], [56.5, 0.0], [56.6, 0.0], [56.7, 0.0], [56.8, 0.0], [56.9, 0.0], [57.0, 0.0], [57.1, 0.0], [57.2, 0.0], [57.3, 0.0], [57.4, 0.0], [57.5, 0.0], [57.6, 0.0], [57.7, 0.0], [57.8, 0.0], [57.9, 0.0], [58.0, 0.0], [58.1, 0.0], [58.2, 0.0], [58.3, 0.0], [58.4, 0.0], [58.5, 0.0], [58.6, 0.0], [58.7, 0.0], [58.8, 0.0], [58.9, 0.0], [59.0, 0.0], [59.1, 0.0], [59.2, 0.0], [59.3, 0.0], [59.4, 0.0], [59.5, 0.0], [59.6, 0.0], [59.7, 0.0], [59.8, 0.0], [59.9, 0.0], [60.0, 0.0], [60.1, 0.0], [60.2, 0.0], [60.3, 0.0], [60.4, 0.0], [60.5, 0.0], [60.6, 0.0], [60.7, 0.0], [60.8, 0.0], [60.9, 0.0], [61.0, 0.0], [61.1, 0.0], [61.2, 0.0], [61.3, 0.0], [61.4, 0.0], [61.5, 0.0], [61.6, 0.0], [61.7, 0.0], [61.8, 0.0], [61.9, 0.0], [62.0, 0.0], [62.1, 0.0], [62.2, 0.0], [62.3, 0.0], [62.4, 0.0], [62.5, 0.0], [62.6, 0.0], [62.7, 0.0], [62.8, 0.0], [62.9, 0.0], [63.0, 0.0], [63.1, 0.0], [63.2, 0.0], [63.3, 0.0], [63.4, 0.0], [63.5, 0.0], [63.6, 0.0], [63.7, 0.0], [63.8, 0.0], [63.9, 0.0], [64.0, 0.0], [64.1, 0.0], [64.2, 0.0], [64.3, 0.0], [64.4, 0.0], [64.5, 0.0], [64.6, 0.0], [64.7, 0.0], [64.8, 0.0], [64.9, 0.0], [65.0, 0.0], [65.1, 0.0], [65.2, 0.0], [65.3, 0.0], [65.4, 0.0], [65.5, 0.0], [65.6, 0.0], [65.7, 0.0], [65.8, 0.0], [65.9, 0.0], [66.0, 0.0], [66.1, 0.0], [66.2, 0.0], [66.3, 0.0], [66.4, 0.0], [66.5, 0.0], [66.6, 0.0], [66.7, 0.0], [66.8, 0.0], [66.9, 0.0], [67.0, 0.0], [67.1, 0.0], [67.2, 0.0], [67.3, 0.0], [67.4, 0.0], [67.5, 0.0], [67.6, 0.0], [67.7, 0.0], [67.8, 0.0], [67.9, 0.0], [68.0, 0.0], [68.1, 0.0], [68.2, 0.0], [68.3, 0.0], [68.4, 0.0], [68.5, 0.0], [68.6, 0.0], [68.7, 0.0], [68.8, 0.0], [68.9, 0.0], [69.0, 0.0], [69.1, 0.0], [69.2, 0.0], [69.3, 0.0], [69.4, 0.0], [69.5, 0.0], [69.6, 0.0], [69.7, 0.0], [69.8, 0.0], [69.9, 0.0], [70.0, 0.0], [70.1, 0.0], [70.2, 0.0], [70.3, 0.0], [70.4, 0.0], [70.5, 0.0], [70.6, 0.0], [70.7, 0.0], [70.8, 0.0], [70.9, 0.0], [71.0, 0.0], [71.1, 0.0], [71.2, 0.0], [71.3, 0.0], [71.4, 0.0], [71.5, 0.0], [71.6, 0.0], [71.7, 0.0], [71.8, 0.0], [71.9, 0.0], [72.0, 0.0], [72.1, 0.0], [72.2, 0.0], [72.3, 0.0], [72.4, 0.0], [72.5, 0.0], [72.6, 0.0], [72.7, 0.0], [72.8, 0.0], [72.9, 0.0], [73.0, 0.0], [73.1, 0.0], [73.2, 0.0], [73.3, 0.0], [73.4, 0.0], [73.5, 0.0], [73.6, 0.0], [73.7, 0.0], [73.8, 0.0], [73.9, 0.0], [74.0, 0.0], [74.1, 0.0], [74.2, 0.0], [74.3, 0.0], [74.4, 0.0], [74.5, 0.0], [74.6, 0.0], [74.7, 0.0], [74.8, 0.0], [74.9, 0.0], [75.0, 0.0], [75.1, 0.0], [75.2, 0.0], [75.3, 0.0], [75.4, 0.0], [75.5, 0.0], [75.6, 0.0], [75.7, 0.0], [75.8, 0.0], [75.9, 0.0], [76.0, 0.0], [76.1, 0.0], [76.2, 0.0], [76.3, 0.0], [76.4, 0.0], [76.5, 0.0], [76.6, 0.0], [76.7, 0.0], [76.8, 0.0], [76.9, 0.0], [77.0, 0.0], [77.1, 0.0], [77.2, 0.0], [77.3, 0.0], [77.4, 0.0], [77.5, 0.0], [77.6, 0.0], [77.7, 0.0], [77.8, 0.0], [77.9, 0.0], [78.0, 0.0], [78.1, 0.0], [78.2, 0.0], [78.3, 0.0], [78.4, 0.0], [78.5, 0.0], [78.6, 0.0], [78.7, 0.0], [78.8, 0.0], [78.9, 0.0], [79.0, 0.0], [79.1, 0.0], [79.2, 0.0], [79.3, 0.0], [79.4, 0.0], [79.5, 0.0], [79.6, 0.0], [79.7, 0.0], [79.8, 0.0], [79.9, 0.0], [80.0, 0.0], [80.1, 0.0], [80.2, 0.0], [80.3, 0.0], [80.4, 0.0], [80.5, 0.0], [80.6, 0.0], [80.7, 0.0], [80.8, 0.0], [80.9, 0.0], [81.0, 0.0], [81.1, 0.0], [81.2, 0.0], [81.3, 0.0], [81.4, 0.0], [81.5, 0.0], [81.6, 0.0], [81.7, 0.0], [81.8, 0.0], [81.9, 0.0], [82.0, 0.0], [82.1, 0.0], [82.2, 0.0], [82.3, 0.0], [82.4, 0.0], [82.5, 0.0], [82.6, 0.0], [82.7, 0.0], [82.8, 0.0], [82.9, 0.0], [83.0, 0.0], [83.1, 0.0], [83.2, 0.0], [83.3, 0.0], [83.4, 0.0], [83.5, 0.0], [83.6, 0.0], [83.7, 0.0], [83.8, 0.0], [83.9, 0.0], [84.0, 0.0], [84.1, 0.0], [84.2, 0.0], [84.3, 0.0], [84.4, 0.0], [84.5, 0.0], [84.6, 0.0], [84.7, 0.0], [84.8, 0.0], [84.9, 0.0], [85.0, 0.0], [85.1, 0.0], [85.2, 0.0], [85.3, 0.0], [85.4, 0.0], [85.5, 0.0], [85.6, 0.0], [85.7, 0.0], [85.8, 0.0], [85.9, 0.0], [86.0, 0.0], [86.1, 0.0], [86.2, 0.0], [86.3, 0.0], [86.4, 0.0], [86.5, 0.0], [86.6, 0.0], [86.7, 0.0], [86.8, 0.0], [86.9, 0.0], [87.0, 0.0], [87.1, 0.0], [87.2, 0.0], [87.3, 0.0], [87.4, 0.0], [87.5, 0.0], [87.6, 0.0], [87.7, 0.0], [87.8, 0.0], [87.9, 0.0], [88.0, 0.0], [88.1, 0.0], [88.2, 0.0], [88.3, 0.0], [88.4, 0.0], [88.5, 0.0], [88.6, 0.0], [88.7, 0.0], [88.8, 0.0], [88.9, 0.0], [89.0, 0.0], [89.1, 0.0], [89.2, 0.0], [89.3, 0.0], [89.4, 0.0], [89.5, 0.0], [89.6, 0.0], [89.7, 0.0], [89.8, 0.0], [89.9, 0.0], [90.0, 0.0], [90.1, 0.0], [90.2, 0.0], [90.3, 0.0], [90.4, 0.0], [90.5, 0.0], [90.6, 0.0], [90.7, 0.0], [90.8, 0.0], [90.9, 0.0], [91.0, 0.0], [91.1, 0.0], [91.2, 0.0], [91.3, 0.0], [91.4, 0.0], [91.5, 0.0], [91.6, 0.0], [91.7, 0.0], [91.8, 0.0], [91.9, 0.0], [92.0, 0.0], [92.1, 0.0], [92.2, 0.0], [92.3, 0.0], [92.4, 0.0], [92.5, 0.0], [92.6, 0.0], [92.7, 0.0], [92.8, 0.0], [92.9, 0.0], [93.0, 0.0], [93.1, 0.0], [93.2, 0.0], [93.3, 0.0], [93.4, 0.0], [93.5, 0.0], [93.6, 0.0], [93.7, 0.0], [93.8, 0.0], [93.9, 0.0], [94.0, 0.0], [94.1, 0.0], [94.2, 0.0], [94.3, 0.0], [94.4, 0.0], [94.5, 0.0], [94.6, 0.0], [94.7, 0.0], [94.8, 0.0], [94.9, 0.0], [95.0, 0.0], [95.1, 0.0], [95.2, 0.0], [95.3, 0.0], [95.4, 0.0], [95.5, 0.0], [95.6, 0.0], [95.7, 0.0], [95.8, 0.0], [95.9, 0.0], [96.0, 0.0], [96.1, 0.0], [96.2, 0.0], [96.3, 0.0], [96.4, 0.0], [96.5, 0.0], [96.6, 0.0], [96.7, 0.0], [96.8, 0.0], [96.9, 0.0], [97.0, 0.0], [97.1, 0.0], [97.2, 0.0], [97.3, 0.0], [97.4, 0.0], [97.5, 0.0], [97.6, 0.0], [97.7, 0.0], [97.8, 0.0], [97.9, 0.0], [98.0, 0.0], [98.1, 0.0], [98.2, 0.0], [98.3, 0.0], [98.4, 0.0], [98.5, 0.0], [98.6, 0.0], [98.7, 1.0], [98.8, 1.0], [98.9, 1.0], [99.0, 1.0], [99.1, 1.0], [99.2, 1.0], [99.3, 1.0], [99.4, 1.0], [99.5, 1.0], [99.6, 1.0], [99.7, 1.0], [99.8, 1.0], [99.9, 95.0]], "isOverall": false, "label": "AMQP Publisher", "isController": false}, {"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 6.0], [0.3, 14.0], [0.4, 25.0], [0.5, 32.0], [0.6, 41.0], [0.7, 51.0], [0.8, 59.0], [0.9, 65.0], [1.0, 71.0], [1.1, 79.0], [1.2, 89.0], [1.3, 98.0], [1.4, 107.0], [1.5, 117.0], [1.6, 122.0], [1.7, 125.0], [1.8, 128.0], [1.9, 131.0], [2.0, 133.0], [2.1, 135.0], [2.2, 137.0], [2.3, 138.0], [2.4, 139.0], [2.5, 141.0], [2.6, 142.0], [2.7, 143.0], [2.8, 144.0], [2.9, 145.0], [3.0, 146.0], [3.1, 146.0], [3.2, 147.0], [3.3, 148.0], [3.4, 149.0], [3.5, 150.0], [3.6, 150.0], [3.7, 151.0], [3.8, 151.0], [3.9, 152.0], [4.0, 153.0], [4.1, 153.0], [4.2, 154.0], [4.3, 154.0], [4.4, 154.0], [4.5, 155.0], [4.6, 155.0], [4.7, 156.0], [4.8, 156.0], [4.9, 156.0], [5.0, 157.0], [5.1, 157.0], [5.2, 157.0], [5.3, 158.0], [5.4, 158.0], [5.5, 158.0], [5.6, 159.0], [5.7, 159.0], [5.8, 159.0], [5.9, 159.0], [6.0, 160.0], [6.1, 160.0], [6.2, 160.0], [6.3, 160.0], [6.4, 161.0], [6.5, 161.0], [6.6, 161.0], [6.7, 161.0], [6.8, 161.0], [6.9, 162.0], [7.0, 162.0], [7.1, 162.0], [7.2, 162.0], [7.3, 162.0], [7.4, 163.0], [7.5, 163.0], [7.6, 163.0], [7.7, 163.0], [7.8, 163.0], [7.9, 163.0], [8.0, 164.0], [8.1, 164.0], [8.2, 164.0], [8.3, 164.0], [8.4, 164.0], [8.5, 164.0], [8.6, 164.0], [8.7, 165.0], [8.8, 165.0], [8.9, 165.0], [9.0, 165.0], [9.1, 165.0], [9.2, 165.0], [9.3, 165.0], [9.4, 166.0], [9.5, 166.0], [9.6, 166.0], [9.7, 166.0], [9.8, 166.0], [9.9, 166.0], [10.0, 166.0], [10.1, 166.0], [10.2, 167.0], [10.3, 167.0], [10.4, 167.0], [10.5, 167.0], [10.6, 167.0], [10.7, 167.0], [10.8, 167.0], [10.9, 167.0], [11.0, 167.0], [11.1, 167.0], [11.2, 168.0], [11.3, 168.0], [11.4, 168.0], [11.5, 168.0], [11.6, 168.0], [11.7, 168.0], [11.8, 168.0], [11.9, 168.0], [12.0, 168.0], [12.1, 168.0], [12.2, 169.0], [12.3, 169.0], [12.4, 169.0], [12.5, 169.0], [12.6, 169.0], [12.7, 169.0], [12.8, 169.0], [12.9, 169.0], [13.0, 169.0], [13.1, 169.0], [13.2, 169.0], [13.3, 169.0], [13.4, 170.0], [13.5, 170.0], [13.6, 170.0], [13.7, 170.0], [13.8, 170.0], [13.9, 170.0], [14.0, 170.0], [14.1, 170.0], [14.2, 170.0], [14.3, 170.0], [14.4, 170.0], [14.5, 170.0], [14.6, 170.0], [14.7, 170.0], [14.8, 171.0], [14.9, 171.0], [15.0, 171.0], [15.1, 171.0], [15.2, 171.0], [15.3, 171.0], [15.4, 171.0], [15.5, 171.0], [15.6, 171.0], [15.7, 171.0], [15.8, 171.0], [15.9, 171.0], [16.0, 171.0], [16.1, 171.0], [16.2, 171.0], [16.3, 172.0], [16.4, 172.0], [16.5, 172.0], [16.6, 172.0], [16.7, 172.0], [16.8, 172.0], [16.9, 172.0], [17.0, 172.0], [17.1, 172.0], [17.2, 172.0], [17.3, 172.0], [17.4, 172.0], [17.5, 172.0], [17.6, 172.0], [17.7, 172.0], [17.8, 172.0], [17.9, 172.0], [18.0, 173.0], [18.1, 173.0], [18.2, 173.0], [18.3, 173.0], [18.4, 173.0], [18.5, 173.0], [18.6, 173.0], [18.7, 173.0], [18.8, 173.0], [18.9, 173.0], [19.0, 173.0], [19.1, 173.0], [19.2, 173.0], [19.3, 173.0], [19.4, 173.0], [19.5, 173.0], [19.6, 173.0], [19.7, 173.0], [19.8, 174.0], [19.9, 174.0], [20.0, 174.0], [20.1, 174.0], [20.2, 174.0], [20.3, 174.0], [20.4, 174.0], [20.5, 174.0], [20.6, 174.0], [20.7, 174.0], [20.8, 174.0], [20.9, 174.0], [21.0, 174.0], [21.1, 174.0], [21.2, 174.0], [21.3, 174.0], [21.4, 174.0], [21.5, 174.0], [21.6, 174.0], [21.7, 175.0], [21.8, 175.0], [21.9, 175.0], [22.0, 175.0], [22.1, 175.0], [22.2, 175.0], [22.3, 175.0], [22.4, 175.0], [22.5, 175.0], [22.6, 175.0], [22.7, 175.0], [22.8, 175.0], [22.9, 175.0], [23.0, 175.0], [23.1, 175.0], [23.2, 175.0], [23.3, 175.0], [23.4, 175.0], [23.5, 175.0], [23.6, 175.0], [23.7, 176.0], [23.8, 176.0], [23.9, 176.0], [24.0, 176.0], [24.1, 176.0], [24.2, 176.0], [24.3, 176.0], [24.4, 176.0], [24.5, 176.0], [24.6, 176.0], [24.7, 176.0], [24.8, 176.0], [24.9, 176.0], [25.0, 176.0], [25.1, 176.0], [25.2, 176.0], [25.3, 176.0], [25.4, 176.0], [25.5, 176.0], [25.6, 176.0], [25.7, 177.0], [25.8, 177.0], [25.9, 177.0], [26.0, 177.0], [26.1, 177.0], [26.2, 177.0], [26.3, 177.0], [26.4, 177.0], [26.5, 177.0], [26.6, 177.0], [26.7, 177.0], [26.8, 177.0], [26.9, 177.0], [27.0, 177.0], [27.1, 177.0], [27.2, 177.0], [27.3, 177.0], [27.4, 177.0], [27.5, 177.0], [27.6, 177.0], [27.7, 177.0], [27.8, 178.0], [27.9, 178.0], [28.0, 178.0], [28.1, 178.0], [28.2, 178.0], [28.3, 178.0], [28.4, 178.0], [28.5, 178.0], [28.6, 178.0], [28.7, 178.0], [28.8, 178.0], [28.9, 178.0], [29.0, 178.0], [29.1, 178.0], [29.2, 178.0], [29.3, 178.0], [29.4, 178.0], [29.5, 178.0], [29.6, 178.0], [29.7, 178.0], [29.8, 178.0], [29.9, 178.0], [30.0, 178.0], [30.1, 179.0], [30.2, 179.0], [30.3, 179.0], [30.4, 179.0], [30.5, 179.0], [30.6, 179.0], [30.7, 179.0], [30.8, 179.0], [30.9, 179.0], [31.0, 179.0], [31.1, 179.0], [31.2, 179.0], [31.3, 179.0], [31.4, 179.0], [31.5, 179.0], [31.6, 179.0], [31.7, 179.0], [31.8, 179.0], [31.9, 179.0], [32.0, 179.0], [32.1, 179.0], [32.2, 179.0], [32.3, 179.0], [32.4, 180.0], [32.5, 180.0], [32.6, 180.0], [32.7, 180.0], [32.8, 180.0], [32.9, 180.0], [33.0, 180.0], [33.1, 180.0], [33.2, 180.0], [33.3, 180.0], [33.4, 180.0], [33.5, 180.0], [33.6, 180.0], [33.7, 180.0], [33.8, 180.0], [33.9, 180.0], [34.0, 180.0], [34.1, 180.0], [34.2, 180.0], [34.3, 180.0], [34.4, 180.0], [34.5, 180.0], [34.6, 180.0], [34.7, 180.0], [34.8, 181.0], [34.9, 181.0], [35.0, 181.0], [35.1, 181.0], [35.2, 181.0], [35.3, 181.0], [35.4, 181.0], [35.5, 181.0], [35.6, 181.0], [35.7, 181.0], [35.8, 181.0], [35.9, 181.0], [36.0, 181.0], [36.1, 181.0], [36.2, 181.0], [36.3, 181.0], [36.4, 181.0], [36.5, 181.0], [36.6, 181.0], [36.7, 181.0], [36.8, 181.0], [36.9, 181.0], [37.0, 181.0], [37.1, 181.0], [37.2, 181.0], [37.3, 182.0], [37.4, 182.0], [37.5, 182.0], [37.6, 182.0], [37.7, 182.0], [37.8, 182.0], [37.9, 182.0], [38.0, 182.0], [38.1, 182.0], [38.2, 182.0], [38.3, 182.0], [38.4, 182.0], [38.5, 182.0], [38.6, 182.0], [38.7, 182.0], [38.8, 182.0], [38.9, 182.0], [39.0, 182.0], [39.1, 182.0], [39.2, 182.0], [39.3, 182.0], [39.4, 182.0], [39.5, 182.0], [39.6, 182.0], [39.7, 182.0], [39.8, 183.0], [39.9, 183.0], [40.0, 183.0], [40.1, 183.0], [40.2, 183.0], [40.3, 183.0], [40.4, 183.0], [40.5, 183.0], [40.6, 183.0], [40.7, 183.0], [40.8, 183.0], [40.9, 183.0], [41.0, 183.0], [41.1, 183.0], [41.2, 183.0], [41.3, 183.0], [41.4, 183.0], [41.5, 183.0], [41.6, 183.0], [41.7, 183.0], [41.8, 183.0], [41.9, 183.0], [42.0, 183.0], [42.1, 183.0], [42.2, 183.0], [42.3, 184.0], [42.4, 184.0], [42.5, 184.0], [42.6, 184.0], [42.7, 184.0], [42.8, 184.0], [42.9, 184.0], [43.0, 184.0], [43.1, 184.0], [43.2, 184.0], [43.3, 184.0], [43.4, 184.0], [43.5, 184.0], [43.6, 184.0], [43.7, 184.0], [43.8, 184.0], [43.9, 184.0], [44.0, 184.0], [44.1, 184.0], [44.2, 184.0], [44.3, 184.0], [44.4, 184.0], [44.5, 184.0], [44.6, 184.0], [44.7, 184.0], [44.8, 185.0], [44.9, 185.0], [45.0, 185.0], [45.1, 185.0], [45.2, 185.0], [45.3, 185.0], [45.4, 185.0], [45.5, 185.0], [45.6, 185.0], [45.7, 185.0], [45.8, 185.0], [45.9, 185.0], [46.0, 185.0], [46.1, 185.0], [46.2, 185.0], [46.3, 185.0], [46.4, 185.0], [46.5, 185.0], [46.6, 185.0], [46.7, 185.0], [46.8, 185.0], [46.9, 185.0], [47.0, 185.0], [47.1, 185.0], [47.2, 185.0], [47.3, 186.0], [47.4, 186.0], [47.5, 186.0], [47.6, 186.0], [47.7, 186.0], [47.8, 186.0], [47.9, 186.0], [48.0, 186.0], [48.1, 186.0], [48.2, 186.0], [48.3, 186.0], [48.4, 186.0], [48.5, 186.0], [48.6, 186.0], [48.7, 186.0], [48.8, 186.0], [48.9, 186.0], [49.0, 186.0], [49.1, 186.0], [49.2, 186.0], [49.3, 186.0], [49.4, 186.0], [49.5, 186.0], [49.6, 186.0], [49.7, 186.0], [49.8, 187.0], [49.9, 187.0], [50.0, 187.0], [50.1, 187.0], [50.2, 187.0], [50.3, 187.0], [50.4, 187.0], [50.5, 187.0], [50.6, 187.0], [50.7, 187.0], [50.8, 187.0], [50.9, 187.0], [51.0, 187.0], [51.1, 187.0], [51.2, 187.0], [51.3, 187.0], [51.4, 187.0], [51.5, 187.0], [51.6, 187.0], [51.7, 187.0], [51.8, 187.0], [51.9, 187.0], [52.0, 187.0], [52.1, 187.0], [52.2, 188.0], [52.3, 188.0], [52.4, 188.0], [52.5, 188.0], [52.6, 188.0], [52.7, 188.0], [52.8, 188.0], [52.9, 188.0], [53.0, 188.0], [53.1, 188.0], [53.2, 188.0], [53.3, 188.0], [53.4, 188.0], [53.5, 188.0], [53.6, 188.0], [53.7, 188.0], [53.8, 188.0], [53.9, 188.0], [54.0, 188.0], [54.1, 188.0], [54.2, 188.0], [54.3, 188.0], [54.4, 188.0], [54.5, 188.0], [54.6, 189.0], [54.7, 189.0], [54.8, 189.0], [54.9, 189.0], [55.0, 189.0], [55.1, 189.0], [55.2, 189.0], [55.3, 189.0], [55.4, 189.0], [55.5, 189.0], [55.6, 189.0], [55.7, 189.0], [55.8, 189.0], [55.9, 189.0], [56.0, 189.0], [56.1, 189.0], [56.2, 189.0], [56.3, 189.0], [56.4, 189.0], [56.5, 189.0], [56.6, 189.0], [56.7, 189.0], [56.8, 189.0], [56.9, 189.0], [57.0, 190.0], [57.1, 190.0], [57.2, 190.0], [57.3, 190.0], [57.4, 190.0], [57.5, 190.0], [57.6, 190.0], [57.7, 190.0], [57.8, 190.0], [57.9, 190.0], [58.0, 190.0], [58.1, 190.0], [58.2, 190.0], [58.3, 190.0], [58.4, 190.0], [58.5, 190.0], [58.6, 190.0], [58.7, 190.0], [58.8, 190.0], [58.9, 190.0], [59.0, 190.0], [59.1, 190.0], [59.2, 190.0], [59.3, 191.0], [59.4, 191.0], [59.5, 191.0], [59.6, 191.0], [59.7, 191.0], [59.8, 191.0], [59.9, 191.0], [60.0, 191.0], [60.1, 191.0], [60.2, 191.0], [60.3, 191.0], [60.4, 191.0], [60.5, 191.0], [60.6, 191.0], [60.7, 191.0], [60.8, 191.0], [60.9, 191.0], [61.0, 191.0], [61.1, 191.0], [61.2, 191.0], [61.3, 191.0], [61.4, 191.0], [61.5, 191.0], [61.6, 192.0], [61.7, 192.0], [61.8, 192.0], [61.9, 192.0], [62.0, 192.0], [62.1, 192.0], [62.2, 192.0], [62.3, 192.0], [62.4, 192.0], [62.5, 192.0], [62.6, 192.0], [62.7, 192.0], [62.8, 192.0], [62.9, 192.0], [63.0, 192.0], [63.1, 192.0], [63.2, 192.0], [63.3, 192.0], [63.4, 192.0], [63.5, 192.0], [63.6, 192.0], [63.7, 192.0], [63.8, 192.0], [63.9, 193.0], [64.0, 193.0], [64.1, 193.0], [64.2, 193.0], [64.3, 193.0], [64.4, 193.0], [64.5, 193.0], [64.6, 193.0], [64.7, 193.0], [64.8, 193.0], [64.9, 193.0], [65.0, 193.0], [65.1, 193.0], [65.2, 193.0], [65.3, 193.0], [65.4, 193.0], [65.5, 193.0], [65.6, 193.0], [65.7, 193.0], [65.8, 193.0], [65.9, 193.0], [66.0, 193.0], [66.1, 194.0], [66.2, 194.0], [66.3, 194.0], [66.4, 194.0], [66.5, 194.0], [66.6, 194.0], [66.7, 194.0], [66.8, 194.0], [66.9, 194.0], [67.0, 194.0], [67.1, 194.0], [67.2, 194.0], [67.3, 194.0], [67.4, 194.0], [67.5, 194.0], [67.6, 194.0], [67.7, 194.0], [67.8, 194.0], [67.9, 194.0], [68.0, 194.0], [68.1, 194.0], [68.2, 195.0], [68.3, 195.0], [68.4, 195.0], [68.5, 195.0], [68.6, 195.0], [68.7, 195.0], [68.8, 195.0], [68.9, 195.0], [69.0, 195.0], [69.1, 195.0], [69.2, 195.0], [69.3, 195.0], [69.4, 195.0], [69.5, 195.0], [69.6, 195.0], [69.7, 195.0], [69.8, 195.0], [69.9, 195.0], [70.0, 195.0], [70.1, 195.0], [70.2, 195.0], [70.3, 196.0], [70.4, 196.0], [70.5, 196.0], [70.6, 196.0], [70.7, 196.0], [70.8, 196.0], [70.9, 196.0], [71.0, 196.0], [71.1, 196.0], [71.2, 196.0], [71.3, 196.0], [71.4, 196.0], [71.5, 196.0], [71.6, 196.0], [71.7, 196.0], [71.8, 196.0], [71.9, 196.0], [72.0, 196.0], [72.1, 196.0], [72.2, 197.0], [72.3, 197.0], [72.4, 197.0], [72.5, 197.0], [72.6, 197.0], [72.7, 197.0], [72.8, 197.0], [72.9, 197.0], [73.0, 197.0], [73.1, 197.0], [73.2, 197.0], [73.3, 197.0], [73.4, 197.0], [73.5, 197.0], [73.6, 197.0], [73.7, 197.0], [73.8, 197.0], [73.9, 197.0], [74.0, 198.0], [74.1, 198.0], [74.2, 198.0], [74.3, 198.0], [74.4, 198.0], [74.5, 198.0], [74.6, 198.0], [74.7, 198.0], [74.8, 198.0], [74.9, 198.0], [75.0, 198.0], [75.1, 198.0], [75.2, 198.0], [75.3, 198.0], [75.4, 198.0], [75.5, 198.0], [75.6, 198.0], [75.7, 199.0], [75.8, 199.0], [75.9, 199.0], [76.0, 199.0], [76.1, 199.0], [76.2, 199.0], [76.3, 199.0], [76.4, 199.0], [76.5, 199.0], [76.6, 199.0], [76.7, 199.0], [76.8, 199.0], [76.9, 199.0], [77.0, 199.0], [77.1, 199.0], [77.2, 199.0], [77.3, 199.0], [77.4, 200.0], [77.5, 200.0], [77.6, 200.0], [77.7, 200.0], [77.8, 200.0], [77.9, 200.0], [78.0, 200.0], [78.1, 200.0], [78.2, 200.0], [78.3, 200.0], [78.4, 200.0], [78.5, 200.0], [78.6, 200.0], [78.7, 200.0], [78.8, 200.0], [78.9, 201.0], [79.0, 201.0], [79.1, 201.0], [79.2, 201.0], [79.3, 201.0], [79.4, 201.0], [79.5, 201.0], [79.6, 201.0], [79.7, 201.0], [79.8, 201.0], [79.9, 201.0], [80.0, 201.0], [80.1, 201.0], [80.2, 201.0], [80.3, 202.0], [80.4, 202.0], [80.5, 202.0], [80.6, 202.0], [80.7, 202.0], [80.8, 202.0], [80.9, 202.0], [81.0, 202.0], [81.1, 202.0], [81.2, 202.0], [81.3, 202.0], [81.4, 202.0], [81.5, 202.0], [81.6, 203.0], [81.7, 203.0], [81.8, 203.0], [81.9, 203.0], [82.0, 203.0], [82.1, 203.0], [82.2, 203.0], [82.3, 203.0], [82.4, 203.0], [82.5, 203.0], [82.6, 203.0], [82.7, 203.0], [82.8, 203.0], [82.9, 204.0], [83.0, 204.0], [83.1, 204.0], [83.2, 204.0], [83.3, 204.0], [83.4, 204.0], [83.5, 204.0], [83.6, 204.0], [83.7, 204.0], [83.8, 204.0], [83.9, 204.0], [84.0, 204.0], [84.1, 205.0], [84.2, 205.0], [84.3, 205.0], [84.4, 205.0], [84.5, 205.0], [84.6, 205.0], [84.7, 205.0], [84.8, 205.0], [84.9, 205.0], [85.0, 205.0], [85.1, 205.0], [85.2, 206.0], [85.3, 206.0], [85.4, 206.0], [85.5, 206.0], [85.6, 206.0], [85.7, 206.0], [85.8, 206.0], [85.9, 206.0], [86.0, 206.0], [86.1, 206.0], [86.2, 206.0], [86.3, 207.0], [86.4, 207.0], [86.5, 207.0], [86.6, 207.0], [86.7, 207.0], [86.8, 207.0], [86.9, 207.0], [87.0, 207.0], [87.1, 207.0], [87.2, 208.0], [87.3, 208.0], [87.4, 208.0], [87.5, 208.0], [87.6, 208.0], [87.7, 208.0], [87.8, 208.0], [87.9, 208.0], [88.0, 208.0], [88.1, 209.0], [88.2, 209.0], [88.3, 209.0], [88.4, 209.0], [88.5, 209.0], [88.6, 209.0], [88.7, 209.0], [88.8, 209.0], [88.9, 210.0], [89.0, 210.0], [89.1, 210.0], [89.2, 210.0], [89.3, 210.0], [89.4, 210.0], [89.5, 210.0], [89.6, 211.0], [89.7, 211.0], [89.8, 211.0], [89.9, 211.0], [90.0, 211.0], [90.1, 211.0], [90.2, 212.0], [90.3, 212.0], [90.4, 212.0], [90.5, 212.0], [90.6, 212.0], [90.7, 212.0], [90.8, 213.0], [90.9, 213.0], [91.0, 213.0], [91.1, 213.0], [91.2, 213.0], [91.3, 213.0], [91.4, 214.0], [91.5, 214.0], [91.6, 214.0], [91.7, 214.0], [91.8, 214.0], [91.9, 214.0], [92.0, 215.0], [92.1, 215.0], [92.2, 215.0], [92.3, 215.0], [92.4, 215.0], [92.5, 216.0], [92.6, 216.0], [92.7, 216.0], [92.8, 216.0], [92.9, 217.0], [93.0, 217.0], [93.1, 217.0], [93.2, 217.0], [93.3, 217.0], [93.4, 218.0], [93.5, 218.0], [93.6, 218.0], [93.7, 218.0], [93.8, 219.0], [93.9, 219.0], [94.0, 219.0], [94.1, 219.0], [94.2, 220.0], [94.3, 220.0], [94.4, 220.0], [94.5, 220.0], [94.6, 221.0], [94.7, 221.0], [94.8, 221.0], [94.9, 222.0], [95.0, 222.0], [95.1, 222.0], [95.2, 223.0], [95.3, 223.0], [95.4, 223.0], [95.5, 224.0], [95.6, 224.0], [95.7, 224.0], [95.8, 225.0], [95.9, 225.0], [96.0, 225.0], [96.1, 226.0], [96.2, 226.0], [96.3, 226.0], [96.4, 227.0], [96.5, 227.0], [96.6, 228.0], [96.7, 228.0], [96.8, 229.0], [96.9, 229.0], [97.0, 230.0], [97.1, 230.0], [97.2, 231.0], [97.3, 231.0], [97.4, 232.0], [97.5, 232.0], [97.6, 233.0], [97.7, 234.0], [97.8, 234.0], [97.9, 235.0], [98.0, 236.0], [98.1, 237.0], [98.2, 238.0], [98.3, 239.0], [98.4, 240.0], [98.5, 241.0], [98.6, 242.0], [98.7, 243.0], [98.8, 244.0], [98.9, 246.0], [99.0, 247.0], [99.1, 249.0], [99.2, 251.0], [99.3, 253.0], [99.4, 256.0], [99.5, 258.0], [99.6, 261.0], [99.7, 266.0], [99.8, 276.0], [99.9, 288.0]], "isOverall": false, "label": "AMQP Consumer", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 35.0, "minX": 0.0, "maxY": 1562128.0, "series": [{"data": [[0.0, 1562128.0], [100.0, 1365.0], [200.0, 35.0]], "isOverall": false, "label": "AMQP Publisher", "isController": false}, {"data": [[0.0, 20534.0], [300.0, 551.0], [100.0, 1183584.0], [200.0, 352650.0], [400.0, 337.0]], "isOverall": false, "label": "AMQP Consumer", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3121184.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3121184.0, "series": [{"data": [[0.0, 3121184.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 4.9E-324, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 52.37150198990958, "minX": 1.74715296E12, "maxY": 501.7080310415572, "series": [{"data": [[1.74715326E12, 501.7080310415572], [1.74715308E12, 500.74179767359027], [1.7471532E12, 500.8380474069545], [1.74715302E12, 481.59760209080446], [1.74715314E12, 500.2457517001254], [1.74715296E12, 52.37150198990958]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74715326E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 10.0, "maxY": 332.60526315789474, "series": [{"data": [[10.0, 2.0], [11.0, 0.39999999999999997], [12.0, 0.36363636363636365], [13.0, 0.21428571428571427], [14.0, 0.39999999999999997], [15.0, 0.17391304347826086], [16.0, 0.19047619047619052], [17.0, 0.19999999999999998], [18.0, 0.10000000000000002], [19.0, 0.125], [20.0, 0.23809523809523808], [21.0, 0.20833333333333331], [22.0, 0.12195121951219515], [23.0, 0.07692307692307693], [24.0, 0.15555555555555559], [25.0, 0.13636363636363635], [26.0, 0.06122448979591838], [27.0, 0.11290322580645162], [28.0, 0.08888888888888889], [29.0, 0.08196721311475413], [30.0, 0.12903225806451613], [31.0, 0.3571428571428571], [32.0, 0.08064516129032259], [33.0, 0.14893617021276598], [34.0, 0.08620689655172414], [35.0, 0.09375], [36.0, 0.13636363636363638], [37.0, 0.08695652173913047], [38.0, 0.16666666666666674], [39.0, 0.16071428571428575], [40.0, 0.08108108108108109], [41.0, 0.04761904761904763], [42.0, 0.08421052631578949], [43.0, 0.07777777777777778], [44.0, 0.0], [45.0, 0.030927835051546386], [46.0, 0.025974025974025976], [47.0, 0.07142857142857142], [48.0, 0.05333333333333336], [49.0, 0.04054054054054054], [50.0, 0.06249999999999998], [51.0, 0.05042016806722689], [52.0, 0.09756097560975613], [53.0, 0.06896551724137931], [54.0, 0.04724409448818898], [55.0, 0.021052631578947375], [56.0, 0.08749999999999998], [57.0, 0.05172413793103449], [58.0, 0.02083333333333334], [59.0, 0.061946902654867235], [60.0, 0.08653846153846154], [61.0, 0.07692307692307691], [62.0, 0.06542056074766354], [63.0, 0.042372881355932195], [64.0, 0.06862745098039215], [65.0, 0.3055555555555557], [66.0, 0.0], [67.0, 0.0], [68.0, 0.060606060606060594], [69.0, 0.03749999999999999], [70.0, 0.0673076923076923], [71.0, 0.039999999999999994], [72.0, 0.06542056074766354], [73.0, 0.08247422680412372], [74.0, 0.05825242718446602], [75.0, 0.02912621359223301], [76.0, 0.05309734513274337], [77.0, 0.03645833333333333], [78.0, 0.07079646017699115], [79.0, 0.04729729729729731], [80.0, 0.04], [81.0, 0.06862745098039216], [82.0, 0.056603773584905676], [83.0, 0.06603773584905663], [84.0, 0.09375000000000004], [85.0, 0.047619047619047616], [86.0, 0.041666666666666685], [87.0, 0.03773584905660377], [88.0, 0.0410958904109589], [89.0, 0.02958579881656805], [90.0, 0.03508771929824562], [91.0, 0.08108108108108109], [92.0, 0.03125], [93.0, 0.043750000000000004], [94.0, 0.04477611940298508], [95.0, 0.04455445544554456], [96.0, 0.026785714285714295], [97.0, 0.03286384976525823], [98.0, 0.03608247422680412], [99.0, 0.028], [100.0, 0.03181818181818182], [101.0, 0.024896265560165973], [102.0, 0.03383458646616542], [103.0, 0.03347280334728033], [104.0, 0.02564102564102565], [105.0, 0.02764976958525345], [106.0, 0.024752475247524764], [107.0, 0.049999999999999996], [110.0, 1.37037037037037], [111.0, 0.018927444794952685], [112.0, 0.021660649819494594], [113.0, 0.027450980392156883], [114.0, 0.16923076923076932], [115.0, 0.044025157232704386], [116.0, 0.06250000000000001], [117.0, 0.039215686274509796], [118.0, 0.018867924528301896], [119.0, 0.024316109422492405], [120.0, 0.013245033112582775], [121.0, 0.03260869565217392], [126.0, 0.25592417061611394], [127.0, 0.028089887640449444], [128.0, 0.03686635944700459], [129.0, 0.023255813953488372], [132.0, 0.21249999999999994], [133.0, 0.027450980392156883], [134.0, 0.01851851851851853], [135.0, 0.028571428571428574], [136.0, 0.04069767441860466], [137.0, 0.019417475728155335], [138.0, 0.01984126984126984], [142.0, 0.19417475728155348], [143.0, 0.025806451612903233], [144.0, 0.01842105263157895], [145.0, 0.012820512820512822], [152.0, 1.0133333333333334], [153.0, 2.111111111111111], [154.0, 0.18181818181818182], [155.0, 0.0], [156.0, 0.04060913705583757], [157.0, 0.013824884792626724], [165.0, 0.8282828282828285], [166.0, 0.009174311926605496], [167.0, 0.013986013986013991], [174.0, 0.265454545454546], [175.0, 0.01673640167364016], [194.0, 0.8482142857142858], [195.0, 0.020348837209302327], [207.0, 0.6759776536312856], [208.0, 0.016528925619834715], [219.0, 0.22745901639344285], [220.0, 0.0125], [233.0, 0.3082191780821922], [234.0, 0.025974025974025976], [243.0, 0.4163090128755364], [244.0, 0.007874015748031494], [250.0, 0.17486338797814197], [251.0, 0.020270270270270282], [266.0, 3.102040816326531], [267.0, 0.018348623853211014], [268.0, 0.021276595744680847], [269.0, 0.03105590062111802], [276.0, 0.17857142857142838], [277.0, 0.008130081300813009], [289.0, 0.269473684210527], [290.0, 0.010638297872340429], [299.0, 0.2466487935656835], [300.0, 0.015384615384615387], [311.0, 0.7586206896551727], [312.0, 0.012698412698412691], [323.0, 0.38940809968847395], [324.0, 0.0], [325.0, 0.0], [326.0, 0.031578947368421054], [332.0, 1.810810810810811], [333.0, 0.010443864229765011], [334.0, 0.013513513513513516], [350.0, 0.6720647773279353], [351.0, 0.009316770186335397], [359.0, 0.21409214092140916], [360.0, 0.008849557522123895], [368.0, 0.8404255319148942], [369.0, 0.011876484560570064], [386.0, 0.8775510204081626], [387.0, 0.011594202898550718], [396.0, 0.5443786982248517], [397.0, 0.015], [414.0, 0.3160813308687611], [421.0, 5.384615384615384], [422.0, 0.014925373134328356], [423.0, 0.020833333333333336], [431.0, 0.3603603603603606], [432.0, 0.009404388714733536], [446.0, 1.213675213675213], [447.0, 0.011086474501108648], [464.0, 1.2071428571428584], [465.0, 0.010666666666666661], [470.0, 0.13600000000000004], [471.0, 0.011764705882352943], [483.0, 1.5058823529411778], [484.0, 0.013054830287206252], [485.0, 0.010989010989010992], [500.0, 0.3408071748878929], [501.0, 0.021052631578947375], [508.0, 0.5422535211267607], [509.0, 0.0049999999999999975], [525.0, 2.222222222222222], [526.0, 0.009560229445506703], [552.0, 1.1016949152542383], [553.0, 0.008438818565400841], [554.0, 0.01421800947867299], [567.0, 6.041666666666668], [568.0, 0.05109489051094892], [569.0, 0.013157894736842108], [570.0, 0.01418439716312058], [581.0, 0.43968871595330755], [582.0, 0.007017543859649122], [596.0, 0.2865853658536584], [597.0, 0.0], [610.0, 1.044117647058824], [611.0, 0.010666666666666666], [612.0, 0.03333333333333333], [621.0, 0.721804511278196], [622.0, 0.01408450704225352], [636.0, 0.6486486486486488], [637.0, 0.011709601873536299], [647.0, 0.7194244604316546], [648.0, 0.01736972704714642], [663.0, 0.3348416289592765], [664.0, 0.010101010101010104], [680.0, 1.5740740740740748], [681.0, 0.009225092250922514], [705.0, 0.47808764940239035], [706.0, 0.0130718954248366], [707.0, 0.43749999999999994], [709.0, 0.09523809523809529], [710.0, 0.0], [715.0, 0.10563380281690138], [716.0, 0.017391304347826087], [745.0, 0.9702970297029722], [746.0, 0.01393728222996515], [747.0, 0.014563106796116514], [757.0, 0.17223198594024605], [773.0, 0.32443531827515404], [784.0, 0.521531100478469], [785.0, 0.013927576601671302], [798.0, 0.7674418604651171], [799.0, 0.008108108108108105], [812.0, 0.44897959183673514], [813.0, 0.0051813471502590676], [825.0, 0.38390092879256993], [826.0, 0.009132420091324202], [839.0, 0.4856115107913671], [840.0, 0.01724137931034484], [847.0, 0.1927374301675977], [848.0, 0.01895734597156399], [863.0, 0.672413793103449], [864.0, 0.012931034482758633], [867.0, 0.0], [868.0, 0.020202020202020214], [873.0, 0.12754158964879853], [887.0, 0.9185185185185188], [888.0, 0.009828009828009828], [903.0, 1.2076923076923083], [904.0, 0.008695652173913038], [905.0, 0.013513513513513518], [920.0, 0.6150793650793654], [921.0, 0.015822784810126576], [934.0, 0.4234527687296419], [935.0, 0.012820512820512836], [952.0, 0.3519668737060042], [953.0, 0.005988023952095809], [961.0, 0.26875000000000027], [962.0, 0.008032128514056224], [975.0, 0.436666666666667], [976.0, 0.012448132780082988], [990.0, 0.2964509394572019], [991.0, 0.015873015873015872], [1001.0, 0.18440995028557727], [994.0, 157.0]], "isOverall": false, "label": "AMQP Publisher", "isController": false}, {"data": [[982.4541869413108, 0.1842787593186599]], "isOverall": false, "label": "AMQP Publisher-Aggregated", "isController": false}, {"data": [[14.0, 2.4], [15.0, 2.4347826086956523], [16.0, 2.8124999999999996], [17.0, 4.0], [18.0, 6.562499999999999], [19.0, 5.250000000000002], [20.0, 6.5], [21.0, 9.166666666666666], [22.0, 4.355555555555555], [23.0, 4.428571428571427], [24.0, 3.8913043478260874], [25.0, 4.274999999999999], [26.0, 4.560975609756099], [27.0, 3.6111111111111103], [28.0, 3.745454545454544], [29.0, 3.3725490196078436], [30.0, 3.442307692307692], [31.0, 10.583333333333334], [32.0, 5.36734693877551], [33.0, 3.8181818181818166], [34.0, 5.711111111111112], [35.0, 7.214285714285714], [36.0, 5.12962962962963], [37.0, 8.564102564102564], [38.0, 5.596491228070176], [39.0, 4.22950819672131], [40.0, 5.53061224489796], [41.0, 4.754098360655739], [42.0, 5.51923076923077], [43.0, 6.999999999999999], [44.0, 5.333333333333334], [45.0, 7.6250000000000036], [46.0, 5.711111111111111], [47.0, 9.0], [48.0, 7.054545454545455], [49.0, 5.40677966101695], [50.0, 8.409090909090908], [51.0, 5.166666666666669], [52.0, 9.999999999999996], [53.0, 13.250000000000002], [54.0, 12.09090909090909], [55.0, 8.078431372549018], [56.0, 9.976190476190476], [57.0, 11.148936170212766], [58.0, 9.239130434782611], [59.0, 9.09615384615385], [60.0, 9.775], [61.0, 9.80851063829787], [62.0, 8.829787234042554], [63.0, 10.260869565217387], [64.0, 8.175438596491228], [65.0, 9.715189873417721], [66.0, 0.0], [67.0, 0.04761904761904763], [68.0, 1.6249999999999991], [69.0, 2.774193548387097], [70.0, 5.686567164179106], [71.0, 12.2], [72.0, 10.318181818181817], [73.0, 11.543859649122806], [74.0, 11.799999999999999], [75.0, 9.374999999999998], [76.0, 7.5714285714285685], [78.0, 22.000000000000004], [79.0, 7.582278481012656], [80.0, 2.8615384615384603], [81.0, 10.5], [82.0, 13.702127659574469], [83.0, 12.607142857142856], [84.0, 9.025974025974028], [85.0, 11.694444444444443], [86.0, 18.869565217391308], [87.0, 14.04444444444444], [88.0, 17.34146341463415], [89.0, 16.999999999999996], [90.0, 20.895833333333332], [91.0, 17.545454545454547], [92.0, 13.010638297872344], [93.0, 9.192307692307692], [94.0, 17.065217391304348], [95.0, 12.322580645161292], [96.0, 17.153846153846153], [97.0, 20.355555555555565], [98.0, 15.372549019607844], [99.0, 21.341463414634145], [100.0, 17.78048780487805], [101.0, 20.511111111111116], [102.0, 24.8], [103.0, 27.0], [104.0, 36.15151515151514], [105.0, 16.062499999999996], [107.0, 22.2], [110.0, 19.057142857142853], [114.0, 0.01785714285714286], [115.0, 0.06930693069306931], [116.0, 0.0], [117.0, 0.42105263157894735], [118.0, 0.13538461538461538], [119.0, 0.10714285714285725], [120.0, 12.338709677419354], [121.0, 10.516129032258066], [122.0, 11.12962962962963], [123.0, 17.04166666666667], [124.0, 11.940298507462684], [125.0, 10.17721518987342], [126.0, 10.283783783783782], [127.0, 13.782608695652174], [128.0, 27.690476190476193], [129.0, 33.57142857142857], [130.0, 36.34375], [131.0, 35.52272727272729], [132.0, 35.733333333333334], [133.0, 30.256410256410255], [134.0, 27.903225806451612], [135.0, 30.509803921568626], [136.0, 22.33333333333333], [137.0, 25.25], [138.0, 23.794871794871796], [139.0, 31.999999999999996], [140.0, 29.000000000000004], [141.0, 31.816326530612244], [142.0, 28.83333333333334], [143.0, 30.792452830188683], [144.0, 26.016949152542367], [145.0, 25.488372093023255], [146.0, 26.679999999999996], [147.0, 26.84], [148.0, 28.23404255319149], [149.0, 28.833333333333336], [150.0, 22.611111111111107], [151.0, 19.264705882352935], [152.0, 22.196078431372552], [153.0, 18.0], [154.0, 28.214285714285715], [155.0, 30.833333333333336], [156.0, 22.714285714285708], [157.0, 3.7894736842105265], [158.0, 22.968749999999996], [159.0, 34.07317073170732], [160.0, 38.29411764705883], [161.0, 31.96923076923077], [162.0, 27.555555555555557], [163.0, 27.739130434782606], [164.0, 29.51724137931035], [165.0, 29.294117647058815], [166.0, 30.025000000000002], [167.0, 30.9795918367347], [168.0, 32.22413793103447], [169.0, 31.871794871794872], [170.0, 33.81081081081082], [171.0, 31.999999999999996], [172.0, 35.00000000000001], [173.0, 36.44444444444442], [174.0, 32.603773584905646], [175.0, 33.17999999999998], [176.0, 30.510638297872337], [177.0, 31.48837209302326], [178.0, 33.1111111111111], [179.0, 39.6046511627907], [180.0, 34.78947368421053], [181.0, 36.59183673469388], [182.0, 35.975609756097576], [183.0, 34.59999999999999], [184.0, 22.019999999999992], [185.0, 34.625], [186.0, 42.75609756097561], [187.0, 47.46153846153847], [188.0, 54.333333333333336], [189.0, 56.16666666666667], [190.0, 56.89285714285714], [191.0, 58.35294117647059], [192.0, 59.40000000000001], [193.0, 52.67567567567567], [194.0, 53.214285714285715], [195.0, 50.53846153846154], [196.0, 44.25], [197.0, 43.37288135593219], [198.0, 36.80327868852458], [199.0, 38.576271186440664], [200.0, 37.26000000000001], [201.0, 29.70212765957446], [202.0, 34.975], [203.0, 46.457142857142856], [204.0, 46.97826086956522], [205.0, 42.77966101694915], [206.0, 42.02], [207.0, 42.080000000000005], [208.0, 44.031250000000014], [209.0, 46.099999999999994], [210.0, 52.06666666666666], [211.0, 58.074074074074076], [212.0, 64.0], [213.0, 67.55263157894733], [214.0, 66.89743589743588], [215.0, 64.88888888888889], [216.0, 61.96875000000001], [217.0, 53.802816901408455], [218.0, 48.8], [219.0, 40.57142857142856], [220.0, 34.020408163265294], [221.0, 35.77551020408164], [222.0, 41.204081632653065], [223.0, 41.3125], [224.0, 47.21739130434783], [225.0, 52.53333333333333], [226.0, 57.217391304347835], [227.0, 59.63829787234043], [228.0, 61.069767441860456], [229.0, 59.92452830188678], [230.0, 55.534883720930225], [231.0, 49.71739130434782], [232.0, 49.892857142857146], [233.0, 53.904761904761905], [234.0, 54.45833333333334], [235.0, 60.613636363636374], [236.0, 63.59459459459459], [237.0, 54.42253521126759], [238.0, 47.278688524590166], [239.0, 48.65000000000001], [240.0, 46.46938775510204], [241.0, 49.24137931034482], [242.0, 48.77528089887642], [243.0, 42.979591836734706], [244.0, 30.44186046511628], [245.0, 50.51851851851854], [246.0, 29.294117647058826], [247.0, 57.26785714285713], [248.0, 46.09375000000001], [249.0, 45.12068965517241], [250.0, 46.25641025641025], [251.0, 45.18], [252.0, 47.85714285714285], [253.0, 53.69565217391305], [254.0, 50.95833333333334], [255.0, 41.92156862745099], [257.0, 55.08108108108109], [256.0, 45.813953488372086], [258.0, 54.425531914893625], [259.0, 51.148936170212764], [260.0, 40.438596491228054], [261.0, 34.32142857142857], [262.0, 61.022727272727295], [263.0, 55.56097560975611], [264.0, 65.11904761904762], [270.0, 57.39473684210525], [271.0, 57.00000000000001], [268.0, 56.5625], [269.0, 56.682926829268304], [265.0, 60.369565217391305], [266.0, 53.958333333333336], [267.0, 54.38888888888889], [273.0, 58.05405405405405], [272.0, 56.919999999999995], [274.0, 56.480000000000004], [275.0, 56.787234042553195], [276.0, 49.245283018867916], [277.0, 55.61363636363636], [278.0, 56.942857142857136], [279.0, 58.44000000000001], [280.0, 55.68749999999999], [286.0, 64.71875], [287.0, 71.19999999999999], [284.0, 54.878787878787875], [285.0, 55.84375], [281.0, 57.50000000000001], [282.0, 56.525], [283.0, 50.80000000000001], [289.0, 66.03921568627453], [288.0, 70.0793650793651], [290.0, 67.23529411764706], [291.0, 68.20833333333333], [292.0, 57.921568627450995], [293.0, 57.706896551724135], [294.0, 64.1891891891892], [295.0, 74.75000000000001], [296.0, 62.819672131147556], [302.0, 61.89473684210527], [303.0, 64.41463414634146], [300.0, 58.81578947368422], [301.0, 61.225], [297.0, 49.8181818181818], [298.0, 45.33333333333334], [299.0, 62.345238095238095], [305.0, 60.526315789473685], [304.0, 60.83673469387756], [306.0, 67.23809523809526], [307.0, 65.63461538461539], [308.0, 70.79411764705881], [309.0, 68.15555555555555], [310.0, 68.48484848484847], [311.0, 70.35714285714288], [312.0, 71.33333333333334], [318.0, 75.5853658536585], [319.0, 72.37837837837836], [316.0, 72.53846153846155], [317.0, 74.29166666666666], [313.0, 72.71666666666664], [314.0, 71.30952380952382], [315.0, 72.04444444444447], [321.0, 70.35135135135135], [320.0, 71.66129032258064], [322.0, 75.33962264150944], [323.0, 71.88235294117649], [324.0, 67.12987012987016], [325.0, 60.11428571428573], [326.0, 60.91489361702127], [327.0, 71.06976744186048], [328.0, 48.099999999999994], [334.0, 67.86666666666666], [335.0, 65.27692307692307], [332.0, 60.303030303030305], [333.0, 64.86792452830188], [329.0, 46.66666666666667], [330.0, 48.456521739130416], [331.0, 59.02222222222222], [337.0, 66.24324324324324], [336.0, 67.91176470588235], [338.0, 71.04444444444445], [339.0, 66.92452830188678], [340.0, 67.64102564102565], [341.0, 69.39024390243902], [342.0, 68.97777777777777], [343.0, 69.88888888888887], [344.0, 72.24390243902438], [350.0, 72.01449275362317], [351.0, 68.65853658536585], [348.0, 69.36170212765957], [349.0, 56.47727272727272], [345.0, 76.35897435897436], [346.0, 74.11320754716981], [347.0, 74.03636363636362], [353.0, 75.81818181818183], [352.0, 58.394736842105274], [354.0, 71.16666666666667], [355.0, 72.88732394366195], [356.0, 65.17142857142856], [357.0, 69.32876712328768], [358.0, 72.37499999999999], [359.0, 72.58333333333331], [360.0, 69.58064516129035], [366.0, 77.19444444444446], [367.0, 81.01886792452831], [364.0, 72.4], [365.0, 77.68888888888888], [361.0, 66.01851851851853], [362.0, 72.17777777777778], [363.0, 70.63157894736841], [369.0, 68.43902439024392], [368.0, 72.02499999999998], [370.0, 81.9767441860465], [371.0, 74.03636363636366], [372.0, 82.88888888888889], [373.0, 79.17777777777779], [374.0, 79.69811320754717], [375.0, 76.87179487179488], [376.0, 77.67272727272729], [382.0, 78.02564102564102], [383.0, 84.8108108108108], [380.0, 63.81818181818182], [381.0, 74.6086956521739], [377.0, 77.90625], [378.0, 76.27906976744188], [379.0, 70.890625], [385.0, 78.77272727272727], [384.0, 78.54054054054053], [386.0, 79.28260869565214], [387.0, 77.28571428571426], [388.0, 85.86842105263159], [389.0, 86.05263157894738], [390.0, 82.99999999999999], [391.0, 89.0], [392.0, 81.98181818181817], [398.0, 83.3809523809524], [399.0, 81.05], [396.0, 81.1951219512195], [397.0, 81.62745098039214], [393.0, 83.77777777777779], [394.0, 84.82456140350875], [395.0, 82.13953488372096], [401.0, 85.33333333333333], [400.0, 84.03030303030305], [402.0, 90.06976744186048], [403.0, 88.2608695652174], [404.0, 85.83636363636366], [405.0, 91.11764705882355], [406.0, 92.60000000000004], [407.0, 85.34146341463413], [408.0, 90.15254237288137], [414.0, 88.66666666666669], [415.0, 94.08888888888889], [412.0, 69.95555555555552], [413.0, 76.81818181818183], [409.0, 92.08510638297872], [410.0, 83.6764705882353], [411.0, 82.14285714285712], [417.0, 91.55000000000001], [416.0, 91.47916666666669], [418.0, 82.48387096774192], [419.0, 89.06060606060606], [420.0, 87.72549019607841], [421.0, 95.19047619047616], [422.0, 92.65625], [423.0, 82.76470588235294], [424.0, 96.51724137931035], [430.0, 86.0], [431.0, 95.30120481927713], [428.0, 93.05], [429.0, 99.81818181818183], [425.0, 94.88888888888889], [426.0, 88.63333333333335], [427.0, 94.41176470588235], [433.0, 87.28124999999999], [432.0, 86.66666666666666], [434.0, 88.34210526315792], [435.0, 89.40909090909092], [436.0, 93.41176470588235], [437.0, 95.78124999999999], [438.0, 69.94736842105262], [439.0, 78.66666666666669], [440.0, 89.23913043478261], [446.0, 103.28846153846155], [447.0, 95.00000000000001], [444.0, 93.74468085106383], [445.0, 96.05405405405406], [441.0, 97.48148148148152], [442.0, 96.625], [443.0, 97.1025641025641], [449.0, 95.04651162790698], [448.0, 94.70731707317073], [450.0, 94.68181818181819], [451.0, 98.41176470588232], [452.0, 101.02564102564102], [453.0, 99.33333333333331], [454.0, 101.27499999999999], [455.0, 99.80952380952382], [456.0, 101.24444444444445], [462.0, 98.19298245614034], [463.0, 89.56410256410254], [460.0, 98.42857142857143], [461.0, 100.30769230769229], [457.0, 101.04477611940294], [458.0, 97.58333333333333], [459.0, 98.75714285714285], [465.0, 100.54716981132076], [464.0, 93.55555555555556], [466.0, 94.17241379310346], [467.0, 103.91304347826087], [468.0, 107.86000000000003], [469.0, 94.0], [470.0, 99.27777777777777], [471.0, 97.16666666666666], [472.0, 113.4285714285714], [478.0, 112.7741935483871], [479.0, 117.02631578947367], [476.0, 114.27777777777776], [477.0, 114.72093023255813], [473.0, 115.3142857142857], [474.0, 119.9268292682927], [475.0, 116.57894736842104], [481.0, 118.84090909090908], [480.0, 119.83333333333333], [482.0, 114.87755102040818], [483.0, 113.90909090909093], [484.0, 107.07142857142858], [485.0, 110.41304347826086], [486.0, 104.74545454545454], [487.0, 104.67857142857143], [488.0, 106.4193548387097], [494.0, 117.97297297297297], [495.0, 116.16666666666666], [492.0, 107.05405405405408], [493.0, 111.61111111111113], [489.0, 106.9047619047619], [490.0, 102.70000000000003], [491.0, 105.82608695652175], [497.0, 126.28205128205126], [496.0, 119.93103448275863], [498.0, 128.58974358974353], [499.0, 128.30232558139537], [500.0, 127.0], [501.0, 125.81081081081084], [502.0, 122.99999999999999], [503.0, 114.3529411764706], [504.0, 118.4375], [510.0, 116.8723404255319], [511.0, 113.71111111111112], [508.0, 114.67391304347825], [509.0, 108.98181818181817], [505.0, 119.575], [506.0, 113.86363636363635], [507.0, 117.58333333333331], [515.0, 117.48837209302327], [512.0, 112.51612903225806], [526.0, 145.22222222222217], [527.0, 139.76], [524.0, 142.29729729729723], [525.0, 148.9736842105263], [522.0, 134.55263157894737], [523.0, 135.6521739130435], [513.0, 108.37209302325584], [514.0, 107.20689655172414], [516.0, 121.29032258064517], [517.0, 116.06818181818181], [518.0, 112.69696969696969], [519.0, 122.35], [528.0, 138.61904761904765], [542.0, 145.88888888888889], [543.0, 146.26923076923075], [540.0, 137.75000000000003], [541.0, 142.96153846153842], [538.0, 128.5], [539.0, 132.33333333333334], [536.0, 126.5581395348837], [537.0, 125.36666666666666], [529.0, 137.49999999999997], [530.0, 135.34999999999997], [531.0, 137.51515151515156], [532.0, 138.07692307692307], [533.0, 134.16666666666666], [534.0, 130.6486486486486], [535.0, 130.28571428571428], [520.0, 127.40740740740739], [521.0, 130.23529411764707], [547.0, 143.20000000000005], [544.0, 148.21212121212125], [558.0, 135.53333333333333], [559.0, 141.38235294117644], [556.0, 131.47368421052633], [557.0, 137.0909090909091], [554.0, 128.4375], [555.0, 127.85185185185185], [545.0, 145.1730769230769], [546.0, 145.79591836734696], [548.0, 143.0], [549.0, 144.9], [550.0, 147.82926829268297], [551.0, 144.43478260869566], [560.0, 144.31249999999997], [574.0, 128.75], [575.0, 127.1551724137931], [572.0, 128.32499999999996], [573.0, 128.625], [570.0, 128.4375], [571.0, 130.32], [568.0, 151.6141732283466], [569.0, 143.99999999999991], [561.0, 147.61764705882356], [562.0, 150.43902439024393], [563.0, 153.05263157894737], [564.0, 148.7777777777778], [565.0, 144.06779661016952], [566.0, 154.63333333333333], [567.0, 158.16666666666669], [552.0, 143.34545454545446], [553.0, 135.41463414634143], [579.0, 99.92727272727272], [576.0, 124.5217391304348], [590.0, 139.30909090909088], [591.0, 139.2121212121212], [588.0, 140.26923076923075], [589.0, 143.69767441860466], [586.0, 131.48387096774192], [587.0, 132.29629629629628], [577.0, 123.35294117647058], [578.0, 122.63888888888889], [580.0, 109.17241379310347], [581.0, 117.20512820512822], [582.0, 135.70329670329676], [583.0, 135.54054054054058], [592.0, 140.03508771929828], [606.0, 143.6176470588235], [607.0, 142.7254901960784], [604.0, 132.92592592592584], [605.0, 137.71794871794867], [602.0, 123.14285714285715], [603.0, 131.94117647058823], [600.0, 139.20338983050848], [601.0, 134.61904761904762], [593.0, 140.48571428571427], [594.0, 141.32608695652175], [595.0, 140.4848484848485], [596.0, 139.52500000000003], [597.0, 140.17142857142858], [598.0, 134.32], [599.0, 138.95652173913044], [584.0, 140.5333333333333], [585.0, 134.65625], [611.0, 130.49999999999997], [608.0, 144.62962962962965], [622.0, 152.05263157894737], [623.0, 149.7012987012987], [620.0, 154.88571428571427], [621.0, 154.99999999999991], [618.0, 156.35], [619.0, 157.22857142857146], [609.0, 142.9193548387096], [610.0, 135.01785714285714], [612.0, 132.77777777777777], [613.0, 142.4285714285714], [614.0, 149.3913043478261], [615.0, 158.10256410256412], [624.0, 147.5], [638.0, 150.42307692307688], [639.0, 153.11627906976742], [636.0, 150.34146341463415], [637.0, 152.15909090909093], [634.0, 141.07142857142856], [635.0, 147.51851851851853], [632.0, 145.0869565217391], [633.0, 145.27027027027032], [625.0, 148.83333333333331], [626.0, 148.15384615384616], [627.0, 144.8088235294118], [628.0, 140.88000000000002], [629.0, 147.7234042553192], [630.0, 142.58333333333331], [631.0, 140.50000000000006], [616.0, 161.02439024390242], [617.0, 157.86956521739125], [643.0, 158.046511627907], [640.0, 156.96875], [654.0, 199.71428571428572], [655.0, 219.3134328358209], [652.0, 157.5333333333334], [653.0, 174.50000000000003], [650.0, 155.1025641025641], [651.0, 152.0555555555556], [641.0, 158.1521739130435], [642.0, 157.1794871794872], [644.0, 152.89743589743586], [645.0, 163.82926829268297], [646.0, 160.78124999999997], [647.0, 159.47916666666666], [656.0, 159.75806451612905], [670.0, 150.02325581395345], [671.0, 145.60465116279067], [668.0, 153.97142857142862], [669.0, 152.66666666666666], [666.0, 165.975], [667.0, 159.18333333333337], [664.0, 160.11428571428576], [665.0, 161.622641509434], [657.0, 162.4], [658.0, 160.24999999999997], [659.0, 161.6585365853658], [660.0, 155.79545454545462], [661.0, 159.952380952381], [662.0, 162.65116279069767], [663.0, 159.47222222222214], [648.0, 159.23809523809524], [649.0, 157.4878048780488], [675.0, 153.1296296296296], [672.0, 152.8125], [686.0, 171.82500000000002], [687.0, 175.26923076923075], [684.0, 168.6727272727272], [685.0, 167.03448275862067], [682.0, 170.60526315789474], [683.0, 168.8048780487805], [673.0, 156.2432432432432], [674.0, 152.31578947368425], [676.0, 154.3333333333333], [677.0, 145.6363636363636], [678.0, 155.6333333333333], [679.0, 164.70000000000002], [688.0, 175.47368421052633], [702.0, 154.7567567567568], [703.0, 153.69230769230765], [700.0, 157.4583333333333], [701.0, 155.62264150943392], [698.0, 162.76363636363635], [699.0, 157.4571428571428], [696.0, 164.48000000000002], [697.0, 157.66666666666669], [689.0, 177.7857142857143], [690.0, 169.70370370370378], [691.0, 170.75], [692.0, 167.53488372093022], [693.0, 167.73469387755102], [694.0, 164.08108108108107], [695.0, 163.64285714285708], [680.0, 160.0204081632653], [681.0, 168.55555555555554], [707.0, 167.17857142857144], [704.0, 152.40625000000006], [718.0, 162.24999999999997], [719.0, 162.4242424242425], [716.0, 153.23684210526315], [717.0, 161.71428571428572], [714.0, 153.56000000000006], [715.0, 151.3793103448276], [705.0, 153.5], [706.0, 158.6216216216216], [708.0, 175.21495327102804], [709.0, 167.8780487804878], [710.0, 163.95238095238093], [711.0, 156.21951219512195], [720.0, 163.45161290322577], [734.0, 159.2786885245902], [735.0, 142.65517241379314], [732.0, 155.3529411764706], [733.0, 152.07042253521124], [730.0, 183.20000000000005], [731.0, 175.24770642201835], [728.0, 166.6379310344827], [729.0, 175.58139534883722], [721.0, 163.0444444444444], [722.0, 163.40909090909088], [723.0, 158.52173913043478], [724.0, 140.6071428571429], [725.0, 142.35555555555553], [726.0, 151.3684210526316], [727.0, 160.27450980392155], [712.0, 153.7837837837838], [713.0, 151.68421052631578], [739.0, 131.89999999999998], [736.0, 146.11538461538464], [750.0, 170.54999999999998], [751.0, 171.875], [748.0, 166.62162162162159], [749.0, 172.89552238805973], [746.0, 233.61818181818182], [747.0, 148.35294117647064], [737.0, 155.03846153846152], [738.0, 135.67441860465112], [740.0, 135.11904761904768], [741.0, 157.71875], [742.0, 208.46153846153848], [743.0, 327.30256410256425], [752.0, 179.09756097560972], [766.0, 197.89655172413788], [767.0, 198.3421052631579], [764.0, 195.58974358974356], [765.0, 196.90243902439025], [762.0, 188.54285714285717], [763.0, 189.67857142857144], [760.0, 192.52941176470586], [761.0, 190.00000000000003], [753.0, 182.33333333333334], [754.0, 177.3684210526316], [755.0, 181.86206896551727], [756.0, 181.78571428571428], [757.0, 187.2093023255814], [758.0, 187.70588235294116], [759.0, 187.625], [744.0, 225.32075471698116], [745.0, 140.36842105263156], [771.0, 210.2558139534883], [768.0, 189.33333333333331], [782.0, 203.88095238095238], [783.0, 204.15555555555557], [780.0, 213.475], [781.0, 209.2972972972973], [778.0, 206.8461538461539], [779.0, 211.77272727272728], [769.0, 200.04166666666666], [770.0, 202.78378378378375], [772.0, 209.65853658536585], [773.0, 209.24324324324323], [774.0, 208.4468085106383], [775.0, 209.9411764705882], [784.0, 211.9444444444444], [798.0, 183.7368421052632], [799.0, 175.48717948717947], [796.0, 182.28571428571425], [797.0, 195.0], [794.0, 190.64583333333334], [795.0, 189.79999999999998], [792.0, 189.9038461538462], [793.0, 191.9375], [785.0, 199.42222222222227], [786.0, 199.03125000000003], [787.0, 198.13043478260866], [788.0, 195.80851063829783], [789.0, 194.02631578947364], [790.0, 188.94444444444443], [791.0, 192.7441860465116], [776.0, 207.44186046511632], [777.0, 205.61764705882348], [803.0, 185.40476190476187], [800.0, 180.8378378378378], [814.0, 211.34615384615387], [815.0, 332.60526315789474], [812.0, 316.52482269503537], [813.0, 221.9333333333333], [810.0, 191.29999999999998], [811.0, 228.76923076923075], [801.0, 181.7142857142857], [802.0, 207.3023255813953], [804.0, 184.52083333333331], [805.0, 206.45000000000005], [806.0, 183.47368421052627], [807.0, 191.72093023255815], [816.0, 305.84057971014494], [830.0, 215.37313432835816], [831.0, 215.8125], [828.0, 216.2142857142857], [829.0, 252.65], [826.0, 297.8571428571428], [827.0, 242.33333333333337], [824.0, 200.35714285714286], [825.0, 281.1285714285714], [817.0, 202.67499999999998], [818.0, 242.75609756097563], [819.0, 253.73333333333335], [820.0, 260.04166666666663], [821.0, 216.54054054054052], [822.0, 194.48888888888888], [823.0, 193.51724137931035], [808.0, 199.1428571428571], [809.0, 225.625], [837.0, 200.70731707317074], [833.0, 207.93333333333328], [832.0, 207.70212765957444], [846.0, 186.0243902439024], [847.0, 169.125], [844.0, 193.48529411764704], [845.0, 203.1016949152542], [842.0, 229.44186046511626], [843.0, 198.8315789473684], [834.0, 212.51162790697677], [835.0, 204.12500000000003], [836.0, 258.67857142857144], [838.0, 264.55555555555554], [856.0, 190.03571428571422], [857.0, 146.97222222222217], [858.0, 142.89655172413796], [859.0, 147.80555555555554], [860.0, 156.62068965517238], [861.0, 161.05882352941174], [862.0, 165.63829787234044], [863.0, 161.97368421052633], [848.0, 166.49494949494945], [849.0, 161.67741935483875], [850.0, 177.28571428571428], [851.0, 185.39024390243898], [852.0, 171.86538461538464], [853.0, 162.02702702702697], [854.0, 143.67741935483872], [855.0, 155.68750000000006], [840.0, 240.7234042553192], [841.0, 274.11764705882354], [867.0, 197.6315789473684], [864.0, 188.08888888888887], [878.0, 198.75], [879.0, 200.89285714285717], [876.0, 205.5384615384615], [877.0, 199.5], [874.0, 198.82352941176472], [875.0, 205.25], [865.0, 197.4], [866.0, 199.87499999999997], [868.0, 196.99999999999997], [869.0, 187.6774193548387], [870.0, 188.70588235294113], [871.0, 188.5185185185185], [880.0, 200.39130434782606], [894.0, 214.07999999999998], [895.0, 225.25000000000003], [892.0, 212.43243243243242], [893.0, 267.9512195121952], [890.0, 217.80952380952374], [891.0, 211.48780487804876], [888.0, 192.33333333333334], [889.0, 201.95000000000002], [881.0, 207.62500000000003], [882.0, 204.5641025641026], [883.0, 200.3488372093023], [884.0, 182.3148148148148], [885.0, 181.69696969696972], [886.0, 202.82499999999996], [887.0, 188.04545454545456], [872.0, 194.12500000000003], [873.0, 195.71232876712324], [899.0, 221.71111111111105], [896.0, 218.53846153846152], [910.0, 229.35000000000005], [911.0, 224.52380952380955], [908.0, 227.45], [909.0, 224.16666666666663], [906.0, 223.860465116279], [907.0, 248.89361702127664], [897.0, 235.469387755102], [898.0, 222.578947368421], [900.0, 239.63829787234036], [901.0, 216.1875], [902.0, 242.48333333333332], [903.0, 233.0744680851064], [912.0, 263.60256410256403], [926.0, 238.8076923076923], [927.0, 224.67999999999995], [924.0, 229.19444444444449], [925.0, 227.60869565217388], [922.0, 239.96153846153842], [923.0, 217.61194029850745], [920.0, 230.29411764705878], [921.0, 230.55555555555563], [913.0, 221.00000000000003], [914.0, 275.891089108911], [915.0, 235.7142857142857], [916.0, 227.64444444444445], [917.0, 219.92105263157896], [918.0, 217.27499999999998], [919.0, 271.6369863013698], [904.0, 239.1860465116279], [905.0, 243.09803921568627], [931.0, 255.09433962264157], [928.0, 246.7543859649123], [942.0, 234.27118644067792], [943.0, 233.83636363636364], [940.0, 252.93478260869563], [941.0, 218.59183673469386], [938.0, 225.37777777777774], [939.0, 230.03409090909088], [929.0, 233.97619047619042], [930.0, 223.86111111111111], [932.0, 254.9074074074074], [933.0, 238.5853658536585], [934.0, 240.86486486486484], [935.0, 230.82000000000002], [944.0, 217.03999999999996], [958.0, 202.3265306122449], [959.0, 206.07317073170736], [956.0, 220.84126984126988], [957.0, 214.38636363636363], [954.0, 209.3777777777778], [955.0, 213.7105263157895], [952.0, 212.43902439024393], [953.0, 210.22448979591834], [945.0, 226.75], [946.0, 212.0847457627119], [947.0, 223.02941176470583], [948.0, 218.91111111111113], [949.0, 232.26], [950.0, 221.30555555555554], [951.0, 233.46], [936.0, 227.97560975609755], [937.0, 260.625], [963.0, 216.61290322580643], [960.0, 204.0], [974.0, 235.36065573770497], [975.0, 223.91304347826087], [972.0, 225.33999999999997], [973.0, 219.99999999999997], [970.0, 233.54545454545453], [971.0, 229.04237288135602], [961.0, 219.2372881355932], [962.0, 226.23809523809524], [964.0, 207.04347826086956], [965.0, 219.2777777777778], [966.0, 225.30769230769232], [967.0, 220.95348837209306], [976.0, 222.86440677966107], [990.0, 252.85365853658533], [991.0, 236.2142857142857], [988.0, 237.58064516129036], [989.0, 249.68571428571423], [986.0, 238.1470588235294], [987.0, 228.58974358974362], [984.0, 234.0740740740741], [985.0, 231.06779661016947], [977.0, 222.24742268041243], [978.0, 223.35294117647058], [979.0, 235.79999999999995], [980.0, 228.67499999999998], [981.0, 236.33333333333331], [982.0, 233.15789473684214], [983.0, 228.16883116883116], [968.0, 226.84444444444443], [969.0, 222.76923076923083], [995.0, 273.12903225806457], [992.0, 228.864077669903], [993.0, 252.7857142857142], [994.0, 251.48275862068965], [996.0, 250.21621621621625], [997.0, 226.46808510638297], [998.0, 238.77011494252878], [999.0, 230.90476190476193], [1000.0, 256.9245283018867], [1001.0, 188.42840669315873]], "isOverall": false, "label": "AMQP Consumer", "isController": false}, {"data": [[986.8997679847332, 186.4414691048566]], "isOverall": false, "label": "AMQP Consumer-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1001.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.74715296E12, "maxY": 1.13088439E7, "series": [{"data": [[1.74715326E12, 1.062854E7], [1.74715308E12, 1.13088439E7], [1.7471532E12, 1.07570326E7], [1.74715302E12, 1.080823605E7], [1.74715314E12, 1.1218638066666666E7], [1.74715296E12, 705581.25]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74715326E12, 0.0], [1.74715308E12, 0.0], [1.7471532E12, 0.0], [1.74715302E12, 0.0], [1.74715314E12, 0.0], [1.74715296E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74715326E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 0.10120034151976294, "minX": 1.74715296E12, "maxY": 194.07390415759858, "series": [{"data": [[1.74715326E12, 0.18452650959254416], [1.74715308E12, 0.18065064199016667], [1.7471532E12, 0.19045484804344864], [1.74715302E12, 0.18899789102191655], [1.74715314E12, 0.18245993225137713], [1.74715296E12, 0.10120034151976294]], "isOverall": false, "label": "AMQP Publisher", "isController": false}, {"data": [[1.74715326E12, 188.7847530659582], [1.74715308E12, 184.668310800865], [1.7471532E12, 194.07390415759858], [1.74715302E12, 184.60644555612598], [1.74715314E12, 186.55776834460175], [1.74715296E12, 24.971]], "isOverall": false, "label": "AMQP Consumer", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74715326E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74715296E12, "maxY": 4.9E-324, "series": [{"data": [[1.74715326E12, 0.0], [1.74715308E12, 0.0], [1.7471532E12, 0.0], [1.74715302E12, 0.0], [1.74715314E12, 0.0], [1.74715296E12, 0.0]], "isOverall": false, "label": "AMQP Publisher", "isController": false}, {"data": [[1.74715326E12, 0.0], [1.74715308E12, 0.0], [1.7471532E12, 0.0], [1.74715302E12, 0.0], [1.74715314E12, 0.0], [1.74715296E12, 0.0]], "isOverall": false, "label": "AMQP Consumer", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74715326E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74715296E12, "maxY": 4.9E-324, "series": [{"data": [[1.74715326E12, 0.0], [1.74715308E12, 0.0], [1.7471532E12, 0.0], [1.74715302E12, 0.0], [1.74715314E12, 0.0], [1.74715296E12, 0.0]], "isOverall": false, "label": "AMQP Publisher", "isController": false}, {"data": [[1.74715326E12, 0.0], [1.74715308E12, 0.0], [1.7471532E12, 0.0], [1.74715302E12, 0.0], [1.74715314E12, 0.0], [1.74715296E12, 0.0]], "isOverall": false, "label": "AMQP Consumer", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74715326E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74715296E12, "maxY": 454.0, "series": [{"data": [[1.74715326E12, 454.0], [1.74715308E12, 368.0], [1.7471532E12, 379.0], [1.74715302E12, 382.0], [1.74715314E12, 366.0], [1.74715296E12, 189.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74715326E12, 0.0], [1.74715308E12, 0.0], [1.7471532E12, 0.0], [1.74715302E12, 0.0], [1.74715314E12, 0.0], [1.74715296E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74715326E12, 223.0], [1.74715308E12, 198.0], [1.7471532E12, 244.0], [1.74715302E12, 201.0], [1.74715314E12, 198.0], [1.74715296E12, 47.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74715326E12, 425.0], [1.74715308E12, 213.0], [1.7471532E12, 263.0], [1.74715302E12, 217.0], [1.74715314E12, 220.0], [1.74715296E12, 68.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74715326E12, 175.0], [1.74715308E12, 29.0], [1.7471532E12, 178.0], [1.74715302E12, 0.0], [1.74715314E12, 1.0], [1.74715296E12, 0.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.74715326E12, 294.0], [1.74715308E12, 204.0], [1.7471532E12, 255.0], [1.74715302E12, 206.0], [1.74715314E12, 204.0], [1.74715296E12, 59.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74715326E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 327.0, "maxY": 381.0, "series": [{"data": [[8321.0, 21.0], [8389.0, 161.0], [8369.0, 195.0], [9041.0, 168.0], [8737.0, 0.0], [9637.0, 170.0], [9369.0, 155.0], [9357.0, 0.0], [9469.0, 180.0], [9405.0, 171.0], [9353.0, 161.0], [10177.0, 158.0], [9877.0, 163.0], [10001.0, 124.0], [10205.0, 146.0], [9737.0, 169.0], [10021.0, 167.0], [10169.0, 156.0], [10061.0, 1.0], [9913.0, 143.0], [9925.0, 168.0], [9945.0, 0.0], [10117.0, 164.0], [10645.0, 149.0], [10365.0, 1.0], [10329.0, 161.0], [10341.0, 0.0], [10357.0, 144.0], [10521.0, 157.0], [10501.0, 160.0], [10505.0, 158.0], [10525.0, 150.0], [10633.0, 130.0], [10625.0, 135.0], [10721.0, 107.0], [10693.0, 0.0], [10281.0, 155.0], [10473.0, 158.0], [10393.0, 154.0], [10437.0, 145.0], [10457.0, 155.0], [10581.0, 0.0], [10593.0, 1.0], [10993.0, 0.0], [11225.0, 0.0], [11017.0, 0.0], [11065.0, 142.0], [11021.0, 1.0], [11073.0, 0.0], [11109.0, 0.0], [10897.0, 1.0], [10917.0, 0.0], [10953.0, 133.0], [10925.0, 0.0], [10973.0, 1.0], [10781.0, 0.0], [11137.0, 143.0], [11149.0, 1.0], [10845.0, 124.0], [10773.0, 147.0], [11153.0, 0.0], [11169.0, 0.0], [11197.0, 123.0], [11705.0, 0.0], [11469.0, 0.0], [327.0, 381.0], [5656.0, 0.0], [8260.0, 1.0], [8652.0, 166.0], [8544.0, 118.5], [8556.0, 201.0], [9352.0, 163.0], [10124.0, 147.0], [10120.0, 165.0], [10176.0, 129.5], [10188.0, 155.0], [9988.0, 169.0], [10172.0, 107.5], [10160.0, 151.0], [9952.0, 1.0], [9872.0, 146.5], [9932.0, 171.0], [9852.0, 158.0], [9788.0, 82.5], [9972.0, 168.0], [9964.0, 151.0], [10060.0, 160.0], [10064.0, 156.5], [10700.0, 146.0], [10724.0, 0.0], [10528.0, 136.0], [10556.0, 1.0], [10560.0, 0.0], [10692.0, 0.0], [10660.0, 1.0], [10648.0, 0.0], [10360.0, 131.5], [10712.0, 143.0], [10320.0, 153.0], [10508.0, 151.5], [10484.0, 0.0], [10492.0, 160.0], [10268.0, 144.0], [10244.0, 0.0], [10280.0, 169.0], [10384.0, 148.5], [10380.0, 1.0], [10452.0, 0.0], [10440.0, 103.0], [10424.0, 162.5], [10616.0, 0.0], [10620.0, 0.0], [10608.0, 0.0], [10792.0, 0.0], [10840.0, 0.0], [11084.0, 1.0], [11120.0, 0.0], [10796.0, 0.0], [10808.0, 1.0], [10880.0, 0.0], [10892.0, 1.0], [10984.0, 1.0], [10900.0, 1.0], [10996.0, 1.0], [11040.0, 1.0], [11160.0, 146.0], [10772.0, 0.0], [10784.0, 1.0], [11264.0, 1.0], [11392.0, 0.0], [11412.0, 0.0], [11616.0, 0.0], [11540.0, 0.0], [11288.0, 0.0], [8559.0, 0.0], [8447.0, 175.0], [9159.0, 0.0], [8767.0, 44.0], [9199.0, 1.0], [9631.0, 1.0], [9675.0, 165.0], [9275.0, 0.0], [9667.0, 0.0], [10171.0, 165.0], [9991.0, 163.0], [9995.0, 158.0], [10079.0, 0.0], [10239.0, 160.0], [10235.0, 0.0], [9883.0, 168.0], [9927.0, 1.0], [9979.0, 162.0], [10103.0, 137.0], [10107.0, 149.0], [10143.0, 1.0], [10139.0, 155.0], [10631.0, 153.0], [10747.0, 148.0], [10323.0, 1.0], [10335.0, 151.0], [10311.0, 151.0], [10319.0, 163.0], [10559.0, 153.0], [10543.0, 0.0], [10711.0, 120.0], [10667.0, 158.0], [10691.0, 0.0], [10643.0, 1.0], [10719.0, 1.0], [10283.0, 165.0], [10567.0, 139.0], [10479.0, 1.0], [10399.0, 161.0], [10451.0, 168.0], [10431.0, 154.0], [10419.0, 151.0], [10375.0, 154.0], [10579.0, 0.0], [10587.0, 0.0], [10615.0, 145.0], [10591.0, 148.0], [11207.0, 104.0], [11223.0, 1.0], [11039.0, 139.0], [11215.0, 0.0], [11103.0, 1.0], [11127.0, 136.0], [11111.0, 137.0], [10899.0, 1.0], [10919.0, 0.0], [10915.0, 1.0], [10927.0, 132.0], [10955.0, 1.0], [10967.0, 0.0], [10763.0, 0.0], [10755.0, 1.0], [10815.0, 1.0], [10867.0, 1.0], [10831.0, 1.0], [11067.0, 1.0], [11195.0, 0.0], [11171.0, 0.0], [11343.0, 0.0], [11279.0, 0.0], [11463.0, 0.0], [17934.0, 0.0], [5191.0, 195.0], [7555.0, 88.0], [8063.0, 127.0], [8035.0, 171.0], [8518.0, 172.0], [8474.0, 1.0], [9114.0, 179.0], [9214.0, 0.0], [8958.0, 174.0], [8966.0, 169.0], [8822.0, 1.0], [8786.0, 180.0], [9502.0, 0.0], [9458.0, 170.0], [9690.0, 0.0], [9526.0, 183.0], [9462.0, 166.0], [9590.0, 171.0], [10210.0, 143.0], [10170.0, 172.0], [10194.0, 153.5], [10198.0, 1.0], [9958.0, 141.0], [10058.0, 155.0], [10234.0, 138.0], [10230.0, 103.0], [9922.0, 1.0], [9930.0, 0.0], [10110.0, 1.0], [10638.0, 159.0], [10302.0, 152.5], [10286.0, 0.0], [10626.0, 0.0], [10554.0, 1.0], [10538.0, 1.0], [10534.0, 0.0], [10558.0, 1.0], [10562.0, 146.5], [10658.0, 139.0], [10686.0, 140.0], [10730.0, 0.0], [10746.0, 1.0], [10522.0, 147.0], [10254.0, 171.0], [10250.0, 165.5], [10258.0, 0.5], [10262.0, 166.0], [10406.0, 140.0], [10474.0, 161.0], [10462.0, 151.0], [10458.0, 132.5], [10430.0, 161.0], [10410.0, 145.0], [10614.0, 146.0], [10578.0, 0.0], [10818.0, 1.0], [11122.0, 1.0], [10806.0, 0.0], [10938.0, 1.0], [10754.0, 1.0], [10762.0, 62.0], [11166.0, 1.0], [11138.0, 1.0], [11038.0, 0.0], [11022.0, 144.0], [11190.0, 0.0], [11186.0, 1.0], [11082.0, 0.0], [10790.0, 1.0], [10778.0, 0.0], [11386.0, 1.0], [11362.0, 137.0], [11382.0, 0.0], [11638.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 17934.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 327.0, "maxY": 4.9E-324, "series": [{"data": [[8321.0, 0.0], [8389.0, 0.0], [8369.0, 0.0], [9041.0, 0.0], [8737.0, 0.0], [9637.0, 0.0], [9369.0, 0.0], [9357.0, 0.0], [9469.0, 0.0], [9405.0, 0.0], [9353.0, 0.0], [10177.0, 0.0], [9877.0, 0.0], [10001.0, 0.0], [10205.0, 0.0], [9737.0, 0.0], [10021.0, 0.0], [10169.0, 0.0], [10061.0, 0.0], [9913.0, 0.0], [9925.0, 0.0], [9945.0, 0.0], [10117.0, 0.0], [10645.0, 0.0], [10365.0, 0.0], [10329.0, 0.0], [10341.0, 0.0], [10357.0, 0.0], [10521.0, 0.0], [10501.0, 0.0], [10505.0, 0.0], [10525.0, 0.0], [10633.0, 0.0], [10625.0, 0.0], [10721.0, 0.0], [10693.0, 0.0], [10281.0, 0.0], [10473.0, 0.0], [10393.0, 0.0], [10437.0, 0.0], [10457.0, 0.0], [10581.0, 0.0], [10593.0, 0.0], [10993.0, 0.0], [11225.0, 0.0], [11017.0, 0.0], [11065.0, 0.0], [11021.0, 0.0], [11073.0, 0.0], [11109.0, 0.0], [10897.0, 0.0], [10917.0, 0.0], [10953.0, 0.0], [10925.0, 0.0], [10973.0, 0.0], [10781.0, 0.0], [11137.0, 0.0], [11149.0, 0.0], [10845.0, 0.0], [10773.0, 0.0], [11153.0, 0.0], [11169.0, 0.0], [11197.0, 0.0], [11705.0, 0.0], [11469.0, 0.0], [327.0, 0.0], [5656.0, 0.0], [8260.0, 0.0], [8652.0, 0.0], [8544.0, 0.0], [8556.0, 0.0], [9352.0, 0.0], [10124.0, 0.0], [10120.0, 0.0], [10176.0, 0.0], [10188.0, 0.0], [9988.0, 0.0], [10172.0, 0.0], [10160.0, 0.0], [9952.0, 0.0], [9872.0, 0.0], [9932.0, 0.0], [9852.0, 0.0], [9788.0, 0.0], [9972.0, 0.0], [9964.0, 0.0], [10060.0, 0.0], [10064.0, 0.0], [10700.0, 0.0], [10724.0, 0.0], [10528.0, 0.0], [10556.0, 0.0], [10560.0, 0.0], [10692.0, 0.0], [10660.0, 0.0], [10648.0, 0.0], [10360.0, 0.0], [10712.0, 0.0], [10320.0, 0.0], [10508.0, 0.0], [10484.0, 0.0], [10492.0, 0.0], [10268.0, 0.0], [10244.0, 0.0], [10280.0, 0.0], [10384.0, 0.0], [10380.0, 0.0], [10452.0, 0.0], [10440.0, 0.0], [10424.0, 0.0], [10616.0, 0.0], [10620.0, 0.0], [10608.0, 0.0], [10792.0, 0.0], [10840.0, 0.0], [11084.0, 0.0], [11120.0, 0.0], [10796.0, 0.0], [10808.0, 0.0], [10880.0, 0.0], [10892.0, 0.0], [10984.0, 0.0], [10900.0, 0.0], [10996.0, 0.0], [11040.0, 0.0], [11160.0, 0.0], [10772.0, 0.0], [10784.0, 0.0], [11264.0, 0.0], [11392.0, 0.0], [11412.0, 0.0], [11616.0, 0.0], [11540.0, 0.0], [11288.0, 0.0], [8559.0, 0.0], [8447.0, 0.0], [9159.0, 0.0], [8767.0, 0.0], [9199.0, 0.0], [9631.0, 0.0], [9675.0, 0.0], [9275.0, 0.0], [9667.0, 0.0], [10171.0, 0.0], [9991.0, 0.0], [9995.0, 0.0], [10079.0, 0.0], [10239.0, 0.0], [10235.0, 0.0], [9883.0, 0.0], [9927.0, 0.0], [9979.0, 0.0], [10103.0, 0.0], [10107.0, 0.0], [10143.0, 0.0], [10139.0, 0.0], [10631.0, 0.0], [10747.0, 0.0], [10323.0, 0.0], [10335.0, 0.0], [10311.0, 0.0], [10319.0, 0.0], [10559.0, 0.0], [10543.0, 0.0], [10711.0, 0.0], [10667.0, 0.0], [10691.0, 0.0], [10643.0, 0.0], [10719.0, 0.0], [10283.0, 0.0], [10567.0, 0.0], [10479.0, 0.0], [10399.0, 0.0], [10451.0, 0.0], [10431.0, 0.0], [10419.0, 0.0], [10375.0, 0.0], [10579.0, 0.0], [10587.0, 0.0], [10615.0, 0.0], [10591.0, 0.0], [11207.0, 0.0], [11223.0, 0.0], [11039.0, 0.0], [11215.0, 0.0], [11103.0, 0.0], [11127.0, 0.0], [11111.0, 0.0], [10899.0, 0.0], [10919.0, 0.0], [10915.0, 0.0], [10927.0, 0.0], [10955.0, 0.0], [10967.0, 0.0], [10763.0, 0.0], [10755.0, 0.0], [10815.0, 0.0], [10867.0, 0.0], [10831.0, 0.0], [11067.0, 0.0], [11195.0, 0.0], [11171.0, 0.0], [11343.0, 0.0], [11279.0, 0.0], [11463.0, 0.0], [17934.0, 0.0], [5191.0, 0.0], [7555.0, 0.0], [8063.0, 0.0], [8035.0, 0.0], [8518.0, 0.0], [8474.0, 0.0], [9114.0, 0.0], [9214.0, 0.0], [8958.0, 0.0], [8966.0, 0.0], [8822.0, 0.0], [8786.0, 0.0], [9502.0, 0.0], [9458.0, 0.0], [9690.0, 0.0], [9526.0, 0.0], [9462.0, 0.0], [9590.0, 0.0], [10210.0, 0.0], [10170.0, 0.0], [10194.0, 0.0], [10198.0, 0.0], [9958.0, 0.0], [10058.0, 0.0], [10234.0, 0.0], [10230.0, 0.0], [9922.0, 0.0], [9930.0, 0.0], [10110.0, 0.0], [10638.0, 0.0], [10302.0, 0.0], [10286.0, 0.0], [10626.0, 0.0], [10554.0, 0.0], [10538.0, 0.0], [10534.0, 0.0], [10558.0, 0.0], [10562.0, 0.0], [10658.0, 0.0], [10686.0, 0.0], [10730.0, 0.0], [10746.0, 0.0], [10522.0, 0.0], [10254.0, 0.0], [10250.0, 0.0], [10258.0, 0.0], [10262.0, 0.0], [10406.0, 0.0], [10474.0, 0.0], [10462.0, 0.0], [10458.0, 0.0], [10430.0, 0.0], [10410.0, 0.0], [10614.0, 0.0], [10578.0, 0.0], [10818.0, 0.0], [11122.0, 0.0], [10806.0, 0.0], [10938.0, 0.0], [10754.0, 0.0], [10762.0, 0.0], [11166.0, 0.0], [11138.0, 0.0], [11038.0, 0.0], [11022.0, 0.0], [11190.0, 0.0], [11186.0, 0.0], [11082.0, 0.0], [10790.0, 0.0], [10778.0, 0.0], [11386.0, 0.0], [11362.0, 0.0], [11382.0, 0.0], [11638.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 17934.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 535.9166666666666, "minX": 1.74715296E12, "maxY": 10638.716666666667, "series": [{"data": [[1.74715326E12, 10009.033333333333], [1.74715308E12, 10638.716666666667], [1.7471532E12, 10121.333333333334], [1.74715302E12, 10171.35], [1.74715314E12, 10543.383333333333], [1.74715296E12, 535.9166666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74715326E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 531.85, "minX": 1.74715296E12, "maxY": 10638.75, "series": [{"data": [[1.74715326E12, 10025.266666666666], [1.74715308E12, 10638.75], [1.7471532E12, 10121.583333333334], [1.74715302E12, 10158.85], [1.74715314E12, 10543.433333333332], [1.74715296E12, 531.85]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74715326E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 200.0, "minX": 1.74715296E12, "maxY": 5321.95, "series": [{"data": [[1.74715326E12, 5028.333333333333], [1.74715308E12, 5321.95], [1.7471532E12, 5064.216666666666], [1.74715302E12, 5077.4], [1.74715314E12, 5269.033333333334], [1.74715296E12, 200.0]], "isOverall": false, "label": "AMQP Consumer-success", "isController": false}, {"data": [[1.74715326E12, 4996.933333333333], [1.74715308E12, 5316.8], [1.7471532E12, 5057.366666666667], [1.74715302E12, 5081.45], [1.74715314E12, 5274.4], [1.74715296E12, 331.85]], "isOverall": false, "label": "AMQP Publisher-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74715326E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 531.85, "minX": 1.74715296E12, "maxY": 10638.75, "series": [{"data": [[1.74715326E12, 10025.266666666666], [1.74715308E12, 10638.75], [1.7471532E12, 10121.583333333334], [1.74715302E12, 10158.85], [1.74715314E12, 10543.433333333332], [1.74715296E12, 531.85]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74715326E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


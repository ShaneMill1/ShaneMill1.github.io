/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 251.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 0.0], [7.1, 0.0], [7.2, 0.0], [7.3, 0.0], [7.4, 0.0], [7.5, 0.0], [7.6, 0.0], [7.7, 0.0], [7.8, 0.0], [7.9, 0.0], [8.0, 0.0], [8.1, 0.0], [8.2, 0.0], [8.3, 0.0], [8.4, 0.0], [8.5, 0.0], [8.6, 0.0], [8.7, 0.0], [8.8, 0.0], [8.9, 0.0], [9.0, 0.0], [9.1, 0.0], [9.2, 0.0], [9.3, 0.0], [9.4, 0.0], [9.5, 0.0], [9.6, 0.0], [9.7, 0.0], [9.8, 0.0], [9.9, 0.0], [10.0, 0.0], [10.1, 0.0], [10.2, 0.0], [10.3, 0.0], [10.4, 0.0], [10.5, 0.0], [10.6, 0.0], [10.7, 0.0], [10.8, 0.0], [10.9, 0.0], [11.0, 0.0], [11.1, 0.0], [11.2, 0.0], [11.3, 0.0], [11.4, 0.0], [11.5, 0.0], [11.6, 0.0], [11.7, 0.0], [11.8, 0.0], [11.9, 0.0], [12.0, 0.0], [12.1, 0.0], [12.2, 0.0], [12.3, 0.0], [12.4, 0.0], [12.5, 0.0], [12.6, 0.0], [12.7, 0.0], [12.8, 0.0], [12.9, 0.0], [13.0, 0.0], [13.1, 0.0], [13.2, 0.0], [13.3, 0.0], [13.4, 0.0], [13.5, 0.0], [13.6, 0.0], [13.7, 0.0], [13.8, 0.0], [13.9, 0.0], [14.0, 0.0], [14.1, 0.0], [14.2, 0.0], [14.3, 0.0], [14.4, 0.0], [14.5, 0.0], [14.6, 0.0], [14.7, 0.0], [14.8, 0.0], [14.9, 0.0], [15.0, 0.0], [15.1, 0.0], [15.2, 0.0], [15.3, 0.0], [15.4, 0.0], [15.5, 0.0], [15.6, 0.0], [15.7, 0.0], [15.8, 0.0], [15.9, 0.0], [16.0, 0.0], [16.1, 0.0], [16.2, 0.0], [16.3, 0.0], [16.4, 0.0], [16.5, 0.0], [16.6, 0.0], [16.7, 0.0], [16.8, 0.0], [16.9, 0.0], [17.0, 0.0], [17.1, 0.0], [17.2, 0.0], [17.3, 0.0], [17.4, 0.0], [17.5, 0.0], [17.6, 0.0], [17.7, 0.0], [17.8, 0.0], [17.9, 0.0], [18.0, 0.0], [18.1, 0.0], [18.2, 0.0], [18.3, 0.0], [18.4, 0.0], [18.5, 0.0], [18.6, 0.0], [18.7, 0.0], [18.8, 0.0], [18.9, 0.0], [19.0, 0.0], [19.1, 0.0], [19.2, 0.0], [19.3, 0.0], [19.4, 0.0], [19.5, 0.0], [19.6, 0.0], [19.7, 0.0], [19.8, 0.0], [19.9, 0.0], [20.0, 0.0], [20.1, 0.0], [20.2, 0.0], [20.3, 0.0], [20.4, 0.0], [20.5, 0.0], [20.6, 0.0], [20.7, 0.0], [20.8, 0.0], [20.9, 0.0], [21.0, 0.0], [21.1, 0.0], [21.2, 0.0], [21.3, 0.0], [21.4, 0.0], [21.5, 0.0], [21.6, 0.0], [21.7, 0.0], [21.8, 0.0], [21.9, 0.0], [22.0, 0.0], [22.1, 0.0], [22.2, 0.0], [22.3, 0.0], [22.4, 0.0], [22.5, 0.0], [22.6, 0.0], [22.7, 0.0], [22.8, 0.0], [22.9, 0.0], [23.0, 0.0], [23.1, 0.0], [23.2, 0.0], [23.3, 0.0], [23.4, 0.0], [23.5, 0.0], [23.6, 0.0], [23.7, 0.0], [23.8, 0.0], [23.9, 0.0], [24.0, 0.0], [24.1, 0.0], [24.2, 0.0], [24.3, 0.0], [24.4, 0.0], [24.5, 0.0], [24.6, 0.0], [24.7, 0.0], [24.8, 0.0], [24.9, 0.0], [25.0, 0.0], [25.1, 0.0], [25.2, 0.0], [25.3, 0.0], [25.4, 0.0], [25.5, 0.0], [25.6, 0.0], [25.7, 0.0], [25.8, 0.0], [25.9, 0.0], [26.0, 0.0], [26.1, 0.0], [26.2, 0.0], [26.3, 0.0], [26.4, 0.0], [26.5, 0.0], [26.6, 0.0], [26.7, 0.0], [26.8, 0.0], [26.9, 0.0], [27.0, 0.0], [27.1, 0.0], [27.2, 0.0], [27.3, 0.0], [27.4, 0.0], [27.5, 0.0], [27.6, 0.0], [27.7, 0.0], [27.8, 0.0], [27.9, 0.0], [28.0, 0.0], [28.1, 0.0], [28.2, 0.0], [28.3, 0.0], [28.4, 0.0], [28.5, 0.0], [28.6, 0.0], [28.7, 0.0], [28.8, 0.0], [28.9, 0.0], [29.0, 0.0], [29.1, 0.0], [29.2, 0.0], [29.3, 0.0], [29.4, 0.0], [29.5, 0.0], [29.6, 0.0], [29.7, 0.0], [29.8, 0.0], [29.9, 0.0], [30.0, 0.0], [30.1, 0.0], [30.2, 0.0], [30.3, 0.0], [30.4, 0.0], [30.5, 0.0], [30.6, 0.0], [30.7, 0.0], [30.8, 0.0], [30.9, 0.0], [31.0, 0.0], [31.1, 0.0], [31.2, 0.0], [31.3, 0.0], [31.4, 0.0], [31.5, 0.0], [31.6, 0.0], [31.7, 0.0], [31.8, 0.0], [31.9, 0.0], [32.0, 0.0], [32.1, 0.0], [32.2, 0.0], [32.3, 0.0], [32.4, 0.0], [32.5, 0.0], [32.6, 0.0], [32.7, 0.0], [32.8, 0.0], [32.9, 0.0], [33.0, 0.0], [33.1, 0.0], [33.2, 0.0], [33.3, 0.0], [33.4, 0.0], [33.5, 0.0], [33.6, 0.0], [33.7, 0.0], [33.8, 0.0], [33.9, 0.0], [34.0, 0.0], [34.1, 0.0], [34.2, 0.0], [34.3, 0.0], [34.4, 0.0], [34.5, 0.0], [34.6, 0.0], [34.7, 0.0], [34.8, 0.0], [34.9, 0.0], [35.0, 0.0], [35.1, 0.0], [35.2, 0.0], [35.3, 0.0], [35.4, 0.0], [35.5, 0.0], [35.6, 0.0], [35.7, 0.0], [35.8, 0.0], [35.9, 0.0], [36.0, 0.0], [36.1, 0.0], [36.2, 0.0], [36.3, 0.0], [36.4, 0.0], [36.5, 0.0], [36.6, 0.0], [36.7, 0.0], [36.8, 0.0], [36.9, 0.0], [37.0, 0.0], [37.1, 0.0], [37.2, 0.0], [37.3, 0.0], [37.4, 0.0], [37.5, 0.0], [37.6, 0.0], [37.7, 0.0], [37.8, 0.0], [37.9, 0.0], [38.0, 0.0], [38.1, 0.0], [38.2, 0.0], [38.3, 0.0], [38.4, 0.0], [38.5, 0.0], [38.6, 0.0], [38.7, 0.0], [38.8, 0.0], [38.9, 0.0], [39.0, 0.0], [39.1, 0.0], [39.2, 0.0], [39.3, 0.0], [39.4, 0.0], [39.5, 0.0], [39.6, 0.0], [39.7, 0.0], [39.8, 0.0], [39.9, 0.0], [40.0, 0.0], [40.1, 0.0], [40.2, 0.0], [40.3, 0.0], [40.4, 0.0], [40.5, 0.0], [40.6, 0.0], [40.7, 0.0], [40.8, 0.0], [40.9, 0.0], [41.0, 0.0], [41.1, 0.0], [41.2, 0.0], [41.3, 0.0], [41.4, 0.0], [41.5, 0.0], [41.6, 0.0], [41.7, 0.0], [41.8, 0.0], [41.9, 0.0], [42.0, 0.0], [42.1, 0.0], [42.2, 0.0], [42.3, 0.0], [42.4, 0.0], [42.5, 0.0], [42.6, 0.0], [42.7, 0.0], [42.8, 0.0], [42.9, 0.0], [43.0, 0.0], [43.1, 0.0], [43.2, 0.0], [43.3, 0.0], [43.4, 0.0], [43.5, 0.0], [43.6, 0.0], [43.7, 0.0], [43.8, 0.0], [43.9, 0.0], [44.0, 0.0], [44.1, 0.0], [44.2, 0.0], [44.3, 0.0], [44.4, 0.0], [44.5, 0.0], [44.6, 0.0], [44.7, 0.0], [44.8, 0.0], [44.9, 0.0], [45.0, 0.0], [45.1, 0.0], [45.2, 0.0], [45.3, 0.0], [45.4, 0.0], [45.5, 0.0], [45.6, 0.0], [45.7, 0.0], [45.8, 0.0], [45.9, 0.0], [46.0, 0.0], [46.1, 0.0], [46.2, 0.0], [46.3, 0.0], [46.4, 0.0], [46.5, 0.0], [46.6, 0.0], [46.7, 0.0], [46.8, 0.0], [46.9, 0.0], [47.0, 0.0], [47.1, 0.0], [47.2, 0.0], [47.3, 0.0], [47.4, 0.0], [47.5, 0.0], [47.6, 0.0], [47.7, 0.0], [47.8, 0.0], [47.9, 0.0], [48.0, 0.0], [48.1, 0.0], [48.2, 0.0], [48.3, 0.0], [48.4, 0.0], [48.5, 0.0], [48.6, 0.0], [48.7, 0.0], [48.8, 0.0], [48.9, 0.0], [49.0, 0.0], [49.1, 0.0], [49.2, 0.0], [49.3, 0.0], [49.4, 0.0], [49.5, 0.0], [49.6, 0.0], [49.7, 0.0], [49.8, 0.0], [49.9, 0.0], [50.0, 0.0], [50.1, 0.0], [50.2, 0.0], [50.3, 0.0], [50.4, 0.0], [50.5, 0.0], [50.6, 0.0], [50.7, 0.0], [50.8, 0.0], [50.9, 0.0], [51.0, 0.0], [51.1, 0.0], [51.2, 0.0], [51.3, 0.0], [51.4, 0.0], [51.5, 0.0], [51.6, 0.0], [51.7, 0.0], [51.8, 0.0], [51.9, 0.0], [52.0, 0.0], [52.1, 0.0], [52.2, 0.0], [52.3, 0.0], [52.4, 0.0], [52.5, 0.0], [52.6, 0.0], [52.7, 0.0], [52.8, 0.0], [52.9, 0.0], [53.0, 0.0], [53.1, 0.0], [53.2, 0.0], [53.3, 0.0], [53.4, 0.0], [53.5, 0.0], [53.6, 0.0], [53.7, 0.0], [53.8, 0.0], [53.9, 0.0], [54.0, 0.0], [54.1, 0.0], [54.2, 0.0], [54.3, 0.0], [54.4, 0.0], [54.5, 0.0], [54.6, 0.0], [54.7, 0.0], [54.8, 0.0], [54.9, 0.0], [55.0, 0.0], [55.1, 0.0], [55.2, 0.0], [55.3, 0.0], [55.4, 0.0], [55.5, 0.0], [55.6, 0.0], [55.7, 0.0], [55.8, 0.0], [55.9, 0.0], [56.0, 0.0], [56.1, 0.0], [56.2, 0.0], [56.3, 0.0], [56.4, 0.0], [56.5, 0.0], [56.6, 0.0], [56.7, 0.0], [56.8, 0.0], [56.9, 0.0], [57.0, 0.0], [57.1, 0.0], [57.2, 0.0], [57.3, 0.0], [57.4, 0.0], [57.5, 0.0], [57.6, 0.0], [57.7, 0.0], [57.8, 0.0], [57.9, 0.0], [58.0, 0.0], [58.1, 0.0], [58.2, 0.0], [58.3, 0.0], [58.4, 0.0], [58.5, 0.0], [58.6, 0.0], [58.7, 0.0], [58.8, 0.0], [58.9, 0.0], [59.0, 0.0], [59.1, 0.0], [59.2, 0.0], [59.3, 0.0], [59.4, 0.0], [59.5, 0.0], [59.6, 0.0], [59.7, 0.0], [59.8, 0.0], [59.9, 0.0], [60.0, 0.0], [60.1, 0.0], [60.2, 0.0], [60.3, 0.0], [60.4, 0.0], [60.5, 0.0], [60.6, 0.0], [60.7, 0.0], [60.8, 0.0], [60.9, 0.0], [61.0, 0.0], [61.1, 0.0], [61.2, 0.0], [61.3, 0.0], [61.4, 0.0], [61.5, 0.0], [61.6, 0.0], [61.7, 0.0], [61.8, 0.0], [61.9, 0.0], [62.0, 0.0], [62.1, 0.0], [62.2, 0.0], [62.3, 0.0], [62.4, 0.0], [62.5, 0.0], [62.6, 0.0], [62.7, 0.0], [62.8, 0.0], [62.9, 0.0], [63.0, 0.0], [63.1, 0.0], [63.2, 0.0], [63.3, 0.0], [63.4, 0.0], [63.5, 0.0], [63.6, 0.0], [63.7, 0.0], [63.8, 0.0], [63.9, 0.0], [64.0, 0.0], [64.1, 0.0], [64.2, 0.0], [64.3, 0.0], [64.4, 0.0], [64.5, 0.0], [64.6, 0.0], [64.7, 0.0], [64.8, 0.0], [64.9, 0.0], [65.0, 0.0], [65.1, 0.0], [65.2, 0.0], [65.3, 0.0], [65.4, 0.0], [65.5, 0.0], [65.6, 0.0], [65.7, 0.0], [65.8, 0.0], [65.9, 0.0], [66.0, 0.0], [66.1, 0.0], [66.2, 0.0], [66.3, 0.0], [66.4, 0.0], [66.5, 0.0], [66.6, 0.0], [66.7, 0.0], [66.8, 0.0], [66.9, 0.0], [67.0, 0.0], [67.1, 0.0], [67.2, 0.0], [67.3, 0.0], [67.4, 0.0], [67.5, 0.0], [67.6, 0.0], [67.7, 0.0], [67.8, 0.0], [67.9, 0.0], [68.0, 0.0], [68.1, 0.0], [68.2, 0.0], [68.3, 0.0], [68.4, 0.0], [68.5, 0.0], [68.6, 0.0], [68.7, 0.0], [68.8, 0.0], [68.9, 0.0], [69.0, 0.0], [69.1, 0.0], [69.2, 0.0], [69.3, 0.0], [69.4, 0.0], [69.5, 0.0], [69.6, 0.0], [69.7, 0.0], [69.8, 0.0], [69.9, 0.0], [70.0, 0.0], [70.1, 0.0], [70.2, 0.0], [70.3, 0.0], [70.4, 0.0], [70.5, 0.0], [70.6, 0.0], [70.7, 0.0], [70.8, 0.0], [70.9, 0.0], [71.0, 0.0], [71.1, 0.0], [71.2, 0.0], [71.3, 0.0], [71.4, 0.0], [71.5, 0.0], [71.6, 0.0], [71.7, 0.0], [71.8, 0.0], [71.9, 0.0], [72.0, 0.0], [72.1, 0.0], [72.2, 0.0], [72.3, 0.0], [72.4, 0.0], [72.5, 0.0], [72.6, 0.0], [72.7, 0.0], [72.8, 0.0], [72.9, 0.0], [73.0, 0.0], [73.1, 0.0], [73.2, 0.0], [73.3, 0.0], [73.4, 0.0], [73.5, 0.0], [73.6, 0.0], [73.7, 0.0], [73.8, 0.0], [73.9, 0.0], [74.0, 0.0], [74.1, 0.0], [74.2, 0.0], [74.3, 0.0], [74.4, 0.0], [74.5, 0.0], [74.6, 0.0], [74.7, 0.0], [74.8, 0.0], [74.9, 0.0], [75.0, 0.0], [75.1, 0.0], [75.2, 0.0], [75.3, 0.0], [75.4, 0.0], [75.5, 0.0], [75.6, 0.0], [75.7, 0.0], [75.8, 0.0], [75.9, 0.0], [76.0, 0.0], [76.1, 0.0], [76.2, 0.0], [76.3, 0.0], [76.4, 0.0], [76.5, 0.0], [76.6, 0.0], [76.7, 0.0], [76.8, 0.0], [76.9, 0.0], [77.0, 0.0], [77.1, 0.0], [77.2, 0.0], [77.3, 0.0], [77.4, 0.0], [77.5, 0.0], [77.6, 0.0], [77.7, 0.0], [77.8, 0.0], [77.9, 0.0], [78.0, 0.0], [78.1, 0.0], [78.2, 0.0], [78.3, 0.0], [78.4, 0.0], [78.5, 0.0], [78.6, 0.0], [78.7, 0.0], [78.8, 0.0], [78.9, 0.0], [79.0, 0.0], [79.1, 0.0], [79.2, 0.0], [79.3, 0.0], [79.4, 0.0], [79.5, 0.0], [79.6, 0.0], [79.7, 0.0], [79.8, 0.0], [79.9, 0.0], [80.0, 0.0], [80.1, 0.0], [80.2, 0.0], [80.3, 0.0], [80.4, 0.0], [80.5, 0.0], [80.6, 0.0], [80.7, 0.0], [80.8, 0.0], [80.9, 0.0], [81.0, 0.0], [81.1, 0.0], [81.2, 0.0], [81.3, 0.0], [81.4, 0.0], [81.5, 0.0], [81.6, 0.0], [81.7, 0.0], [81.8, 0.0], [81.9, 0.0], [82.0, 0.0], [82.1, 0.0], [82.2, 0.0], [82.3, 0.0], [82.4, 0.0], [82.5, 0.0], [82.6, 0.0], [82.7, 0.0], [82.8, 0.0], [82.9, 0.0], [83.0, 0.0], [83.1, 0.0], [83.2, 0.0], [83.3, 0.0], [83.4, 0.0], [83.5, 0.0], [83.6, 0.0], [83.7, 0.0], [83.8, 0.0], [83.9, 0.0], [84.0, 0.0], [84.1, 0.0], [84.2, 0.0], [84.3, 0.0], [84.4, 0.0], [84.5, 0.0], [84.6, 0.0], [84.7, 0.0], [84.8, 0.0], [84.9, 0.0], [85.0, 0.0], [85.1, 0.0], [85.2, 0.0], [85.3, 0.0], [85.4, 0.0], [85.5, 0.0], [85.6, 0.0], [85.7, 0.0], [85.8, 0.0], [85.9, 0.0], [86.0, 0.0], [86.1, 0.0], [86.2, 0.0], [86.3, 0.0], [86.4, 0.0], [86.5, 0.0], [86.6, 0.0], [86.7, 0.0], [86.8, 0.0], [86.9, 0.0], [87.0, 0.0], [87.1, 0.0], [87.2, 0.0], [87.3, 0.0], [87.4, 0.0], [87.5, 0.0], [87.6, 0.0], [87.7, 0.0], [87.8, 0.0], [87.9, 0.0], [88.0, 0.0], [88.1, 0.0], [88.2, 0.0], [88.3, 0.0], [88.4, 0.0], [88.5, 0.0], [88.6, 0.0], [88.7, 0.0], [88.8, 0.0], [88.9, 0.0], [89.0, 0.0], [89.1, 0.0], [89.2, 0.0], [89.3, 0.0], [89.4, 0.0], [89.5, 0.0], [89.6, 0.0], [89.7, 0.0], [89.8, 0.0], [89.9, 0.0], [90.0, 0.0], [90.1, 0.0], [90.2, 0.0], [90.3, 0.0], [90.4, 0.0], [90.5, 0.0], [90.6, 0.0], [90.7, 0.0], [90.8, 0.0], [90.9, 0.0], [91.0, 0.0], [91.1, 0.0], [91.2, 0.0], [91.3, 0.0], [91.4, 0.0], [91.5, 0.0], [91.6, 0.0], [91.7, 0.0], [91.8, 0.0], [91.9, 0.0], [92.0, 0.0], [92.1, 0.0], [92.2, 0.0], [92.3, 0.0], [92.4, 0.0], [92.5, 0.0], [92.6, 0.0], [92.7, 0.0], [92.8, 0.0], [92.9, 0.0], [93.0, 0.0], [93.1, 0.0], [93.2, 0.0], [93.3, 0.0], [93.4, 0.0], [93.5, 0.0], [93.6, 0.0], [93.7, 0.0], [93.8, 0.0], [93.9, 0.0], [94.0, 0.0], [94.1, 0.0], [94.2, 0.0], [94.3, 0.0], [94.4, 0.0], [94.5, 0.0], [94.6, 0.0], [94.7, 0.0], [94.8, 0.0], [94.9, 0.0], [95.0, 0.0], [95.1, 0.0], [95.2, 0.0], [95.3, 0.0], [95.4, 0.0], [95.5, 0.0], [95.6, 0.0], [95.7, 0.0], [95.8, 0.0], [95.9, 0.0], [96.0, 0.0], [96.1, 0.0], [96.2, 0.0], [96.3, 0.0], [96.4, 0.0], [96.5, 0.0], [96.6, 0.0], [96.7, 0.0], [96.8, 0.0], [96.9, 0.0], [97.0, 0.0], [97.1, 0.0], [97.2, 0.0], [97.3, 0.0], [97.4, 0.0], [97.5, 0.0], [97.6, 0.0], [97.7, 0.0], [97.8, 0.0], [97.9, 0.0], [98.0, 0.0], [98.1, 0.0], [98.2, 0.0], [98.3, 0.0], [98.4, 0.0], [98.5, 0.0], [98.6, 0.0], [98.7, 1.0], [98.8, 1.0], [98.9, 1.0], [99.0, 1.0], [99.1, 1.0], [99.2, 1.0], [99.3, 1.0], [99.4, 1.0], [99.5, 1.0], [99.6, 1.0], [99.7, 1.0], [99.8, 1.0], [99.9, 125.0]], "isOverall": false, "label": "AMQP Publisher", "isController": false}, {"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 2.0], [0.4, 4.0], [0.5, 7.0], [0.6, 10.0], [0.7, 13.0], [0.8, 16.0], [0.9, 18.0], [1.0, 20.0], [1.1, 22.0], [1.2, 24.0], [1.3, 28.0], [1.4, 31.0], [1.5, 35.0], [1.6, 40.0], [1.7, 43.0], [1.8, 44.0], [1.9, 46.0], [2.0, 49.0], [2.1, 51.0], [2.2, 54.0], [2.3, 57.0], [2.4, 60.0], [2.5, 62.0], [2.6, 65.0], [2.7, 67.0], [2.8, 70.0], [2.9, 72.0], [3.0, 74.0], [3.1, 75.0], [3.2, 77.0], [3.3, 78.0], [3.4, 79.0], [3.5, 80.0], [3.6, 81.0], [3.7, 82.0], [3.8, 83.0], [3.9, 83.0], [4.0, 84.0], [4.1, 85.0], [4.2, 85.0], [4.3, 86.0], [4.4, 86.0], [4.5, 86.0], [4.6, 87.0], [4.7, 87.0], [4.8, 88.0], [4.9, 88.0], [5.0, 88.0], [5.1, 89.0], [5.2, 89.0], [5.3, 89.0], [5.4, 89.0], [5.5, 90.0], [5.6, 90.0], [5.7, 90.0], [5.8, 90.0], [5.9, 91.0], [6.0, 91.0], [6.1, 91.0], [6.2, 91.0], [6.3, 91.0], [6.4, 92.0], [6.5, 92.0], [6.6, 92.0], [6.7, 92.0], [6.8, 92.0], [6.9, 92.0], [7.0, 93.0], [7.1, 93.0], [7.2, 93.0], [7.3, 93.0], [7.4, 93.0], [7.5, 93.0], [7.6, 94.0], [7.7, 94.0], [7.8, 94.0], [7.9, 94.0], [8.0, 94.0], [8.1, 94.0], [8.2, 94.0], [8.3, 94.0], [8.4, 95.0], [8.5, 95.0], [8.6, 95.0], [8.7, 95.0], [8.8, 95.0], [8.9, 95.0], [9.0, 95.0], [9.1, 95.0], [9.2, 95.0], [9.3, 96.0], [9.4, 96.0], [9.5, 96.0], [9.6, 96.0], [9.7, 96.0], [9.8, 96.0], [9.9, 96.0], [10.0, 96.0], [10.1, 96.0], [10.2, 96.0], [10.3, 97.0], [10.4, 97.0], [10.5, 97.0], [10.6, 97.0], [10.7, 97.0], [10.8, 97.0], [10.9, 97.0], [11.0, 97.0], [11.1, 97.0], [11.2, 97.0], [11.3, 97.0], [11.4, 97.0], [11.5, 98.0], [11.6, 98.0], [11.7, 98.0], [11.8, 98.0], [11.9, 98.0], [12.0, 98.0], [12.1, 98.0], [12.2, 98.0], [12.3, 98.0], [12.4, 98.0], [12.5, 98.0], [12.6, 98.0], [12.7, 98.0], [12.8, 98.0], [12.9, 98.0], [13.0, 99.0], [13.1, 99.0], [13.2, 99.0], [13.3, 99.0], [13.4, 99.0], [13.5, 99.0], [13.6, 99.0], [13.7, 99.0], [13.8, 99.0], [13.9, 99.0], [14.0, 99.0], [14.1, 99.0], [14.2, 99.0], [14.3, 99.0], [14.4, 99.0], [14.5, 99.0], [14.6, 100.0], [14.7, 100.0], [14.8, 100.0], [14.9, 100.0], [15.0, 100.0], [15.1, 100.0], [15.2, 100.0], [15.3, 100.0], [15.4, 100.0], [15.5, 100.0], [15.6, 100.0], [15.7, 100.0], [15.8, 100.0], [15.9, 100.0], [16.0, 100.0], [16.1, 100.0], [16.2, 100.0], [16.3, 100.0], [16.4, 100.0], [16.5, 101.0], [16.6, 101.0], [16.7, 101.0], [16.8, 101.0], [16.9, 101.0], [17.0, 101.0], [17.1, 101.0], [17.2, 101.0], [17.3, 101.0], [17.4, 101.0], [17.5, 101.0], [17.6, 101.0], [17.7, 101.0], [17.8, 101.0], [17.9, 101.0], [18.0, 101.0], [18.1, 101.0], [18.2, 101.0], [18.3, 101.0], [18.4, 101.0], [18.5, 101.0], [18.6, 102.0], [18.7, 102.0], [18.8, 102.0], [18.9, 102.0], [19.0, 102.0], [19.1, 102.0], [19.2, 102.0], [19.3, 102.0], [19.4, 102.0], [19.5, 102.0], [19.6, 102.0], [19.7, 102.0], [19.8, 102.0], [19.9, 102.0], [20.0, 102.0], [20.1, 102.0], [20.2, 102.0], [20.3, 102.0], [20.4, 102.0], [20.5, 102.0], [20.6, 102.0], [20.7, 102.0], [20.8, 102.0], [20.9, 102.0], [21.0, 102.0], [21.1, 103.0], [21.2, 103.0], [21.3, 103.0], [21.4, 103.0], [21.5, 103.0], [21.6, 103.0], [21.7, 103.0], [21.8, 103.0], [21.9, 103.0], [22.0, 103.0], [22.1, 103.0], [22.2, 103.0], [22.3, 103.0], [22.4, 103.0], [22.5, 103.0], [22.6, 103.0], [22.7, 103.0], [22.8, 103.0], [22.9, 103.0], [23.0, 103.0], [23.1, 103.0], [23.2, 103.0], [23.3, 103.0], [23.4, 103.0], [23.5, 103.0], [23.6, 103.0], [23.7, 103.0], [23.8, 103.0], [23.9, 104.0], [24.0, 104.0], [24.1, 104.0], [24.2, 104.0], [24.3, 104.0], [24.4, 104.0], [24.5, 104.0], [24.6, 104.0], [24.7, 104.0], [24.8, 104.0], [24.9, 104.0], [25.0, 104.0], [25.1, 104.0], [25.2, 104.0], [25.3, 104.0], [25.4, 104.0], [25.5, 104.0], [25.6, 104.0], [25.7, 104.0], [25.8, 104.0], [25.9, 104.0], [26.0, 104.0], [26.1, 104.0], [26.2, 104.0], [26.3, 104.0], [26.4, 104.0], [26.5, 104.0], [26.6, 104.0], [26.7, 104.0], [26.8, 104.0], [26.9, 105.0], [27.0, 105.0], [27.1, 105.0], [27.2, 105.0], [27.3, 105.0], [27.4, 105.0], [27.5, 105.0], [27.6, 105.0], [27.7, 105.0], [27.8, 105.0], [27.9, 105.0], [28.0, 105.0], [28.1, 105.0], [28.2, 105.0], [28.3, 105.0], [28.4, 105.0], [28.5, 105.0], [28.6, 105.0], [28.7, 105.0], [28.8, 105.0], [28.9, 105.0], [29.0, 105.0], [29.1, 105.0], [29.2, 105.0], [29.3, 105.0], [29.4, 105.0], [29.5, 105.0], [29.6, 105.0], [29.7, 105.0], [29.8, 105.0], [29.9, 105.0], [30.0, 105.0], [30.1, 105.0], [30.2, 106.0], [30.3, 106.0], [30.4, 106.0], [30.5, 106.0], [30.6, 106.0], [30.7, 106.0], [30.8, 106.0], [30.9, 106.0], [31.0, 106.0], [31.1, 106.0], [31.2, 106.0], [31.3, 106.0], [31.4, 106.0], [31.5, 106.0], [31.6, 106.0], [31.7, 106.0], [31.8, 106.0], [31.9, 106.0], [32.0, 106.0], [32.1, 106.0], [32.2, 106.0], [32.3, 106.0], [32.4, 106.0], [32.5, 106.0], [32.6, 106.0], [32.7, 106.0], [32.8, 106.0], [32.9, 106.0], [33.0, 106.0], [33.1, 106.0], [33.2, 106.0], [33.3, 106.0], [33.4, 106.0], [33.5, 106.0], [33.6, 106.0], [33.7, 106.0], [33.8, 107.0], [33.9, 107.0], [34.0, 107.0], [34.1, 107.0], [34.2, 107.0], [34.3, 107.0], [34.4, 107.0], [34.5, 107.0], [34.6, 107.0], [34.7, 107.0], [34.8, 107.0], [34.9, 107.0], [35.0, 107.0], [35.1, 107.0], [35.2, 107.0], [35.3, 107.0], [35.4, 107.0], [35.5, 107.0], [35.6, 107.0], [35.7, 107.0], [35.8, 107.0], [35.9, 107.0], [36.0, 107.0], [36.1, 107.0], [36.2, 107.0], [36.3, 107.0], [36.4, 107.0], [36.5, 107.0], [36.6, 107.0], [36.7, 107.0], [36.8, 107.0], [36.9, 107.0], [37.0, 107.0], [37.1, 107.0], [37.2, 107.0], [37.3, 107.0], [37.4, 107.0], [37.5, 107.0], [37.6, 107.0], [37.7, 107.0], [37.8, 108.0], [37.9, 108.0], [38.0, 108.0], [38.1, 108.0], [38.2, 108.0], [38.3, 108.0], [38.4, 108.0], [38.5, 108.0], [38.6, 108.0], [38.7, 108.0], [38.8, 108.0], [38.9, 108.0], [39.0, 108.0], [39.1, 108.0], [39.2, 108.0], [39.3, 108.0], [39.4, 108.0], [39.5, 108.0], [39.6, 108.0], [39.7, 108.0], [39.8, 108.0], [39.9, 108.0], [40.0, 108.0], [40.1, 108.0], [40.2, 108.0], [40.3, 108.0], [40.4, 108.0], [40.5, 108.0], [40.6, 108.0], [40.7, 108.0], [40.8, 108.0], [40.9, 108.0], [41.0, 108.0], [41.1, 108.0], [41.2, 108.0], [41.3, 108.0], [41.4, 108.0], [41.5, 108.0], [41.6, 108.0], [41.7, 108.0], [41.8, 108.0], [41.9, 109.0], [42.0, 109.0], [42.1, 109.0], [42.2, 109.0], [42.3, 109.0], [42.4, 109.0], [42.5, 109.0], [42.6, 109.0], [42.7, 109.0], [42.8, 109.0], [42.9, 109.0], [43.0, 109.0], [43.1, 109.0], [43.2, 109.0], [43.3, 109.0], [43.4, 109.0], [43.5, 109.0], [43.6, 109.0], [43.7, 109.0], [43.8, 109.0], [43.9, 109.0], [44.0, 109.0], [44.1, 109.0], [44.2, 109.0], [44.3, 109.0], [44.4, 109.0], [44.5, 109.0], [44.6, 109.0], [44.7, 109.0], [44.8, 109.0], [44.9, 109.0], [45.0, 109.0], [45.1, 109.0], [45.2, 109.0], [45.3, 109.0], [45.4, 109.0], [45.5, 109.0], [45.6, 109.0], [45.7, 109.0], [45.8, 109.0], [45.9, 109.0], [46.0, 109.0], [46.1, 110.0], [46.2, 110.0], [46.3, 110.0], [46.4, 110.0], [46.5, 110.0], [46.6, 110.0], [46.7, 110.0], [46.8, 110.0], [46.9, 110.0], [47.0, 110.0], [47.1, 110.0], [47.2, 110.0], [47.3, 110.0], [47.4, 110.0], [47.5, 110.0], [47.6, 110.0], [47.7, 110.0], [47.8, 110.0], [47.9, 110.0], [48.0, 110.0], [48.1, 110.0], [48.2, 110.0], [48.3, 110.0], [48.4, 110.0], [48.5, 110.0], [48.6, 110.0], [48.7, 110.0], [48.8, 110.0], [48.9, 110.0], [49.0, 110.0], [49.1, 110.0], [49.2, 110.0], [49.3, 110.0], [49.4, 110.0], [49.5, 110.0], [49.6, 110.0], [49.7, 110.0], [49.8, 110.0], [49.9, 110.0], [50.0, 110.0], [50.1, 110.0], [50.2, 110.0], [50.3, 111.0], [50.4, 111.0], [50.5, 111.0], [50.6, 111.0], [50.7, 111.0], [50.8, 111.0], [50.9, 111.0], [51.0, 111.0], [51.1, 111.0], [51.2, 111.0], [51.3, 111.0], [51.4, 111.0], [51.5, 111.0], [51.6, 111.0], [51.7, 111.0], [51.8, 111.0], [51.9, 111.0], [52.0, 111.0], [52.1, 111.0], [52.2, 111.0], [52.3, 111.0], [52.4, 111.0], [52.5, 111.0], [52.6, 111.0], [52.7, 111.0], [52.8, 111.0], [52.9, 111.0], [53.0, 111.0], [53.1, 111.0], [53.2, 111.0], [53.3, 111.0], [53.4, 111.0], [53.5, 111.0], [53.6, 111.0], [53.7, 111.0], [53.8, 111.0], [53.9, 111.0], [54.0, 111.0], [54.1, 111.0], [54.2, 111.0], [54.3, 111.0], [54.4, 112.0], [54.5, 112.0], [54.6, 112.0], [54.7, 112.0], [54.8, 112.0], [54.9, 112.0], [55.0, 112.0], [55.1, 112.0], [55.2, 112.0], [55.3, 112.0], [55.4, 112.0], [55.5, 112.0], [55.6, 112.0], [55.7, 112.0], [55.8, 112.0], [55.9, 112.0], [56.0, 112.0], [56.1, 112.0], [56.2, 112.0], [56.3, 112.0], [56.4, 112.0], [56.5, 112.0], [56.6, 112.0], [56.7, 112.0], [56.8, 112.0], [56.9, 112.0], [57.0, 112.0], [57.1, 112.0], [57.2, 112.0], [57.3, 112.0], [57.4, 112.0], [57.5, 112.0], [57.6, 112.0], [57.7, 112.0], [57.8, 112.0], [57.9, 112.0], [58.0, 112.0], [58.1, 112.0], [58.2, 112.0], [58.3, 112.0], [58.4, 112.0], [58.5, 113.0], [58.6, 113.0], [58.7, 113.0], [58.8, 113.0], [58.9, 113.0], [59.0, 113.0], [59.1, 113.0], [59.2, 113.0], [59.3, 113.0], [59.4, 113.0], [59.5, 113.0], [59.6, 113.0], [59.7, 113.0], [59.8, 113.0], [59.9, 113.0], [60.0, 113.0], [60.1, 113.0], [60.2, 113.0], [60.3, 113.0], [60.4, 113.0], [60.5, 113.0], [60.6, 113.0], [60.7, 113.0], [60.8, 113.0], [60.9, 113.0], [61.0, 113.0], [61.1, 113.0], [61.2, 113.0], [61.3, 113.0], [61.4, 113.0], [61.5, 113.0], [61.6, 113.0], [61.7, 113.0], [61.8, 113.0], [61.9, 113.0], [62.0, 113.0], [62.1, 113.0], [62.2, 113.0], [62.3, 113.0], [62.4, 114.0], [62.5, 114.0], [62.6, 114.0], [62.7, 114.0], [62.8, 114.0], [62.9, 114.0], [63.0, 114.0], [63.1, 114.0], [63.2, 114.0], [63.3, 114.0], [63.4, 114.0], [63.5, 114.0], [63.6, 114.0], [63.7, 114.0], [63.8, 114.0], [63.9, 114.0], [64.0, 114.0], [64.1, 114.0], [64.2, 114.0], [64.3, 114.0], [64.4, 114.0], [64.5, 114.0], [64.6, 114.0], [64.7, 114.0], [64.8, 114.0], [64.9, 114.0], [65.0, 114.0], [65.1, 114.0], [65.2, 114.0], [65.3, 114.0], [65.4, 114.0], [65.5, 114.0], [65.6, 114.0], [65.7, 114.0], [65.8, 114.0], [65.9, 114.0], [66.0, 114.0], [66.1, 114.0], [66.2, 114.0], [66.3, 114.0], [66.4, 115.0], [66.5, 115.0], [66.6, 115.0], [66.7, 115.0], [66.8, 115.0], [66.9, 115.0], [67.0, 115.0], [67.1, 115.0], [67.2, 115.0], [67.3, 115.0], [67.4, 115.0], [67.5, 115.0], [67.6, 115.0], [67.7, 115.0], [67.8, 115.0], [67.9, 115.0], [68.0, 115.0], [68.1, 115.0], [68.2, 115.0], [68.3, 115.0], [68.4, 115.0], [68.5, 115.0], [68.6, 115.0], [68.7, 115.0], [68.8, 115.0], [68.9, 115.0], [69.0, 115.0], [69.1, 115.0], [69.2, 115.0], [69.3, 115.0], [69.4, 115.0], [69.5, 115.0], [69.6, 115.0], [69.7, 115.0], [69.8, 115.0], [69.9, 115.0], [70.0, 115.0], [70.1, 115.0], [70.2, 116.0], [70.3, 116.0], [70.4, 116.0], [70.5, 116.0], [70.6, 116.0], [70.7, 116.0], [70.8, 116.0], [70.9, 116.0], [71.0, 116.0], [71.1, 116.0], [71.2, 116.0], [71.3, 116.0], [71.4, 116.0], [71.5, 116.0], [71.6, 116.0], [71.7, 116.0], [71.8, 116.0], [71.9, 116.0], [72.0, 116.0], [72.1, 116.0], [72.2, 116.0], [72.3, 116.0], [72.4, 116.0], [72.5, 116.0], [72.6, 116.0], [72.7, 116.0], [72.8, 116.0], [72.9, 116.0], [73.0, 116.0], [73.1, 116.0], [73.2, 116.0], [73.3, 116.0], [73.4, 116.0], [73.5, 116.0], [73.6, 116.0], [73.7, 117.0], [73.8, 117.0], [73.9, 117.0], [74.0, 117.0], [74.1, 117.0], [74.2, 117.0], [74.3, 117.0], [74.4, 117.0], [74.5, 117.0], [74.6, 117.0], [74.7, 117.0], [74.8, 117.0], [74.9, 117.0], [75.0, 117.0], [75.1, 117.0], [75.2, 117.0], [75.3, 117.0], [75.4, 117.0], [75.5, 117.0], [75.6, 117.0], [75.7, 117.0], [75.8, 117.0], [75.9, 117.0], [76.0, 117.0], [76.1, 117.0], [76.2, 117.0], [76.3, 117.0], [76.4, 117.0], [76.5, 117.0], [76.6, 117.0], [76.7, 117.0], [76.8, 117.0], [76.9, 117.0], [77.0, 118.0], [77.1, 118.0], [77.2, 118.0], [77.3, 118.0], [77.4, 118.0], [77.5, 118.0], [77.6, 118.0], [77.7, 118.0], [77.8, 118.0], [77.9, 118.0], [78.0, 118.0], [78.1, 118.0], [78.2, 118.0], [78.3, 118.0], [78.4, 118.0], [78.5, 118.0], [78.6, 118.0], [78.7, 118.0], [78.8, 118.0], [78.9, 118.0], [79.0, 118.0], [79.1, 118.0], [79.2, 118.0], [79.3, 118.0], [79.4, 118.0], [79.5, 118.0], [79.6, 118.0], [79.7, 118.0], [79.8, 118.0], [79.9, 118.0], [80.0, 119.0], [80.1, 119.0], [80.2, 119.0], [80.3, 119.0], [80.4, 119.0], [80.5, 119.0], [80.6, 119.0], [80.7, 119.0], [80.8, 119.0], [80.9, 119.0], [81.0, 119.0], [81.1, 119.0], [81.2, 119.0], [81.3, 119.0], [81.4, 119.0], [81.5, 119.0], [81.6, 119.0], [81.7, 119.0], [81.8, 119.0], [81.9, 119.0], [82.0, 119.0], [82.1, 119.0], [82.2, 119.0], [82.3, 119.0], [82.4, 119.0], [82.5, 119.0], [82.6, 119.0], [82.7, 119.0], [82.8, 120.0], [82.9, 120.0], [83.0, 120.0], [83.1, 120.0], [83.2, 120.0], [83.3, 120.0], [83.4, 120.0], [83.5, 120.0], [83.6, 120.0], [83.7, 120.0], [83.8, 120.0], [83.9, 120.0], [84.0, 120.0], [84.1, 120.0], [84.2, 120.0], [84.3, 120.0], [84.4, 120.0], [84.5, 120.0], [84.6, 120.0], [84.7, 120.0], [84.8, 120.0], [84.9, 120.0], [85.0, 120.0], [85.1, 120.0], [85.2, 121.0], [85.3, 121.0], [85.4, 121.0], [85.5, 121.0], [85.6, 121.0], [85.7, 121.0], [85.8, 121.0], [85.9, 121.0], [86.0, 121.0], [86.1, 121.0], [86.2, 121.0], [86.3, 121.0], [86.4, 121.0], [86.5, 121.0], [86.6, 121.0], [86.7, 121.0], [86.8, 121.0], [86.9, 121.0], [87.0, 121.0], [87.1, 121.0], [87.2, 121.0], [87.3, 122.0], [87.4, 122.0], [87.5, 122.0], [87.6, 122.0], [87.7, 122.0], [87.8, 122.0], [87.9, 122.0], [88.0, 122.0], [88.1, 122.0], [88.2, 122.0], [88.3, 122.0], [88.4, 122.0], [88.5, 122.0], [88.6, 122.0], [88.7, 122.0], [88.8, 122.0], [88.9, 122.0], [89.0, 122.0], [89.1, 123.0], [89.2, 123.0], [89.3, 123.0], [89.4, 123.0], [89.5, 123.0], [89.6, 123.0], [89.7, 123.0], [89.8, 123.0], [89.9, 123.0], [90.0, 123.0], [90.1, 123.0], [90.2, 123.0], [90.3, 123.0], [90.4, 123.0], [90.5, 123.0], [90.6, 123.0], [90.7, 123.0], [90.8, 124.0], [90.9, 124.0], [91.0, 124.0], [91.1, 124.0], [91.2, 124.0], [91.3, 124.0], [91.4, 124.0], [91.5, 124.0], [91.6, 124.0], [91.7, 124.0], [91.8, 124.0], [91.9, 124.0], [92.0, 124.0], [92.1, 124.0], [92.2, 125.0], [92.3, 125.0], [92.4, 125.0], [92.5, 125.0], [92.6, 125.0], [92.7, 125.0], [92.8, 125.0], [92.9, 125.0], [93.0, 125.0], [93.1, 125.0], [93.2, 125.0], [93.3, 125.0], [93.4, 125.0], [93.5, 126.0], [93.6, 126.0], [93.7, 126.0], [93.8, 126.0], [93.9, 126.0], [94.0, 126.0], [94.1, 126.0], [94.2, 126.0], [94.3, 126.0], [94.4, 126.0], [94.5, 126.0], [94.6, 127.0], [94.7, 127.0], [94.8, 127.0], [94.9, 127.0], [95.0, 127.0], [95.1, 127.0], [95.2, 127.0], [95.3, 127.0], [95.4, 127.0], [95.5, 128.0], [95.6, 128.0], [95.7, 128.0], [95.8, 128.0], [95.9, 128.0], [96.0, 128.0], [96.1, 128.0], [96.2, 128.0], [96.3, 129.0], [96.4, 129.0], [96.5, 129.0], [96.6, 129.0], [96.7, 129.0], [96.8, 129.0], [96.9, 130.0], [97.0, 130.0], [97.1, 130.0], [97.2, 130.0], [97.3, 130.0], [97.4, 131.0], [97.5, 131.0], [97.6, 131.0], [97.7, 131.0], [97.8, 132.0], [97.9, 132.0], [98.0, 132.0], [98.1, 133.0], [98.2, 133.0], [98.3, 133.0], [98.4, 134.0], [98.5, 134.0], [98.6, 135.0], [98.7, 135.0], [98.8, 136.0], [98.9, 137.0], [99.0, 137.0], [99.1, 138.0], [99.2, 139.0], [99.3, 141.0], [99.4, 142.0], [99.5, 144.0], [99.6, 146.0], [99.7, 149.0], [99.8, 155.0], [99.9, 161.0]], "isOverall": false, "label": "AMQP Consumer", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 11.0, "minX": 0.0, "maxY": 1339605.0, "series": [{"data": [[0.0, 1339605.0], [100.0, 1892.0], [200.0, 11.0]], "isOverall": false, "label": "AMQP Publisher", "isController": false}, {"data": [[0.0, 194291.0], [100.0, 1140483.0], [200.0, 31.0]], "isOverall": false, "label": "AMQP Consumer", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2676313.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2676313.0, "series": [{"data": [[0.0, 2676313.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 4.9E-324, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 106.56419118604647, "minX": 1.74714822E12, "maxY": 250.97836144652646, "series": [{"data": [[1.7471484E12, 250.41070048318673], [1.74714846E12, 250.35985578672742], [1.74714828E12, 250.1929320790127], [1.74714834E12, 250.71236108071312], [1.74714822E12, 106.56419118604647], [1.74714852E12, 250.97836144652646]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74714852E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 6.0, "maxY": 143.0, "series": [{"data": [[6.0, 0.44000000000000006], [7.0, 0.1428571428571429], [8.0, 0.16666666666666666], [9.0, 0.35294117647058815], [10.0, 0.20634920634920634], [11.0, 0.12068965517241381], [12.0, 0.12068965517241381], [13.0, 0.10937500000000001], [14.0, 0.1505376344086022], [15.0, 0.10185185185185186], [16.0, 0.07534246575342465], [17.0, 0.04166666666666665], [18.0, 0.05113636363636363], [19.0, 0.03977272727272726], [20.0, 0.052083333333333315], [21.0, 0.06607929515418505], [22.0, 0.04347826086956519], [23.0, 0.05594405594405596], [24.0, 0.04081632653061223], [25.0, 0.06912442396313369], [26.0, 0.07865168539325845], [27.0, 0.05106382978723405], [28.0, 0.04263565891472868], [29.0, 0.05019305019305018], [30.0, 0.04961832061068701], [31.0, 0.0379746835443038], [32.0, 0.038194444444444434], [33.0, 0.048780487804878064], [34.0, 0.03508771929824563], [35.0, 0.030303030303030304], [36.0, 0.03680981595092025], [37.0, 0.05245901639344265], [38.0, 0.0346020761245675], [39.0, 0.05668016194331983], [40.0, 0.06198347107438019], [41.0, 0.044117647058823546], [42.0, 0.028985507246376798], [43.0, 0.014814814814814805], [45.0, 0.1557377049180329], [46.0, 0.023364485981308417], [47.0, 0.04885057471264366], [48.0, 0.06250000000000001], [49.0, 0.0223463687150838], [52.0, 0.3818181818181815], [53.0, 0.057777777777777775], [54.0, 0.028846153846153827], [55.0, 0.057142857142857155], [57.0, 0.18439716312056764], [58.0, 0.033112582781456956], [61.0, 0.3556701030927835], [62.0, 0.023890784982935162], [64.0, 0.13411078717201153], [65.0, 0.02288329519450803], [66.0, 0.02189781021897811], [68.0, 0.19557195571955727], [69.0, 0.012820512820512822], [70.0, 0.01642036124794745], [73.0, 0.14248021108179426], [74.0, 2.3], [75.0, 0.01549053356282272], [76.0, 0.06666666666666668], [77.0, 0.026041666666666664], [80.0, 31.5], [81.0, 0.0183206106870229], [82.0, 0.019801980198019806], [86.0, 0.13758389261744994], [91.0, 3.785714285714287], [92.0, 0.011851851851851856], [97.0, 0.358974358974359], [98.0, 0.015915119363395243], [103.0, 0.7058823529411764], [104.0, 0.00954198473282442], [107.0, 0.9444444444444445], [108.0, 0.013840830449826994], [114.0, 0.6756756756756753], [115.0, 0.016018306636155617], [120.0, 0.15361890694239305], [125.0, 0.857142857142857], [126.0, 0.01048218029350104], [131.0, 0.15088757396449695], [136.0, 0.34602076124567527], [137.0, 0.011080332409972292], [142.0, 0.2354211663066954], [143.0, 0.01604278074866311], [148.0, 0.15198863636363658], [154.0, 0.21973929236499065], [155.0, 0.01785714285714286], [161.0, 0.35248041775456945], [162.0, 0.004166666666666667], [167.0, 0.15657311669128512], [172.0, 0.15798319327731097], [178.0, 0.8888888888888887], [179.0, 0.011744966442953026], [185.0, 0.28539325842696656], [186.0, 0.046357615894039715], [193.0, 0.2073863636363634], [200.0, 1.290598290598291], [201.0, 0.012422360248447192], [202.0, 0.016877637130801683], [206.0, 0.577639751552795], [207.0, 0.013793103448275851], [214.0, 0.21713441654357477], [219.0, 0.22298850574712645], [220.0, 0.015037593984962409], [228.0, 0.57843137254902], [229.0, 0.012562814070351756], [234.0, 0.32080924855491333], [235.0, 0.01083032490974729], [239.0, 0.13665594855305496], [247.0, 0.2201704545454548], [254.0, 0.8479532163742696], [255.0, 0.011764705882352938], [260.0, 0.5670103092783505], [261.0, 0.016563146997929618], [269.0, 0.3381443298969074], [270.0, 0.010989010989010983], [275.0, 0.3402985074626867], [276.0, 0.017167381974248937], [281.0, 0.17177914110429476], [282.0, 0.0], [288.0, 2.0746268656716413], [289.0, 0.011475409836065573], [294.0, 0.1714285714285714], [299.0, 0.1508052708638361], [300.0, 0.047619047619047616], [306.0, 0.2565543071161049], [307.0, 0.008620689655172415], [312.0, 1.3448275862068961], [313.0, 0.011922503725782414], [321.0, 0.3253493013972058], [322.0, 0.011363636363636366], [327.0, 1.901639344262294], [328.0, 0.08656716417910443], [329.0, 0.0792079207920792], [330.0, 0.006578947368421055], [334.0, 0.5588235294117648], [335.0, 0.011904761904761908], [341.0, 0.202108963093146], [347.0, 0.18153846153846157], [353.0, 0.4743083003952568], [354.0, 0.00709219858156028], [362.0, 0.42564102564102585], [363.0, 0.019021739130434777], [369.0, 0.20030816640986174], [370.0, 0.03571428571428572], [377.0, 0.2657580919931857], [378.0, 0.0101010101010101], [383.0, 1.124999999999999], [384.0, 0.008602150537634402], [390.0, 0.4510489510489509], [391.0, 0.01278772378516623], [398.0, 0.2386554621848744], [407.0, 1.646017699115044], [408.0, 0.03439153439153437], [409.0, 0.014981273408239702], [417.0, 2.1874999999999982], [418.0, 0.011799410029498518], [426.0, 3.8372093023255798], [427.0, 0.008237232289950573], [435.0, 1.8043478260869563], [436.0, 0.016516516516516516], [444.0, 0.6763485477178421], [445.0, 0.010204081632653048], [452.0, 3.081632653061224], [453.0, 0.012216404886561952], [460.0, 0.9607843137254907], [461.0, 0.010380622837370242], [459.0, 143.0], [468.0, 0.5087108013937285], [469.0, 0.005952380952380949], [475.0, 0.3360433604336043], [476.0, 0.01381215469613259], [482.0, 0.22222222222222207], [483.0, 0.0], [492.0, 0.28813559322033877], [499.0, 1.6588235294117646], [500.0, 0.008752735229759294], [501.0, 0.21843714189914945]], "isOverall": false, "label": "AMQP Publisher", "isController": false}, {"data": [[489.0875432721952, 0.21616494273607498]], "isOverall": false, "label": "AMQP Publisher-Aggregated", "isController": false}, {"data": [[7.0, 0.25], [8.0, 0.6458333333333331], [9.0, 1.7906976744186045], [10.0, 2.066666666666667], [11.0, 2.083333333333333], [12.0, 2.6271186440677967], [13.0, 2.783333333333333], [14.0, 1.9885057471264367], [15.0, 1.6019417475728153], [16.0, 1.6931818181818183], [17.0, 2.657534246575343], [18.0, 2.276595744680851], [19.0, 2.06930693069307], [20.0, 2.0679611650485423], [21.0, 1.5697674418604655], [22.0, 1.6099999999999994], [23.0, 0.9285714285714284], [24.0, 0.7304964539007088], [25.0, 1.0514705882352937], [26.0, 0.2292993630573248], [27.0, 2.5], [28.0, 2.775280898876405], [29.0, 3.505747126436782], [30.0, 4.073170731707319], [31.0, 2.9999999999999996], [32.0, 3.8928571428571423], [33.0, 6.029411764705882], [34.0, 1.4394904458598725], [35.0, 2.651851851851852], [36.0, 4.269662921348314], [37.0, 3.720338983050846], [38.0, 2.3801652892561984], [39.0, 3.851851851851852], [40.0, 4.762499999999999], [41.0, 1.138613861386139], [42.0, 4.524590163934428], [43.0, 8.200000000000001], [45.0, 2.036082474226804], [46.0, 0.02531645569620253], [47.0, 3.371428571428572], [48.0, 1.0250000000000001], [49.0, 18.555555555555557], [50.0, 1.2913907284768198], [51.0, 1.1010638297872337], [52.0, 1.2065217391304344], [53.0, 3.3846153846153832], [54.0, 4.090163934426229], [55.0, 3.3750000000000018], [56.0, 3.6938775510204067], [57.0, 2.078651685393259], [58.0, 5.216216216216218], [59.0, 5.235294117647059], [60.0, 4.751824817518247], [61.0, 4.352112676056338], [62.0, 4.589552238805973], [63.0, 8.69306930693069], [64.0, 8.801980198019802], [65.0, 6.258064516129034], [66.0, 9.654867256637168], [67.0, 11.22077922077922], [68.0, 9.00714285714286], [69.0, 11.07692307692308], [70.0, 10.915094339622636], [71.0, 10.016260162601627], [72.0, 4.372549019607844], [73.0, 17.682926829268286], [74.0, 13.967213114754104], [75.0, 7.844660194174764], [76.0, 10.862903225806445], [77.0, 9.458333333333336], [78.0, 8.950310559006212], [79.0, 7.908333333333333], [80.0, 10.336000000000004], [81.0, 12.043103448275863], [82.0, 13.804123711340205], [83.0, 10.447368421052632], [84.0, 10.047619047619047], [85.0, 13.259259259259263], [86.0, 12.335999999999997], [87.0, 10.579439252336446], [88.0, 11.932885906040267], [89.0, 8.960629921259844], [90.0, 11.081081081081086], [91.0, 11.559633027522938], [92.0, 12.49032258064516], [93.0, 9.670329670329668], [94.0, 15.143939393939394], [95.0, 16.513513513513523], [96.0, 12.008130081300822], [97.0, 14.673076923076923], [98.0, 14.938053097345136], [99.0, 15.185483870967744], [100.0, 14.257575757575761], [101.0, 16.922077922077918], [102.0, 16.71818181818181], [103.0, 17.81249999999999], [104.0, 7.83783783783784], [105.0, 14.651785714285714], [106.0, 14.809523809523814], [107.0, 14.89344262295082], [108.0, 16.542857142857137], [109.0, 16.469026548672574], [110.0, 17.139130434782608], [111.0, 16.627450980392155], [112.0, 16.732758620689655], [113.0, 20.123711340206185], [114.0, 16.393700787401578], [115.0, 18.961165048543688], [116.0, 19.00990099009902], [117.0, 16.792307692307684], [118.0, 17.631578947368418], [119.0, 20.366972477064223], [120.0, 20.88764044943821], [121.0, 18.708955223880604], [122.0, 17.60483870967742], [123.0, 15.757961783439487], [124.0, 14.147368421052633], [125.0, 19.419354838709676], [126.0, 16.265625], [127.0, 19.169354838709676], [128.0, 17.08163265306123], [129.0, 21.274999999999995], [130.0, 17.97037037037037], [131.0, 15.745762711864405], [132.0, 23.58108108108108], [133.0, 33.71604938271605], [134.0, 31.82051282051282], [135.0, 27.882352941176475], [136.0, 20.082758620689653], [137.0, 15.250000000000004], [138.0, 20.609523809523814], [139.0, 26.0925925925926], [140.0, 22.33009708737865], [141.0, 20.688679245283016], [142.0, 22.401785714285705], [143.0, 19.650000000000006], [144.0, 17.909090909090917], [145.0, 17.515463917525775], [146.0, 25.696969696969706], [147.0, 18.124031007751935], [148.0, 19.04901960784314], [149.0, 26.205357142857146], [150.0, 24.593023255813954], [151.0, 32.91], [152.0, 25.888888888888886], [153.0, 26.85858585858585], [154.0, 28.406593406593398], [155.0, 24.59731543624162], [156.0, 21.757575757575754], [157.0, 27.423076923076923], [158.0, 29.999999999999975], [159.0, 22.448598130841123], [160.0, 24.418604651162795], [161.0, 25.52777777777779], [162.0, 24.6171875], [163.0, 21.605769230769237], [164.0, 26.370689655172413], [165.0, 29.95402298850575], [166.0, 37.779069767441875], [167.0, 30.100775193798444], [168.0, 23.340740740740742], [169.0, 26.573333333333338], [170.0, 32.27368421052632], [171.0, 35.796116504854375], [172.0, 34.49295774647888], [173.0, 30.592857142857145], [174.0, 24.314685314685313], [175.0, 25.080459770114935], [176.0, 30.43564356435643], [177.0, 28.592920353982294], [178.0, 28.45801526717558], [179.0, 24.67213114754099], [180.0, 28.660377358490567], [181.0, 30.95348837209302], [182.0, 33.05426356589146], [183.0, 29.16666666666666], [184.0, 31.612499999999994], [185.0, 32.36363636363635], [186.0, 31.148148148148135], [187.0, 31.65217391304348], [188.0, 40.74157303370789], [189.0, 45.05128205128206], [190.0, 42.59210526315788], [191.0, 47.013513513513516], [192.0, 46.5301204819277], [193.0, 44.21649484536081], [194.0, 38.45882352941177], [195.0, 46.66666666666667], [196.0, 47.163043478260875], [197.0, 46.24096385542168], [198.0, 41.88764044943819], [199.0, 43.84883720930234], [200.0, 51.91970802919707], [201.0, 41.766233766233775], [202.0, 15.35], [203.0, 31.287234042553195], [204.0, 43.36046511627909], [205.0, 42.430232558139544], [206.0, 46.188235294117646], [207.0, 48.37333333333332], [208.0, 50.794871794871796], [209.0, 49.625000000000014], [210.0, 46.515463917525786], [211.0, 43.1098901098901], [212.0, 41.787234042553195], [213.0, 38.800000000000004], [214.0, 29.825503355704694], [215.0, 33.37373737373737], [216.0, 33.882352941176464], [217.0, 38.102040816326515], [218.0, 39.18181818181818], [219.0, 41.82758620689655], [220.0, 43.287234042553195], [221.0, 43.31372549019609], [222.0, 42.9318181818182], [223.0, 42.53333333333333], [224.0, 42.9032258064516], [225.0, 46.18103448275863], [226.0, 49.444444444444436], [227.0, 47.58823529411765], [228.0, 47.400000000000006], [229.0, 41.020202020202014], [230.0, 43.86021505376346], [231.0, 42.88659793814432], [232.0, 44.26041666666667], [233.0, 45.524271844660205], [234.0, 44.01980198019802], [235.0, 41.98850574712642], [236.0, 42.93939393939392], [237.0, 46.47826086956521], [238.0, 42.5701754385965], [239.0, 40.73469387755103], [240.0, 46.38461538461537], [241.0, 44.25225225225226], [242.0, 43.9468085106383], [243.0, 45.22222222222223], [244.0, 48.86792452830189], [245.0, 48.333333333333336], [246.0, 49.301075268817215], [247.0, 47.71559633027525], [248.0, 46.16842105263157], [249.0, 48.86585365853658], [250.0, 51.67368421052633], [251.0, 52.816901408450704], [252.0, 60.455696202531655], [253.0, 61.111111111111114], [254.0, 62.89041095890411], [255.0, 59.60576923076922], [257.0, 57.08988764044944], [256.0, 56.89333333333332], [258.0, 59.42168674698796], [259.0, 58.69230769230769], [260.0, 53.66666666666664], [261.0, 52.44578313253014], [262.0, 50.666666666666664], [263.0, 54.800000000000004], [264.0, 57.81553398058254], [270.0, 49.69791666666668], [271.0, 48.769230769230795], [268.0, 59.522522522522515], [269.0, 54.20000000000001], [265.0, 57.728260869565226], [266.0, 58.0875], [267.0, 59.15384615384615], [273.0, 44.244444444444454], [272.0, 52.97744360902258], [274.0, 52.56382978723401], [275.0, 56.20454545454545], [276.0, 54.58620689655173], [277.0, 50.95], [278.0, 46.91304347826086], [279.0, 46.487179487179475], [280.0, 51.69999999999999], [286.0, 57.4054054054054], [287.0, 55.78723404255321], [284.0, 53.97777777777779], [285.0, 59.86904761904762], [281.0, 49.50413223140496], [282.0, 48.61797752808989], [283.0, 51.69230769230769], [289.0, 57.86734693877552], [288.0, 53.64444444444444], [290.0, 50.33870967741934], [291.0, 53.17821782178217], [292.0, 42.816666666666656], [293.0, 51.885496183206115], [294.0, 46.37735849056603], [295.0, 47.802325581395344], [296.0, 48.973856209150355], [302.0, 67.18181818181819], [303.0, 56.18867924528302], [300.0, 64.17647058823529], [301.0, 64.08045977011496], [297.0, 45.957983193277315], [298.0, 41.259493670886094], [299.0, 40.090909090909086], [305.0, 50.465116279069775], [304.0, 50.983739837398375], [306.0, 46.7109375], [307.0, 40.70085470085471], [308.0, 49.78888888888889], [309.0, 51.10714285714286], [310.0, 48.913043478260846], [311.0, 49.831578947368406], [312.0, 55.81249999999998], [318.0, 59.239316239316224], [319.0, 56.15999999999999], [316.0, 66.52439024390245], [317.0, 64.57758620689654], [313.0, 53.66019417475727], [314.0, 58.293478260869556], [315.0, 60.14285714285715], [321.0, 63.508620689655174], [320.0, 57.3780487804878], [322.0, 62.58024691358025], [323.0, 65.29591836734694], [324.0, 59.74257425742574], [325.0, 70.66265060240967], [326.0, 67.2673267326733], [327.0, 69.23913043478258], [328.0, 78.4274809160305], [334.0, 70.98648648648648], [335.0, 70.78504672897193], [332.0, 47.32558139534882], [333.0, 65.00000000000003], [329.0, 71.18681318681317], [330.0, 62.062499999999986], [331.0, 52.926829268292686], [337.0, 69.48739495798318], [336.0, 73.26923076923077], [338.0, 62.10526315789473], [339.0, 61.38709677419357], [340.0, 62.454545454545446], [341.0, 65.54022988505747], [342.0, 66.1727272727273], [343.0, 65.77777777777776], [344.0, 68.61176470588235], [350.0, 63.65624999999999], [351.0, 70.64367816091956], [348.0, 61.37931034482759], [349.0, 60.865979381443296], [345.0, 65.89285714285717], [346.0, 67.25274725274723], [347.0, 60.857142857142875], [353.0, 73.24], [352.0, 73.23655913978494], [354.0, 75.29885057471265], [355.0, 72.38297872340428], [356.0, 74.47826086956522], [357.0, 73.50495049504953], [358.0, 74.31249999999997], [359.0, 75.86956521739128], [360.0, 78.09722222222223], [366.0, 77.34653465346535], [367.0, 71.56190476190477], [364.0, 73.08411214953271], [365.0, 69.23863636363637], [361.0, 78.8252427184466], [362.0, 79.16483516483517], [363.0, 78.14772727272728], [369.0, 76.33333333333337], [368.0, 73.55128205128203], [370.0, 73.7745098039216], [371.0, 82.62043795620437], [372.0, 72.00000000000001], [373.0, 71.36904761904763], [374.0, 77.11111111111109], [375.0, 77.96116504854368], [376.0, 76.10909090909092], [382.0, 78.05128205128203], [383.0, 86.11111111111111], [380.0, 72.0], [381.0, 77.8108108108108], [377.0, 72.51041666666673], [378.0, 72.77049180327867], [379.0, 68.80232558139532], [385.0, 79.68421052631581], [384.0, 81.48484848484848], [386.0, 81.64444444444445], [387.0, 113.18562874251496], [388.0, 99.46874999999999], [389.0, 115.93636363636365], [390.0, 84.50537634408602], [391.0, 85.80821917808214], [392.0, 113.04395604395606], [398.0, 96.6849315068493], [399.0, 96.96666666666667], [396.0, 95.3658536585366], [397.0, 94.05194805194803], [393.0, 99.71717171717171], [394.0, 99.80434782608698], [395.0, 96.64285714285714], [401.0, 97.12631578947372], [400.0, 101.77464788732392], [402.0, 110.73333333333338], [403.0, 93.80952380952382], [404.0, 91.06410256410257], [405.0, 90.31506849315068], [406.0, 93.83146067415727], [407.0, 97.57894736842105], [408.0, 104.6728971962617], [414.0, 102.39240506329116], [415.0, 104.25000000000001], [412.0, 97.26760563380282], [413.0, 90.68965517241381], [409.0, 93.29761904761904], [410.0, 92.71794871794873], [411.0, 92.10000000000001], [417.0, 107.57142857142858], [416.0, 114.4795918367347], [418.0, 99.45263157894736], [419.0, 110.89024390243901], [420.0, 101.44444444444441], [421.0, 106.42424242424241], [422.0, 106.81159420289859], [423.0, 108.57547169811322], [424.0, 106.6973684210526], [430.0, 111.19277108433734], [431.0, 110.21794871794873], [428.0, 112.2289156626506], [429.0, 113.44444444444443], [425.0, 108.34523809523812], [426.0, 105.91666666666666], [427.0, 106.50724637681158], [433.0, 123.80281690140843], [432.0, 117.05555555555556], [434.0, 122.58241758241755], [435.0, 112.76404494382021], [436.0, 112.65454545454544], [437.0, 104.82105263157894], [438.0, 100.12162162162159], [439.0, 105.95294117647057], [440.0, 97.80681818181819], [446.0, 104.68627450980394], [447.0, 117.78823529411763], [444.0, 103.30864197530866], [445.0, 101.03488372093025], [441.0, 111.989898989899], [442.0, 106.2843137254902], [443.0, 102.96385542168673], [449.0, 117.26595744680853], [448.0, 116.2972972972973], [450.0, 126.15151515151518], [451.0, 122.3253012048193], [452.0, 123.13265306122446], [453.0, 112.98734177215188], [454.0, 110.60526315789473], [455.0, 114.43877551020408], [456.0, 108.70930232558138], [462.0, 114.01351351351353], [463.0, 106.80451127819548], [460.0, 107.93023255813952], [461.0, 110.469696969697], [457.0, 105.9146341463415], [458.0, 106.625], [459.0, 106.73809523809526], [465.0, 99.14406779661014], [464.0, 102.46000000000002], [466.0, 88.79207920792085], [467.0, 93.30612244897958], [468.0, 99.51648351648353], [469.0, 99.48314606741573], [470.0, 107.91666666666666], [471.0, 101.30769230769229], [472.0, 100.65486725663717], [478.0, 97.29787234042556], [479.0, 104.35772357723573], [476.0, 92.90243902439026], [477.0, 95.02752293577983], [473.0, 96.94505494505495], [474.0, 92.94736842105264], [475.0, 101.61467889908256], [481.0, 104.51063829787235], [480.0, 102.6753246753247], [482.0, 106.31182795698926], [483.0, 107.10714285714286], [484.0, 113.21153846153844], [485.0, 114.26041666666664], [486.0, 115.55555555555554], [487.0, 117.4605263157895], [488.0, 117.12903225806453], [494.0, 126.87323943661968], [495.0, 122.94845360824735], [492.0, 129.27777777777774], [493.0, 123.6521739130435], [489.0, 122.09836065573768], [490.0, 128.65714285714287], [491.0, 130.0632911392405], [496.0, 119.24074074074073], [497.0, 115.66666666666667], [498.0, 114.19999999999996], [499.0, 117.5542168674699], [500.0, 113.98850574712644], [501.0, 110.8238348014706]], "isOverall": false, "label": "AMQP Consumer", "isController": false}, {"data": [[491.52260442535663, 108.56887860024528]], "isOverall": false, "label": "AMQP Consumer-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 501.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.74714822E12, "maxY": 9503674.116666667, "series": [{"data": [[1.7471484E12, 9313665.883333333], [1.74714846E12, 9503674.116666667], [1.74714828E12, 9398096.416666666], [1.74714834E12, 9467256.716666667], [1.74714822E12, 1896618.7], [1.74714852E12, 7976923.333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7471484E12, 0.0], [1.74714846E12, 0.0], [1.74714828E12, 0.0], [1.74714834E12, 0.0], [1.74714822E12, 0.0], [1.74714852E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74714852E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 0.1583314644539131, "minX": 1.74714822E12, "maxY": 112.26922095383996, "series": [{"data": [[1.7471484E12, 0.22171683915243057], [1.74714846E12, 0.21675053247639633], [1.74714828E12, 0.21949839499979115], [1.74714834E12, 0.21682849108249502], [1.74714822E12, 0.1583314644539131], [1.74714852E12, 0.21802255819534352]], "isOverall": false, "label": "AMQP Publisher", "isController": false}, {"data": [[1.7471484E12, 112.26922095383996], [1.74714846E12, 110.04695167036328], [1.74714828E12, 111.35792576914447], [1.74714834E12, 110.13829930396233], [1.74714822E12, 45.1243117185984], [1.74714852E12, 110.39624460909047]], "isOverall": false, "label": "AMQP Consumer", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74714852E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74714822E12, "maxY": 4.9E-324, "series": [{"data": [[1.7471484E12, 0.0], [1.74714846E12, 0.0], [1.74714828E12, 0.0], [1.74714834E12, 0.0], [1.74714822E12, 0.0], [1.74714852E12, 0.0]], "isOverall": false, "label": "AMQP Publisher", "isController": false}, {"data": [[1.7471484E12, 0.0], [1.74714846E12, 0.0], [1.74714828E12, 0.0], [1.74714834E12, 0.0], [1.74714822E12, 0.0], [1.74714852E12, 0.0]], "isOverall": false, "label": "AMQP Consumer", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74714852E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74714822E12, "maxY": 4.9E-324, "series": [{"data": [[1.7471484E12, 0.0], [1.74714846E12, 0.0], [1.74714828E12, 0.0], [1.74714834E12, 0.0], [1.74714822E12, 0.0], [1.74714852E12, 0.0]], "isOverall": false, "label": "AMQP Publisher", "isController": false}, {"data": [[1.7471484E12, 0.0], [1.74714846E12, 0.0], [1.74714828E12, 0.0], [1.74714834E12, 0.0], [1.74714822E12, 0.0], [1.74714852E12, 0.0]], "isOverall": false, "label": "AMQP Consumer", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74714852E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74714822E12, "maxY": 251.0, "series": [{"data": [[1.7471484E12, 251.0], [1.74714846E12, 192.0], [1.74714828E12, 233.0], [1.74714834E12, 215.0], [1.74714822E12, 184.0], [1.74714852E12, 222.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7471484E12, 0.0], [1.74714846E12, 0.0], [1.74714828E12, 0.0], [1.74714834E12, 0.0], [1.74714822E12, 0.0], [1.74714852E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7471484E12, 115.0], [1.74714846E12, 120.0], [1.74714828E12, 115.0], [1.74714834E12, 121.0], [1.74714822E12, 107.0], [1.74714852E12, 120.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7471484E12, 127.0], [1.74714846E12, 127.0], [1.74714828E12, 126.0], [1.74714834E12, 129.0], [1.74714822E12, 118.0], [1.74714852E12, 172.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7471484E12, 80.0], [1.74714846E12, 1.0], [1.74714828E12, 1.0], [1.74714834E12, 91.0], [1.74714822E12, 67.0], [1.74714852E12, 97.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7471484E12, 121.0], [1.74714846E12, 123.0], [1.74714828E12, 118.0], [1.74714834E12, 125.0], [1.74714822E12, 112.0], [1.74714852E12, 124.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74714852E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 3487.0, "maxY": 121.0, "series": [{"data": [[8289.0, 81.0], [8413.0, 65.0], [8485.0, 97.0], [8541.0, 96.0], [8545.0, 92.0], [8573.0, 84.0], [8433.0, 100.0], [8237.0, 96.0], [8229.0, 99.0], [8269.0, 97.0], [8277.0, 102.0], [8425.0, 101.0], [8693.0, 0.0], [8589.0, 90.0], [8601.0, 97.0], [8685.0, 92.0], [8669.0, 80.0], [8645.0, 89.0], [8641.0, 91.0], [8409.0, 100.0], [8325.0, 99.0], [9129.0, 0.0], [9169.0, 0.0], [9109.0, 0.0], [9157.0, 0.0], [9189.0, 1.0], [9193.0, 0.0], [9125.0, 0.0], [9117.0, 0.0], [8957.0, 70.0], [8797.0, 0.0], [8753.0, 97.0], [8853.0, 89.0], [8881.0, 0.0], [8949.0, 0.0], [9069.0, 0.0], [9077.0, 0.0], [9085.0, 0.0], [9041.0, 0.0], [9021.0, 0.0], [9017.0, 91.0], [9061.0, 82.0], [9045.0, 0.0], [9241.0, 4.0], [9417.0, 0.0], [9381.0, 0.0], [9409.0, 0.0], [9361.0, 21.0], [9353.0, 70.0], [9497.0, 30.0], [9509.0, 0.0], [9521.0, 69.0], [9249.0, 87.0], [9429.0, 0.0], [9629.0, 0.0], [9649.0, 0.0], [9321.0, 1.0], [9317.0, 86.0], [9217.0, 0.0], [9469.0, 0.0], [9225.0, 0.0], [9237.0, 0.0], [10213.0, 0.0], [9973.0, 0.0], [9785.0, 71.0], [3487.0, 0.0], [6038.0, 104.0], [7312.0, 0.0], [7246.0, 117.0], [7230.0, 93.5], [7844.0, 109.0], [8040.0, 102.0], [8144.0, 99.0], [8208.0, 99.0], [8484.0, 93.0], [8468.0, 93.0], [8512.0, 84.5], [8544.0, 98.0], [8556.0, 100.0], [8380.0, 96.0], [8400.0, 97.0], [8424.0, 77.5], [8428.0, 99.0], [8432.0, 94.0], [8672.0, 85.0], [8668.0, 89.0], [8676.0, 66.0], [8596.0, 94.0], [8632.0, 95.0], [9116.0, 0.0], [9100.0, 88.0], [9188.0, 0.0], [9120.0, 0.0], [9164.0, 0.0], [9184.0, 0.0], [9128.0, 0.0], [8712.0, 93.0], [8704.0, 89.0], [8752.0, 90.0], [8912.0, 1.0], [8832.0, 92.0], [9196.0, 1.0], [9192.0, 0.0], [8964.0, 0.0], [9032.0, 0.0], [9068.0, 83.0], [9224.0, 1.0], [9244.0, 0.0], [9580.0, 0.0], [9296.0, 0.0], [9336.0, 1.0], [12512.0, 0.0], [16959.0, 0.0], [8695.0, 0.0], [8631.0, 87.0], [8455.0, 100.0], [8703.0, 88.0], [8495.0, 78.0], [8523.0, 92.0], [8507.0, 95.0], [8547.0, 101.0], [8347.0, 89.0], [8323.0, 100.0], [8343.0, 98.0], [8259.0, 100.0], [8615.0, 98.0], [8627.0, 94.0], [8623.0, 95.0], [8595.0, 96.0], [8611.0, 88.0], [8587.0, 95.0], [8583.0, 97.0], [8639.0, 95.0], [8647.0, 96.0], [8687.0, 0.0], [8403.0, 94.0], [8407.0, 96.0], [8387.0, 97.0], [8251.0, 97.0], [9119.0, 0.0], [8955.0, 0.0], [8951.0, 0.0], [9155.0, 0.0], [9171.0, 1.0], [9211.0, 1.0], [8939.0, 90.0], [8919.0, 93.0], [9127.0, 0.0], [9135.0, 0.0], [9147.0, 62.0], [8959.0, 0.0], [8739.0, 1.0], [8759.0, 92.0], [8763.0, 96.0], [8767.0, 88.0], [8771.0, 83.0], [8783.0, 91.0], [8779.0, 94.0], [9091.0, 1.0], [9095.0, 0.0], [8807.0, 89.0], [8907.0, 0.0], [8875.0, 0.0], [8855.0, 93.0], [8839.0, 1.0], [9083.0, 0.0], [9067.0, 0.0], [9027.0, 88.0], [9035.0, 73.0], [8999.0, 1.0], [8967.0, 0.0], [9279.0, 0.0], [9387.0, 17.0], [9391.0, 0.0], [9395.0, 81.0], [9371.0, 1.0], [9515.0, 52.0], [9591.0, 0.0], [9323.0, 0.0], [9343.0, 1.0], [9491.0, 0.0], [9291.0, 0.0], [9275.0, 0.0], [9271.0, 0.0], [9263.0, 0.0], [9251.0, 0.0], [9239.0, 0.0], [9243.0, 0.0], [9223.0, 0.0], [9951.0, 0.0], [9731.0, 0.0], [10587.0, 1.0], [11327.0, 0.0], [6813.0, 121.0], [7363.0, 117.0], [7807.0, 60.0], [8023.0, 106.0], [8141.0, 100.0], [7961.0, 100.0], [7981.0, 1.0], [7951.0, 0.0], [8258.0, 94.0], [8454.0, 102.0], [8490.0, 95.0], [8474.0, 89.0], [8514.0, 95.0], [8526.0, 92.0], [8530.0, 93.0], [8550.0, 98.0], [8558.0, 98.0], [8546.0, 97.0], [8394.0, 96.0], [8362.0, 97.0], [8374.0, 103.0], [8366.0, 96.0], [8210.0, 99.0], [8246.0, 100.0], [8438.0, 94.0], [8194.0, 0.0], [8274.0, 95.0], [8614.0, 97.0], [8622.0, 92.0], [8702.0, 90.0], [8642.0, 93.0], [8450.0, 96.0], [8610.0, 85.0], [8606.0, 93.0], [8578.0, 83.0], [8590.0, 97.0], [8582.0, 91.0], [9150.0, 69.0], [9170.0, 0.0], [9174.0, 1.0], [9206.0, 0.0], [9166.0, 1.0], [9118.0, 0.0], [9122.0, 1.0], [8794.0, 94.0], [8830.0, 93.0], [8790.0, 81.0], [9098.0, 0.0], [9090.0, 0.0], [8898.0, 89.0], [8750.0, 94.0], [8910.0, 0.0], [8978.0, 0.0], [9026.0, 0.0], [8998.0, 0.0], [9006.0, 1.0], [8982.0, 0.0], [9078.0, 0.0], [9086.0, 0.0], [9074.0, 1.0], [9066.0, 1.0], [9054.0, 79.0], [9274.0, 0.0], [9378.0, 1.0], [9374.0, 0.0], [9366.0, 0.0], [9554.0, 0.0], [9582.0, 0.0], [9410.0, 0.0], [9382.0, 1.0], [9318.0, 0.0], [9314.0, 1.0], [9334.0, 0.0], [9218.0, 1.0], [9270.0, 0.0], [9426.0, 75.0], [10030.0, 0.0], [9842.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 16959.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 3487.0, "maxY": 4.9E-324, "series": [{"data": [[8289.0, 0.0], [8413.0, 0.0], [8485.0, 0.0], [8541.0, 0.0], [8545.0, 0.0], [8573.0, 0.0], [8433.0, 0.0], [8237.0, 0.0], [8229.0, 0.0], [8269.0, 0.0], [8277.0, 0.0], [8425.0, 0.0], [8693.0, 0.0], [8589.0, 0.0], [8601.0, 0.0], [8685.0, 0.0], [8669.0, 0.0], [8645.0, 0.0], [8641.0, 0.0], [8409.0, 0.0], [8325.0, 0.0], [9129.0, 0.0], [9169.0, 0.0], [9109.0, 0.0], [9157.0, 0.0], [9189.0, 0.0], [9193.0, 0.0], [9125.0, 0.0], [9117.0, 0.0], [8957.0, 0.0], [8797.0, 0.0], [8753.0, 0.0], [8853.0, 0.0], [8881.0, 0.0], [8949.0, 0.0], [9069.0, 0.0], [9077.0, 0.0], [9085.0, 0.0], [9041.0, 0.0], [9021.0, 0.0], [9017.0, 0.0], [9061.0, 0.0], [9045.0, 0.0], [9241.0, 0.0], [9417.0, 0.0], [9381.0, 0.0], [9409.0, 0.0], [9361.0, 0.0], [9353.0, 0.0], [9497.0, 0.0], [9509.0, 0.0], [9521.0, 0.0], [9249.0, 0.0], [9429.0, 0.0], [9629.0, 0.0], [9649.0, 0.0], [9321.0, 0.0], [9317.0, 0.0], [9217.0, 0.0], [9469.0, 0.0], [9225.0, 0.0], [9237.0, 0.0], [10213.0, 0.0], [9973.0, 0.0], [9785.0, 0.0], [3487.0, 0.0], [6038.0, 0.0], [7312.0, 0.0], [7246.0, 0.0], [7230.0, 0.0], [7844.0, 0.0], [8040.0, 0.0], [8144.0, 0.0], [8208.0, 0.0], [8484.0, 0.0], [8468.0, 0.0], [8512.0, 0.0], [8544.0, 0.0], [8556.0, 0.0], [8380.0, 0.0], [8400.0, 0.0], [8424.0, 0.0], [8428.0, 0.0], [8432.0, 0.0], [8672.0, 0.0], [8668.0, 0.0], [8676.0, 0.0], [8596.0, 0.0], [8632.0, 0.0], [9116.0, 0.0], [9100.0, 0.0], [9188.0, 0.0], [9120.0, 0.0], [9164.0, 0.0], [9184.0, 0.0], [9128.0, 0.0], [8712.0, 0.0], [8704.0, 0.0], [8752.0, 0.0], [8912.0, 0.0], [8832.0, 0.0], [9196.0, 0.0], [9192.0, 0.0], [8964.0, 0.0], [9032.0, 0.0], [9068.0, 0.0], [9224.0, 0.0], [9244.0, 0.0], [9580.0, 0.0], [9296.0, 0.0], [9336.0, 0.0], [12512.0, 0.0], [16959.0, 0.0], [8695.0, 0.0], [8631.0, 0.0], [8455.0, 0.0], [8703.0, 0.0], [8495.0, 0.0], [8523.0, 0.0], [8507.0, 0.0], [8547.0, 0.0], [8347.0, 0.0], [8323.0, 0.0], [8343.0, 0.0], [8259.0, 0.0], [8615.0, 0.0], [8627.0, 0.0], [8623.0, 0.0], [8595.0, 0.0], [8611.0, 0.0], [8587.0, 0.0], [8583.0, 0.0], [8639.0, 0.0], [8647.0, 0.0], [8687.0, 0.0], [8403.0, 0.0], [8407.0, 0.0], [8387.0, 0.0], [8251.0, 0.0], [9119.0, 0.0], [8955.0, 0.0], [8951.0, 0.0], [9155.0, 0.0], [9171.0, 0.0], [9211.0, 0.0], [8939.0, 0.0], [8919.0, 0.0], [9127.0, 0.0], [9135.0, 0.0], [9147.0, 0.0], [8959.0, 0.0], [8739.0, 0.0], [8759.0, 0.0], [8763.0, 0.0], [8767.0, 0.0], [8771.0, 0.0], [8783.0, 0.0], [8779.0, 0.0], [9091.0, 0.0], [9095.0, 0.0], [8807.0, 0.0], [8907.0, 0.0], [8875.0, 0.0], [8855.0, 0.0], [8839.0, 0.0], [9083.0, 0.0], [9067.0, 0.0], [9027.0, 0.0], [9035.0, 0.0], [8999.0, 0.0], [8967.0, 0.0], [9279.0, 0.0], [9387.0, 0.0], [9391.0, 0.0], [9395.0, 0.0], [9371.0, 0.0], [9515.0, 0.0], [9591.0, 0.0], [9323.0, 0.0], [9343.0, 0.0], [9491.0, 0.0], [9291.0, 0.0], [9275.0, 0.0], [9271.0, 0.0], [9263.0, 0.0], [9251.0, 0.0], [9239.0, 0.0], [9243.0, 0.0], [9223.0, 0.0], [9951.0, 0.0], [9731.0, 0.0], [10587.0, 0.0], [11327.0, 0.0], [6813.0, 0.0], [7363.0, 0.0], [7807.0, 0.0], [8023.0, 0.0], [8141.0, 0.0], [7961.0, 0.0], [7981.0, 0.0], [7951.0, 0.0], [8258.0, 0.0], [8454.0, 0.0], [8490.0, 0.0], [8474.0, 0.0], [8514.0, 0.0], [8526.0, 0.0], [8530.0, 0.0], [8550.0, 0.0], [8558.0, 0.0], [8546.0, 0.0], [8394.0, 0.0], [8362.0, 0.0], [8374.0, 0.0], [8366.0, 0.0], [8210.0, 0.0], [8246.0, 0.0], [8438.0, 0.0], [8194.0, 0.0], [8274.0, 0.0], [8614.0, 0.0], [8622.0, 0.0], [8702.0, 0.0], [8642.0, 0.0], [8450.0, 0.0], [8610.0, 0.0], [8606.0, 0.0], [8578.0, 0.0], [8590.0, 0.0], [8582.0, 0.0], [9150.0, 0.0], [9170.0, 0.0], [9174.0, 0.0], [9206.0, 0.0], [9166.0, 0.0], [9118.0, 0.0], [9122.0, 0.0], [8794.0, 0.0], [8830.0, 0.0], [8790.0, 0.0], [9098.0, 0.0], [9090.0, 0.0], [8898.0, 0.0], [8750.0, 0.0], [8910.0, 0.0], [8978.0, 0.0], [9026.0, 0.0], [8998.0, 0.0], [9006.0, 0.0], [8982.0, 0.0], [9078.0, 0.0], [9086.0, 0.0], [9074.0, 0.0], [9066.0, 0.0], [9054.0, 0.0], [9274.0, 0.0], [9378.0, 0.0], [9374.0, 0.0], [9366.0, 0.0], [9554.0, 0.0], [9582.0, 0.0], [9410.0, 0.0], [9382.0, 0.0], [9318.0, 0.0], [9314.0, 0.0], [9334.0, 0.0], [9218.0, 0.0], [9270.0, 0.0], [9426.0, 0.0], [10030.0, 0.0], [9842.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 16959.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1671.2, "minX": 1.74714822E12, "maxY": 8931.183333333332, "series": [{"data": [[1.7471484E12, 8754.366666666667], [1.74714846E12, 8931.183333333332], [1.74714828E12, 8828.833333333334], [1.74714834E12, 8909.516666666666], [1.74714822E12, 1671.2], [1.74714852E12, 7510.116666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74714852E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1663.65, "minX": 1.74714822E12, "maxY": 8931.216666666667, "series": [{"data": [[1.7471484E12, 8754.433333333332], [1.74714846E12, 8931.216666666667], [1.74714828E12, 8828.15], [1.74714834E12, 8909.55], [1.74714822E12, 1663.65], [1.74714852E12, 7518.216666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74714852E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 771.85, "minX": 1.74714822E12, "maxY": 4468.116666666667, "series": [{"data": [[1.7471484E12, 4375.65], [1.74714846E12, 4463.1], [1.74714828E12, 4409.666666666667], [1.74714834E12, 4458.566666666667], [1.74714822E12, 771.85], [1.74714852E12, 3767.9166666666665]], "isOverall": false, "label": "AMQP Consumer-success", "isController": false}, {"data": [[1.7471484E12, 4378.783333333334], [1.74714846E12, 4468.116666666667], [1.74714828E12, 4418.483333333334], [1.74714834E12, 4450.983333333334], [1.74714822E12, 891.8], [1.74714852E12, 3750.3]], "isOverall": false, "label": "AMQP Publisher-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74714852E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1663.65, "minX": 1.74714822E12, "maxY": 8931.216666666667, "series": [{"data": [[1.7471484E12, 8754.433333333332], [1.74714846E12, 8931.216666666667], [1.74714828E12, 8828.15], [1.74714834E12, 8909.55], [1.74714822E12, 1663.65], [1.74714852E12, 7518.216666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74714852E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


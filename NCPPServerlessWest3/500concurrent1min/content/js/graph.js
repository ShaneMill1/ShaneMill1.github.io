/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4575.0, "minX": 0.0, "maxY": 197864.0, "series": [{"data": [[0.0, 4575.0], [0.1, 4729.0], [0.2, 4734.0], [0.3, 4743.0], [0.4, 4744.0], [0.5, 4747.0], [0.6, 4748.0], [0.7, 4749.0], [0.8, 4749.0], [0.9, 4750.0], [1.0, 4751.0], [1.1, 4751.0], [1.2, 4752.0], [1.3, 4752.0], [1.4, 4754.0], [1.5, 4755.0], [1.6, 4756.0], [1.7, 4758.0], [1.8, 4758.0], [1.9, 4758.0], [2.0, 4759.0], [2.1, 4760.0], [2.2, 4761.0], [2.3, 4762.0], [2.4, 4762.0], [2.5, 4762.0], [2.6, 4764.0], [2.7, 4765.0], [2.8, 4765.0], [2.9, 4766.0], [3.0, 4766.0], [3.1, 4766.0], [3.2, 4767.0], [3.3, 4767.0], [3.4, 4767.0], [3.5, 4768.0], [3.6, 4768.0], [3.7, 4770.0], [3.8, 4770.0], [3.9, 4770.0], [4.0, 4770.0], [4.1, 4771.0], [4.2, 4772.0], [4.3, 4773.0], [4.4, 4773.0], [4.5, 4774.0], [4.6, 4775.0], [4.7, 4776.0], [4.8, 4776.0], [4.9, 4777.0], [5.0, 4777.0], [5.1, 4777.0], [5.2, 4778.0], [5.3, 4779.0], [5.4, 4779.0], [5.5, 4780.0], [5.6, 4781.0], [5.7, 4781.0], [5.8, 4781.0], [5.9, 4782.0], [6.0, 4784.0], [6.1, 4786.0], [6.2, 4787.0], [6.3, 4788.0], [6.4, 4789.0], [6.5, 4790.0], [6.6, 4790.0], [6.7, 4792.0], [6.8, 4793.0], [6.9, 4794.0], [7.0, 4794.0], [7.1, 4797.0], [7.2, 4798.0], [7.3, 4800.0], [7.4, 4801.0], [7.5, 4803.0], [7.6, 4811.0], [7.7, 4811.0], [7.8, 4813.0], [7.9, 4819.0], [8.0, 4820.0], [8.1, 4824.0], [8.2, 4826.0], [8.3, 4826.0], [8.4, 4827.0], [8.5, 4827.0], [8.6, 4829.0], [8.7, 4830.0], [8.8, 4832.0], [8.9, 4833.0], [9.0, 4835.0], [9.1, 4836.0], [9.2, 4837.0], [9.3, 4839.0], [9.4, 4839.0], [9.5, 4841.0], [9.6, 4844.0], [9.7, 4846.0], [9.8, 4847.0], [9.9, 4852.0], [10.0, 4854.0], [10.1, 4855.0], [10.2, 4864.0], [10.3, 4873.0], [10.4, 4874.0], [10.5, 5139.0], [10.6, 5211.0], [10.7, 5226.0], [10.8, 5231.0], [10.9, 5278.0], [11.0, 5288.0], [11.1, 5297.0], [11.2, 5303.0], [11.3, 5334.0], [11.4, 5375.0], [11.5, 5400.0], [11.6, 5417.0], [11.7, 5434.0], [11.8, 5462.0], [11.9, 5539.0], [12.0, 5561.0], [12.1, 5617.0], [12.2, 5635.0], [12.3, 5645.0], [12.4, 5649.0], [12.5, 5704.0], [12.6, 5733.0], [12.7, 5754.0], [12.8, 5773.0], [12.9, 5838.0], [13.0, 5938.0], [13.1, 5968.0], [13.2, 5980.0], [13.3, 5999.0], [13.4, 6009.0], [13.5, 6017.0], [13.6, 6059.0], [13.7, 6091.0], [13.8, 6141.0], [13.9, 6142.0], [14.0, 6205.0], [14.1, 6287.0], [14.2, 6315.0], [14.3, 6365.0], [14.4, 6429.0], [14.5, 6445.0], [14.6, 6469.0], [14.7, 6517.0], [14.8, 6568.0], [14.9, 6606.0], [15.0, 6629.0], [15.1, 6652.0], [15.2, 6677.0], [15.3, 6688.0], [15.4, 6712.0], [15.5, 6756.0], [15.6, 6806.0], [15.7, 6836.0], [15.8, 6856.0], [15.9, 6892.0], [16.0, 6939.0], [16.1, 6995.0], [16.2, 7007.0], [16.3, 7014.0], [16.4, 7065.0], [16.5, 7104.0], [16.6, 7125.0], [16.7, 7172.0], [16.8, 7248.0], [16.9, 7289.0], [17.0, 7294.0], [17.1, 7308.0], [17.2, 7316.0], [17.3, 7347.0], [17.4, 7356.0], [17.5, 7363.0], [17.6, 7370.0], [17.7, 7379.0], [17.8, 7419.0], [17.9, 7436.0], [18.0, 7494.0], [18.1, 7557.0], [18.2, 7574.0], [18.3, 7595.0], [18.4, 7624.0], [18.5, 7627.0], [18.6, 7642.0], [18.7, 7655.0], [18.8, 7669.0], [18.9, 7694.0], [19.0, 7720.0], [19.1, 7752.0], [19.2, 7777.0], [19.3, 7783.0], [19.4, 7793.0], [19.5, 7804.0], [19.6, 7819.0], [19.7, 7851.0], [19.8, 7883.0], [19.9, 7950.0], [20.0, 7954.0], [20.1, 7973.0], [20.2, 8044.0], [20.3, 8089.0], [20.4, 8139.0], [20.5, 8151.0], [20.6, 8174.0], [20.7, 8214.0], [20.8, 8215.0], [20.9, 8231.0], [21.0, 8260.0], [21.1, 8277.0], [21.2, 8304.0], [21.3, 8315.0], [21.4, 8319.0], [21.5, 8359.0], [21.6, 8402.0], [21.7, 8415.0], [21.8, 8478.0], [21.9, 8517.0], [22.0, 8549.0], [22.1, 8557.0], [22.2, 8560.0], [22.3, 8615.0], [22.4, 8618.0], [22.5, 8657.0], [22.6, 8680.0], [22.7, 8719.0], [22.8, 8770.0], [22.9, 8783.0], [23.0, 8831.0], [23.1, 8865.0], [23.2, 8888.0], [23.3, 8936.0], [23.4, 8956.0], [23.5, 9020.0], [23.6, 9038.0], [23.7, 9070.0], [23.8, 9085.0], [23.9, 9103.0], [24.0, 9135.0], [24.1, 9160.0], [24.2, 9164.0], [24.3, 9182.0], [24.4, 9249.0], [24.5, 9282.0], [24.6, 9289.0], [24.7, 9299.0], [24.8, 9306.0], [24.9, 9334.0], [25.0, 9361.0], [25.1, 9392.0], [25.2, 9409.0], [25.3, 9439.0], [25.4, 9465.0], [25.5, 9493.0], [25.6, 9515.0], [25.7, 9582.0], [25.8, 9658.0], [25.9, 9692.0], [26.0, 9717.0], [26.1, 9732.0], [26.2, 9742.0], [26.3, 9762.0], [26.4, 9795.0], [26.5, 9809.0], [26.6, 9836.0], [26.7, 9854.0], [26.8, 9944.0], [26.9, 9994.0], [27.0, 10000.0], [27.1, 10016.0], [27.2, 10035.0], [27.3, 10063.0], [27.4, 10113.0], [27.5, 10142.0], [27.6, 10180.0], [27.7, 10193.0], [27.8, 10240.0], [27.9, 10273.0], [28.0, 10282.0], [28.1, 10289.0], [28.2, 10317.0], [28.3, 10345.0], [28.4, 10370.0], [28.5, 10382.0], [28.6, 10432.0], [28.7, 10437.0], [28.8, 10444.0], [28.9, 10504.0], [29.0, 10508.0], [29.1, 10543.0], [29.2, 10548.0], [29.3, 10592.0], [29.4, 10606.0], [29.5, 10660.0], [29.6, 10674.0], [29.7, 10691.0], [29.8, 10708.0], [29.9, 10720.0], [30.0, 10722.0], [30.1, 10732.0], [30.2, 10752.0], [30.3, 10797.0], [30.4, 10811.0], [30.5, 10862.0], [30.6, 10873.0], [30.7, 10895.0], [30.8, 10925.0], [30.9, 10960.0], [31.0, 10986.0], [31.1, 10991.0], [31.2, 11004.0], [31.3, 11009.0], [31.4, 11039.0], [31.5, 11053.0], [31.6, 11071.0], [31.7, 11082.0], [31.8, 11118.0], [31.9, 11144.0], [32.0, 11177.0], [32.1, 11210.0], [32.2, 11258.0], [32.3, 11286.0], [32.4, 11289.0], [32.5, 11290.0], [32.6, 11308.0], [32.7, 11353.0], [32.8, 11448.0], [32.9, 11482.0], [33.0, 11537.0], [33.1, 11541.0], [33.2, 11562.0], [33.3, 11579.0], [33.4, 11610.0], [33.5, 11640.0], [33.6, 11675.0], [33.7, 11689.0], [33.8, 11696.0], [33.9, 11702.0], [34.0, 11718.0], [34.1, 11749.0], [34.2, 11788.0], [34.3, 11797.0], [34.4, 11799.0], [34.5, 11865.0], [34.6, 11906.0], [34.7, 11912.0], [34.8, 11950.0], [34.9, 12015.0], [35.0, 12050.0], [35.1, 12061.0], [35.2, 12075.0], [35.3, 12080.0], [35.4, 12088.0], [35.5, 12157.0], [35.6, 12187.0], [35.7, 12259.0], [35.8, 12333.0], [35.9, 12380.0], [36.0, 12398.0], [36.1, 12418.0], [36.2, 12418.0], [36.3, 12448.0], [36.4, 12508.0], [36.5, 12555.0], [36.6, 12607.0], [36.7, 12627.0], [36.8, 12654.0], [36.9, 12674.0], [37.0, 12698.0], [37.1, 12710.0], [37.2, 12748.0], [37.3, 12762.0], [37.4, 12780.0], [37.5, 12792.0], [37.6, 12853.0], [37.7, 12900.0], [37.8, 12919.0], [37.9, 12924.0], [38.0, 12937.0], [38.1, 12950.0], [38.2, 12965.0], [38.3, 12998.0], [38.4, 13028.0], [38.5, 13086.0], [38.6, 13093.0], [38.7, 13118.0], [38.8, 13178.0], [38.9, 13195.0], [39.0, 13235.0], [39.1, 13244.0], [39.2, 13282.0], [39.3, 13291.0], [39.4, 13318.0], [39.5, 13327.0], [39.6, 13338.0], [39.7, 13347.0], [39.8, 13354.0], [39.9, 13380.0], [40.0, 13385.0], [40.1, 13413.0], [40.2, 13434.0], [40.3, 13441.0], [40.4, 13446.0], [40.5, 13478.0], [40.6, 13500.0], [40.7, 13513.0], [40.8, 13518.0], [40.9, 13538.0], [41.0, 13543.0], [41.1, 13563.0], [41.2, 13640.0], [41.3, 13660.0], [41.4, 13667.0], [41.5, 13673.0], [41.6, 13679.0], [41.7, 13745.0], [41.8, 13750.0], [41.9, 13767.0], [42.0, 13800.0], [42.1, 13816.0], [42.2, 13840.0], [42.3, 13860.0], [42.4, 13865.0], [42.5, 13885.0], [42.6, 13895.0], [42.7, 13910.0], [42.8, 13931.0], [42.9, 13941.0], [43.0, 13980.0], [43.1, 13981.0], [43.2, 13994.0], [43.3, 13998.0], [43.4, 14035.0], [43.5, 14052.0], [43.6, 14068.0], [43.7, 14097.0], [43.8, 14201.0], [43.9, 14202.0], [44.0, 14213.0], [44.1, 14227.0], [44.2, 14288.0], [44.3, 14352.0], [44.4, 14360.0], [44.5, 14368.0], [44.6, 14374.0], [44.7, 14396.0], [44.8, 14418.0], [44.9, 14479.0], [45.0, 14510.0], [45.1, 14520.0], [45.2, 14582.0], [45.3, 14631.0], [45.4, 14659.0], [45.5, 14719.0], [45.6, 14726.0], [45.7, 14737.0], [45.8, 14794.0], [45.9, 14804.0], [46.0, 14849.0], [46.1, 14907.0], [46.2, 14908.0], [46.3, 14920.0], [46.4, 14971.0], [46.5, 15004.0], [46.6, 15048.0], [46.7, 15074.0], [46.8, 15078.0], [46.9, 15101.0], [47.0, 15103.0], [47.1, 15119.0], [47.2, 15137.0], [47.3, 15160.0], [47.4, 15245.0], [47.5, 15264.0], [47.6, 15303.0], [47.7, 15306.0], [47.8, 15333.0], [47.9, 15350.0], [48.0, 15378.0], [48.1, 15401.0], [48.2, 15413.0], [48.3, 15419.0], [48.4, 15491.0], [48.5, 15515.0], [48.6, 15541.0], [48.7, 15553.0], [48.8, 15567.0], [48.9, 15591.0], [49.0, 15598.0], [49.1, 15613.0], [49.2, 15657.0], [49.3, 15667.0], [49.4, 15714.0], [49.5, 15722.0], [49.6, 15726.0], [49.7, 15747.0], [49.8, 15781.0], [49.9, 15786.0], [50.0, 15794.0], [50.1, 15845.0], [50.2, 15880.0], [50.3, 15907.0], [50.4, 15929.0], [50.5, 15954.0], [50.6, 16030.0], [50.7, 16045.0], [50.8, 16050.0], [50.9, 16064.0], [51.0, 16133.0], [51.1, 16141.0], [51.2, 16149.0], [51.3, 16176.0], [51.4, 16190.0], [51.5, 16201.0], [51.6, 16215.0], [51.7, 16245.0], [51.8, 16268.0], [51.9, 16285.0], [52.0, 16303.0], [52.1, 16354.0], [52.2, 16393.0], [52.3, 16420.0], [52.4, 16454.0], [52.5, 16478.0], [52.6, 16543.0], [52.7, 16566.0], [52.8, 16587.0], [52.9, 16622.0], [53.0, 16633.0], [53.1, 16635.0], [53.2, 16680.0], [53.3, 16694.0], [53.4, 16727.0], [53.5, 16743.0], [53.6, 16745.0], [53.7, 16765.0], [53.8, 16778.0], [53.9, 16793.0], [54.0, 16823.0], [54.1, 16866.0], [54.2, 16881.0], [54.3, 16907.0], [54.4, 16919.0], [54.5, 16928.0], [54.6, 16934.0], [54.7, 16936.0], [54.8, 16943.0], [54.9, 16948.0], [55.0, 16955.0], [55.1, 16964.0], [55.2, 16985.0], [55.3, 16988.0], [55.4, 16992.0], [55.5, 16997.0], [55.6, 17002.0], [55.7, 17012.0], [55.8, 17041.0], [55.9, 17087.0], [56.0, 17118.0], [56.1, 17129.0], [56.2, 17131.0], [56.3, 17140.0], [56.4, 17226.0], [56.5, 17246.0], [56.6, 17269.0], [56.7, 17285.0], [56.8, 17292.0], [56.9, 17307.0], [57.0, 17326.0], [57.1, 17354.0], [57.2, 17363.0], [57.3, 17373.0], [57.4, 17397.0], [57.5, 17427.0], [57.6, 17440.0], [57.7, 17442.0], [57.8, 17496.0], [57.9, 17504.0], [58.0, 17535.0], [58.1, 17554.0], [58.2, 17571.0], [58.3, 17580.0], [58.4, 17594.0], [58.5, 17614.0], [58.6, 17655.0], [58.7, 17670.0], [58.8, 17687.0], [58.9, 17729.0], [59.0, 17739.0], [59.1, 17783.0], [59.2, 17808.0], [59.3, 17812.0], [59.4, 17832.0], [59.5, 17843.0], [59.6, 17849.0], [59.7, 17908.0], [59.8, 17916.0], [59.9, 17940.0], [60.0, 17964.0], [60.1, 17976.0], [60.2, 17982.0], [60.3, 18000.0], [60.4, 18004.0], [60.5, 18020.0], [60.6, 18027.0], [60.7, 18029.0], [60.8, 18036.0], [60.9, 18054.0], [61.0, 18072.0], [61.1, 18085.0], [61.2, 18099.0], [61.3, 18106.0], [61.4, 18126.0], [61.5, 18132.0], [61.6, 18134.0], [61.7, 18147.0], [61.8, 18165.0], [61.9, 18191.0], [62.0, 18215.0], [62.1, 18269.0], [62.2, 18293.0], [62.3, 18311.0], [62.4, 18325.0], [62.5, 18342.0], [62.6, 18353.0], [62.7, 18364.0], [62.8, 18418.0], [62.9, 18437.0], [63.0, 18459.0], [63.1, 18470.0], [63.2, 18487.0], [63.3, 18494.0], [63.4, 18505.0], [63.5, 18511.0], [63.6, 18545.0], [63.7, 18553.0], [63.8, 18562.0], [63.9, 18575.0], [64.0, 18579.0], [64.1, 18590.0], [64.2, 18609.0], [64.3, 18647.0], [64.4, 18657.0], [64.5, 18665.0], [64.6, 18671.0], [64.7, 18680.0], [64.8, 18709.0], [64.9, 18734.0], [65.0, 18742.0], [65.1, 18747.0], [65.2, 18759.0], [65.3, 18779.0], [65.4, 18782.0], [65.5, 18791.0], [65.6, 18812.0], [65.7, 18844.0], [65.8, 18870.0], [65.9, 18902.0], [66.0, 18913.0], [66.1, 18929.0], [66.2, 18932.0], [66.3, 18991.0], [66.4, 19004.0], [66.5, 19016.0], [66.6, 19035.0], [66.7, 19048.0], [66.8, 19059.0], [66.9, 19069.0], [67.0, 19073.0], [67.1, 19121.0], [67.2, 19144.0], [67.3, 19161.0], [67.4, 19175.0], [67.5, 19239.0], [67.6, 19243.0], [67.7, 19254.0], [67.8, 19267.0], [67.9, 19303.0], [68.0, 19308.0], [68.1, 19358.0], [68.2, 19360.0], [68.3, 19385.0], [68.4, 19406.0], [68.5, 19424.0], [68.6, 19457.0], [68.7, 19472.0], [68.8, 19492.0], [68.9, 19512.0], [69.0, 19532.0], [69.1, 19535.0], [69.2, 19544.0], [69.3, 19548.0], [69.4, 19579.0], [69.5, 19585.0], [69.6, 19625.0], [69.7, 19664.0], [69.8, 19674.0], [69.9, 19694.0], [70.0, 19714.0], [70.1, 19746.0], [70.2, 19747.0], [70.3, 19778.0], [70.4, 19802.0], [70.5, 19834.0], [70.6, 19862.0], [70.7, 19884.0], [70.8, 19888.0], [70.9, 19910.0], [71.0, 19938.0], [71.1, 19954.0], [71.2, 19975.0], [71.3, 19992.0], [71.4, 20026.0], [71.5, 20071.0], [71.6, 20076.0], [71.7, 20086.0], [71.8, 20141.0], [71.9, 20157.0], [72.0, 20197.0], [72.1, 20218.0], [72.2, 20252.0], [72.3, 20304.0], [72.4, 20319.0], [72.5, 20349.0], [72.6, 20368.0], [72.7, 20436.0], [72.8, 20481.0], [72.9, 20510.0], [73.0, 20518.0], [73.1, 20542.0], [73.2, 20550.0], [73.3, 20596.0], [73.4, 20612.0], [73.5, 20668.0], [73.6, 20675.0], [73.7, 20695.0], [73.8, 20706.0], [73.9, 20720.0], [74.0, 20742.0], [74.1, 20801.0], [74.2, 20804.0], [74.3, 20830.0], [74.4, 20837.0], [74.5, 20882.0], [74.6, 20929.0], [74.7, 20943.0], [74.8, 20949.0], [74.9, 21035.0], [75.0, 21046.0], [75.1, 21082.0], [75.2, 21108.0], [75.3, 21182.0], [75.4, 21245.0], [75.5, 21266.0], [75.6, 21269.0], [75.7, 21345.0], [75.8, 21375.0], [75.9, 21482.0], [76.0, 21559.0], [76.1, 21579.0], [76.2, 21609.0], [76.3, 21656.0], [76.4, 21698.0], [76.5, 21781.0], [76.6, 21850.0], [76.7, 21951.0], [76.8, 21990.0], [76.9, 22028.0], [77.0, 22033.0], [77.1, 22186.0], [77.2, 22226.0], [77.3, 22232.0], [77.4, 22285.0], [77.5, 22408.0], [77.6, 22416.0], [77.7, 22426.0], [77.8, 22462.0], [77.9, 22597.0], [78.0, 22712.0], [78.1, 22741.0], [78.2, 22813.0], [78.3, 22828.0], [78.4, 22844.0], [78.5, 22887.0], [78.6, 22914.0], [78.7, 22935.0], [78.8, 22988.0], [78.9, 23020.0], [79.0, 23091.0], [79.1, 23277.0], [79.2, 23300.0], [79.3, 23323.0], [79.4, 23372.0], [79.5, 23415.0], [79.6, 23482.0], [79.7, 23518.0], [79.8, 23660.0], [79.9, 23688.0], [80.0, 23772.0], [80.1, 23783.0], [80.2, 23862.0], [80.3, 23942.0], [80.4, 23978.0], [80.5, 24039.0], [80.6, 24138.0], [80.7, 24267.0], [80.8, 24285.0], [80.9, 24568.0], [81.0, 24694.0], [81.1, 24701.0], [81.2, 24745.0], [81.3, 24787.0], [81.4, 24844.0], [81.5, 24901.0], [81.6, 24924.0], [81.7, 24941.0], [81.8, 25043.0], [81.9, 25121.0], [82.0, 25149.0], [82.1, 25237.0], [82.2, 25336.0], [82.3, 25431.0], [82.4, 25495.0], [82.5, 25510.0], [82.6, 25579.0], [82.7, 25630.0], [82.8, 25691.0], [82.9, 25791.0], [83.0, 25886.0], [83.1, 25923.0], [83.2, 26393.0], [83.3, 26612.0], [83.4, 26664.0], [83.5, 27007.0], [83.6, 27187.0], [83.7, 27455.0], [83.8, 27737.0], [83.9, 27795.0], [84.0, 27976.0], [84.1, 28324.0], [84.2, 28478.0], [84.3, 28678.0], [84.4, 28970.0], [84.5, 29083.0], [84.6, 29269.0], [84.7, 29301.0], [84.8, 29370.0], [84.9, 29564.0], [85.0, 29726.0], [85.1, 29885.0], [85.2, 29924.0], [85.3, 29996.0], [85.4, 30162.0], [85.5, 30206.0], [85.6, 30285.0], [85.7, 30310.0], [85.8, 30387.0], [85.9, 30422.0], [86.0, 30466.0], [86.1, 30525.0], [86.2, 30553.0], [86.3, 30861.0], [86.4, 30889.0], [86.5, 31167.0], [86.6, 31213.0], [86.7, 31226.0], [86.8, 31352.0], [86.9, 31458.0], [87.0, 31462.0], [87.1, 31475.0], [87.2, 31488.0], [87.3, 31506.0], [87.4, 31534.0], [87.5, 31681.0], [87.6, 31830.0], [87.7, 32001.0], [87.8, 32049.0], [87.9, 32098.0], [88.0, 32161.0], [88.1, 32263.0], [88.2, 32389.0], [88.3, 32593.0], [88.4, 32659.0], [88.5, 32704.0], [88.6, 32912.0], [88.7, 33009.0], [88.8, 33093.0], [88.9, 33444.0], [89.0, 33496.0], [89.1, 33596.0], [89.2, 33850.0], [89.3, 33914.0], [89.4, 34055.0], [89.5, 34170.0], [89.6, 34337.0], [89.7, 34727.0], [89.8, 34899.0], [89.9, 34923.0], [90.0, 34929.0], [90.1, 34930.0], [90.2, 34957.0], [90.3, 34997.0], [90.4, 35085.0], [90.5, 35204.0], [90.6, 35268.0], [90.7, 35595.0], [90.8, 35629.0], [90.9, 35730.0], [91.0, 35838.0], [91.1, 36007.0], [91.2, 36043.0], [91.3, 36449.0], [91.4, 36953.0], [91.5, 37403.0], [91.6, 37719.0], [91.7, 37940.0], [91.8, 38141.0], [91.9, 38467.0], [92.0, 38622.0], [92.1, 39134.0], [92.2, 39158.0], [92.3, 39285.0], [92.4, 39348.0], [92.5, 39469.0], [92.6, 39561.0], [92.7, 39635.0], [92.8, 39787.0], [92.9, 39937.0], [93.0, 40053.0], [93.1, 40055.0], [93.2, 40062.0], [93.3, 40064.0], [93.4, 40151.0], [93.5, 40247.0], [93.6, 40394.0], [93.7, 40649.0], [93.8, 40713.0], [93.9, 41110.0], [94.0, 41231.0], [94.1, 41731.0], [94.2, 41748.0], [94.3, 42221.0], [94.4, 42378.0], [94.5, 43051.0], [94.6, 43743.0], [94.7, 44529.0], [94.8, 45103.0], [94.9, 46123.0], [95.0, 46457.0], [95.1, 48242.0], [95.2, 48671.0], [95.3, 48936.0], [95.4, 48972.0], [95.5, 49305.0], [95.6, 49423.0], [95.7, 49683.0], [95.8, 49840.0], [95.9, 50291.0], [96.0, 50761.0], [96.1, 50862.0], [96.2, 51314.0], [96.3, 52269.0], [96.4, 52917.0], [96.5, 53361.0], [96.6, 53790.0], [96.7, 53969.0], [96.8, 54450.0], [96.9, 55044.0], [97.0, 55093.0], [97.1, 56975.0], [97.2, 58351.0], [97.3, 58986.0], [97.4, 60296.0], [97.5, 61394.0], [97.6, 61660.0], [97.7, 61981.0], [97.8, 62853.0], [97.9, 63766.0], [98.0, 65915.0], [98.1, 69461.0], [98.2, 69892.0], [98.3, 70981.0], [98.4, 71177.0], [98.5, 72018.0], [98.6, 72761.0], [98.7, 74093.0], [98.8, 81508.0], [98.9, 82837.0], [99.0, 85712.0], [99.1, 88420.0], [99.2, 88589.0], [99.3, 90267.0], [99.4, 91830.0], [99.5, 95491.0], [99.6, 98782.0], [99.7, 111908.0], [99.8, 114777.0], [99.9, 150660.0]], "isOverall": false, "label": "NCPPServerlessWestGFSAreaUS-1time-fullzedd", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 4500.0, "maxY": 270.0, "series": [{"data": [[95500.0, 2.0], [98700.0, 2.0], [114700.0, 2.0], [197800.0, 2.0], [32900.0, 4.0], [34500.0, 2.0], [35300.0, 2.0], [36900.0, 4.0], [38500.0, 2.0], [37700.0, 2.0], [39300.0, 4.0], [40100.0, 4.0], [41700.0, 8.0], [48900.0, 4.0], [49700.0, 2.0], [52900.0, 2.0], [51300.0, 2.0], [53700.0, 4.0], [55300.0, 2.0], [56900.0, 2.0], [64900.0, 2.0], [4500.0, 2.0], [4700.0, 270.0], [4800.0, 118.0], [5000.0, 2.0], [5100.0, 2.0], [5200.0, 22.0], [5300.0, 14.0], [85700.0, 2.0], [5600.0, 14.0], [5500.0, 8.0], [5400.0, 14.0], [5700.0, 14.0], [5800.0, 6.0], [5900.0, 12.0], [6100.0, 8.0], [6000.0, 16.0], [6300.0, 8.0], [6200.0, 8.0], [6500.0, 8.0], [6600.0, 18.0], [6400.0, 10.0], [6700.0, 8.0], [6900.0, 6.0], [6800.0, 16.0], [7000.0, 12.0], [7100.0, 10.0], [7200.0, 12.0], [7400.0, 12.0], [7300.0, 24.0], [7600.0, 22.0], [7500.0, 12.0], [7700.0, 20.0], [7900.0, 10.0], [7800.0, 14.0], [124100.0, 2.0], [8000.0, 8.0], [8100.0, 14.0], [8600.0, 14.0], [8200.0, 16.0], [8400.0, 12.0], [8800.0, 10.0], [9000.0, 14.0], [9200.0, 14.0], [9600.0, 8.0], [9400.0, 14.0], [10200.0, 14.0], [9800.0, 14.0], [10000.0, 14.0], [10600.0, 14.0], [10400.0, 14.0], [11000.0, 24.0], [11200.0, 18.0], [10800.0, 16.0], [11600.0, 18.0], [11400.0, 6.0], [12000.0, 24.0], [12200.0, 4.0], [11800.0, 4.0], [12600.0, 16.0], [12400.0, 12.0], [13000.0, 12.0], [13200.0, 14.0], [12800.0, 2.0], [13400.0, 20.0], [13600.0, 18.0], [13800.0, 24.0], [14000.0, 16.0], [14200.0, 16.0], [14400.0, 10.0], [14600.0, 6.0], [14800.0, 8.0], [15000.0, 16.0], [15200.0, 8.0], [15400.0, 14.0], [15800.0, 8.0], [15600.0, 12.0], [16000.0, 14.0], [16200.0, 18.0], [17200.0, 22.0], [16800.0, 12.0], [16400.0, 10.0], [17600.0, 14.0], [18000.0, 36.0], [18400.0, 22.0], [19200.0, 12.0], [18800.0, 14.0], [19600.0, 16.0], [20000.0, 12.0], [20400.0, 8.0], [20800.0, 18.0], [21200.0, 10.0], [21600.0, 10.0], [22400.0, 14.0], [22000.0, 4.0], [22800.0, 14.0], [23200.0, 4.0], [23600.0, 6.0], [24000.0, 2.0], [24400.0, 2.0], [25200.0, 4.0], [24800.0, 4.0], [25600.0, 8.0], [28400.0, 4.0], [29200.0, 4.0], [29600.0, 2.0], [30400.0, 10.0], [30800.0, 6.0], [31200.0, 6.0], [31600.0, 2.0], [32000.0, 10.0], [33600.0, 2.0], [35200.0, 6.0], [36800.0, 2.0], [36000.0, 6.0], [38400.0, 2.0], [40000.0, 16.0], [39200.0, 4.0], [46400.0, 2.0], [49600.0, 2.0], [52000.0, 2.0], [52800.0, 2.0], [54400.0, 2.0], [57600.0, 2.0], [59200.0, 2.0], [61600.0, 4.0], [72000.0, 2.0], [91200.0, 2.0], [100800.0, 2.0], [81500.0, 2.0], [111900.0, 2.0], [34700.0, 2.0], [33900.0, 4.0], [33100.0, 2.0], [35500.0, 2.0], [37900.0, 2.0], [39500.0, 6.0], [40300.0, 2.0], [41100.0, 4.0], [45100.0, 2.0], [48300.0, 2.0], [50700.0, 4.0], [53100.0, 2.0], [53900.0, 4.0], [61900.0, 2.0], [69400.0, 2.0], [71000.0, 2.0], [91800.0, 2.0], [90200.0, 2.0], [17300.0, 20.0], [16500.0, 12.0], [16900.0, 48.0], [17700.0, 14.0], [18100.0, 26.0], [18500.0, 28.0], [19300.0, 22.0], [18900.0, 16.0], [19700.0, 16.0], [20100.0, 12.0], [20500.0, 16.0], [21300.0, 8.0], [20900.0, 10.0], [22100.0, 4.0], [21700.0, 4.0], [22500.0, 2.0], [22900.0, 10.0], [23300.0, 8.0], [23700.0, 6.0], [24500.0, 2.0], [24100.0, 6.0], [24900.0, 10.0], [25300.0, 4.0], [26500.0, 2.0], [25700.0, 4.0], [26900.0, 2.0], [27300.0, 2.0], [27700.0, 4.0], [28900.0, 2.0], [29300.0, 6.0], [30500.0, 4.0], [29700.0, 2.0], [30100.0, 2.0], [31300.0, 6.0], [30900.0, 2.0], [31700.0, 2.0], [32100.0, 4.0], [32500.0, 4.0], [33000.0, 6.0], [33800.0, 2.0], [36200.0, 2.0], [37800.0, 2.0], [38600.0, 2.0], [40200.0, 4.0], [39400.0, 2.0], [42600.0, 2.0], [45000.0, 2.0], [43400.0, 2.0], [49000.0, 2.0], [48200.0, 2.0], [49800.0, 4.0], [52200.0, 2.0], [54600.0, 2.0], [61000.0, 2.0], [60200.0, 2.0], [72400.0, 2.0], [74000.0, 2.0], [88400.0, 4.0], [65900.0, 2.0], [77100.0, 2.0], [34100.0, 2.0], [34900.0, 18.0], [35700.0, 4.0], [38100.0, 2.0], [38900.0, 2.0], [40500.0, 2.0], [39700.0, 4.0], [43700.0, 2.0], [44500.0, 2.0], [46100.0, 2.0], [49300.0, 4.0], [53300.0, 2.0], [54100.0, 2.0], [58900.0, 2.0], [61300.0, 2.0], [63700.0, 2.0], [69800.0, 2.0], [93800.0, 2.0], [95400.0, 2.0], [81700.0, 2.0], [8500.0, 16.0], [8700.0, 10.0], [8300.0, 16.0], [9100.0, 18.0], [8900.0, 10.0], [9500.0, 6.0], [9700.0, 18.0], [9300.0, 18.0], [10100.0, 16.0], [9900.0, 6.0], [10700.0, 22.0], [10300.0, 14.0], [10500.0, 18.0], [10900.0, 14.0], [11100.0, 12.0], [11300.0, 8.0], [11500.0, 16.0], [11700.0, 22.0], [12100.0, 6.0], [11900.0, 10.0], [12500.0, 8.0], [12700.0, 22.0], [12300.0, 12.0], [12900.0, 26.0], [13300.0, 28.0], [13100.0, 10.0], [13700.0, 12.0], [13500.0, 22.0], [13900.0, 26.0], [14300.0, 18.0], [14100.0, 2.0], [14500.0, 12.0], [14700.0, 14.0], [15300.0, 18.0], [14900.0, 16.0], [15100.0, 18.0], [15500.0, 22.0], [15700.0, 24.0], [16300.0, 10.0], [16100.0, 20.0], [15900.0, 14.0], [16600.0, 20.0], [17000.0, 16.0], [17400.0, 14.0], [17800.0, 18.0], [18200.0, 14.0], [18600.0, 24.0], [19000.0, 26.0], [19400.0, 16.0], [19800.0, 16.0], [20200.0, 10.0], [21000.0, 14.0], [20600.0, 16.0], [21400.0, 4.0], [22200.0, 12.0], [21800.0, 4.0], [23400.0, 10.0], [23000.0, 8.0], [22600.0, 2.0], [24200.0, 4.0], [23800.0, 4.0], [25000.0, 4.0], [25400.0, 6.0], [24600.0, 4.0], [26600.0, 6.0], [25800.0, 4.0], [27400.0, 2.0], [27000.0, 2.0], [28200.0, 2.0], [28600.0, 4.0], [27800.0, 2.0], [29000.0, 4.0], [29800.0, 4.0], [30600.0, 2.0], [30200.0, 10.0], [31400.0, 14.0], [32600.0, 4.0], [31800.0, 2.0], [32200.0, 4.0], [34000.0, 4.0], [34800.0, 4.0], [35600.0, 2.0], [36400.0, 2.0], [38000.0, 2.0], [39600.0, 2.0], [41200.0, 2.0], [50800.0, 4.0], [58800.0, 2.0], [62800.0, 2.0], [69600.0, 2.0], [85600.0, 2.0], [71100.0, 2.0], [72700.0, 2.0], [87100.0, 2.0], [150600.0, 2.0], [33500.0, 4.0], [34300.0, 2.0], [35100.0, 2.0], [35900.0, 2.0], [38300.0, 2.0], [40700.0, 4.0], [39100.0, 6.0], [39900.0, 2.0], [42300.0, 2.0], [41500.0, 2.0], [46300.0, 2.0], [45500.0, 2.0], [48700.0, 2.0], [58300.0, 2.0], [73400.0, 2.0], [70900.0, 4.0], [88500.0, 2.0], [112500.0, 2.0], [16700.0, 20.0], [17100.0, 14.0], [17500.0, 24.0], [17900.0, 22.0], [18300.0, 18.0], [18700.0, 28.0], [19100.0, 18.0], [19500.0, 26.0], [20300.0, 14.0], [19900.0, 22.0], [20700.0, 12.0], [21100.0, 6.0], [21500.0, 8.0], [22300.0, 2.0], [21900.0, 10.0], [22700.0, 8.0], [23500.0, 4.0], [23100.0, 2.0], [23900.0, 10.0], [25500.0, 6.0], [24700.0, 14.0], [25100.0, 8.0], [25900.0, 2.0], [26300.0, 4.0], [27500.0, 2.0], [27100.0, 4.0], [28300.0, 2.0], [27900.0, 2.0], [29500.0, 4.0], [28700.0, 2.0], [30300.0, 6.0], [29900.0, 8.0], [31500.0, 8.0], [31100.0, 4.0], [32700.0, 4.0], [32300.0, 4.0], [34200.0, 2.0], [33400.0, 6.0], [35800.0, 4.0], [35000.0, 4.0], [37400.0, 2.0], [39800.0, 2.0], [40600.0, 2.0], [42200.0, 4.0], [43000.0, 2.0], [47800.0, 2.0], [48600.0, 2.0], [49400.0, 4.0], [50200.0, 2.0], [55000.0, 4.0], [62200.0, 2.0], [63000.0, 2.0], [68400.0, 2.0], [82800.0, 2.0]], "isOverall": false, "label": "NCPPServerlessWestGFSAreaUS-1time-fullzedd", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 197800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 878.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2862.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2862.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 878.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.65832926E12, "maxY": 497.681992337165, "series": [{"data": [[1.65832938E12, 16.03448275862069], [1.65832926E12, 497.681992337165], [1.65832944E12, 1.0], [1.65832932E12, 395.74172185430416]], "isOverall": false, "label": "NCPPServerlessWestGFSAreaUS-1time-fullzedd", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65832944E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4751.0, "minX": 1.0, "maxY": 197864.0, "series": [{"data": [[2.0, 150660.0], [3.0, 124127.0], [4.0, 77107.0], [5.0, 100805.0], [6.0, 85615.0], [7.0, 81508.0], [8.0, 114777.0], [9.0, 112534.0], [10.0, 95506.0], [11.0, 111908.0], [12.0, 85712.0], [13.0, 90267.0], [14.0, 82837.0], [15.0, 91253.0], [16.0, 88589.0], [17.0, 88426.0], [18.0, 72761.0], [19.0, 72018.0], [20.0, 70972.0], [21.0, 55044.0], [22.0, 72499.0], [23.0, 87129.0], [24.0, 53790.0], [26.0, 71007.5], [27.0, 63012.0], [28.0, 98782.0], [29.0, 48671.0], [30.0, 48242.0], [31.0, 95491.0], [33.0, 91830.0], [32.0, 56975.0], [35.0, 63766.0], [34.0, 69625.0], [37.0, 53958.0], [36.0, 71177.0], [39.0, 64926.0], [38.0, 93814.0], [41.0, 54450.0], [40.0, 42692.0], [43.0, 65915.0], [42.0, 50761.0], [45.0, 41795.0], [44.0, 49879.0], [47.0, 59227.0], [46.0, 39561.0], [49.0, 48318.0], [48.0, 40258.0], [51.0, 88420.0], [50.0, 41743.0], [53.0, 69892.0], [52.0, 39205.0], [55.0, 71016.0], [54.0, 50862.0], [57.0, 40167.0], [56.0, 44529.0], [59.0, 39155.0], [58.0, 34549.0], [61.0, 45583.0], [60.0, 34170.0], [63.0, 39937.0], [62.0, 49305.0], [67.0, 39469.0], [66.0, 31167.0], [65.0, 29924.0], [64.0, 35085.0], [71.0, 61981.0], [70.0, 48745.0], [69.0, 37719.0], [68.0, 30882.0], [75.0, 61040.0], [74.0, 61394.0], [73.0, 34957.0], [72.0, 61660.0], [79.0, 31488.0], [78.0, 30206.0], [77.0, 40080.0], [76.0, 46123.0], [83.0, 38037.0], [82.0, 49395.0], [81.0, 29996.0], [80.0, 49423.0], [87.0, 40649.0], [86.0, 29269.0], [85.0, 42254.0], [84.0, 35268.0], [91.0, 40062.0], [90.0, 31534.0], [89.0, 39134.0], [88.0, 61651.0], [95.0, 35595.0], [94.0, 26612.0], [93.0, 39576.0], [92.0, 31681.0], [99.0, 23372.0], [98.0, 39897.0], [97.0, 52269.0], [96.0, 39775.0], [103.0, 40705.0], [102.0, 40064.0], [101.0, 34927.0], [100.0, 40394.0], [107.0, 22988.0], [106.0, 40151.0], [105.0, 40055.0], [104.0, 40064.0], [111.0, 35040.0], [110.0, 70981.0], [109.0, 54644.0], [108.0, 40247.0], [115.0, 23415.0], [114.0, 39285.0], [113.0, 23518.0], [112.0, 31318.0], [119.0, 23020.0], [118.0, 34337.0], [117.0, 40053.0], [116.0, 21472.0], [123.0, 41598.0], [122.0, 33914.0], [121.0, 53700.0], [120.0, 73421.0], [127.0, 22126.0], [126.0, 38588.0], [125.0, 74093.0], [124.0, 38622.0], [135.0, 53969.0], [134.0, 36007.0], [133.0, 30204.0], [132.0, 36015.0], [131.0, 55322.0], [130.0, 32263.0], [129.0, 21035.0], [128.0, 30404.0], [143.0, 50824.0], [142.0, 16948.0], [141.0, 34908.0], [140.0, 17710.0], [139.0, 34972.0], [138.0, 54143.0], [137.0, 40059.0], [136.0, 50291.0], [151.0, 34997.0], [150.0, 69461.0], [149.0, 32912.0], [148.0, 29603.0], [147.0, 18215.0], [146.0, 25579.0], [145.0, 58875.0], [144.0, 52882.0], [159.0, 13767.0], [158.0, 23401.0], [157.0, 51314.0], [156.0, 15008.0], [155.0, 18028.0], [154.0, 20277.0], [153.0, 18812.0], [152.0, 30422.0], [167.0, 34930.0], [166.0, 15087.0], [165.0, 16936.0], [164.0, 17087.0], [163.0, 25717.0], [162.0, 27976.0], [161.0, 68496.0], [160.0, 34899.0], [175.0, 13679.0], [174.0, 18709.0], [173.0, 24844.0], [172.0, 13805.0], [171.0, 27316.0], [170.0, 15722.0], [169.0, 25510.0], [168.0, 17002.0], [183.0, 17226.0], [182.0, 22844.0], [181.0, 14400.0], [180.0, 17228.0], [179.0, 19239.0], [178.0, 13994.0], [177.0, 13465.0], [176.0, 13998.0], [191.0, 29301.0], [190.0, 13641.0], [189.0, 15918.0], [188.0, 13816.0], [187.0, 29564.0], [186.0, 14201.0], [185.0, 14737.0], [184.0, 17287.0], [198.0, 14837.0], [197.0, 13595.0], [196.0, 21753.0], [195.0, 15515.0], [194.0, 34055.0], [193.0, 14288.0], [192.0, 15145.0], [207.0, 32535.0], [206.0, 23119.0], [205.0, 15103.0], [204.0, 15167.0], [203.0, 16173.0], [202.0, 18791.0], [201.0, 13673.0], [200.0, 20753.5], [215.0, 12900.0], [214.0, 13441.0], [213.0, 14551.5], [211.0, 15106.0], [210.0, 13543.0], [209.0, 24787.0], [208.0, 13291.0], [223.0, 13986.0], [222.0, 22226.0], [221.0, 48936.0], [220.0, 14971.0], [219.0, 25149.0], [218.0, 20929.0], [217.0, 14213.0], [216.0, 25791.0], [231.0, 12703.0], [230.0, 12710.0], [229.0, 12674.0], [228.0, 12937.0], [227.0, 13910.0], [226.0, 12998.0], [225.0, 23676.0], [224.0, 14728.0], [239.0, 13895.0], [238.0, 17554.0], [237.0, 12418.0], [236.0, 36043.0], [235.0, 12783.0], [234.0, 12919.0], [233.0, 12080.0], [232.0, 14255.0], [247.0, 14994.0], [246.0, 15650.0], [245.0, 13088.0], [244.0, 31222.0], [243.0, 31226.0], [242.0, 13904.0], [241.0, 16943.0], [240.0, 23931.0], [255.0, 19073.0], [254.0, 16489.0], [252.0, 30162.0], [251.0, 13542.0], [250.0, 11950.0], [249.0, 11906.0], [248.0, 31184.0], [270.0, 13829.0], [271.0, 14794.0], [269.0, 29326.0], [268.0, 23000.0], [267.0, 15845.0], [266.0, 16199.0], [265.0, 62853.0], [264.0, 19261.0], [263.0, 12611.0], [257.0, 27007.0], [256.0, 26393.0], [259.0, 15048.0], [258.0, 12089.0], [262.0, 17373.0], [261.0, 11937.0], [260.0, 20882.0], [286.0, 13238.0], [287.0, 14025.0], [285.0, 25390.0], [284.0, 13363.0], [283.0, 10437.0], [282.0, 12088.0], [281.0, 14202.0], [280.0, 13347.0], [279.0, 12644.0], [273.0, 10720.0], [272.0, 12565.0], [275.0, 10967.0], [274.0, 12015.0], [278.0, 24640.0], [277.0, 34923.0], [276.0, 15880.0], [302.0, 11293.0], [301.0, 9545.5], [303.0, 29370.0], [300.0, 12380.0], [299.0, 12508.0], [298.0, 13195.0], [297.0, 16639.0], [296.0, 15810.0], [294.0, 14942.0], [289.0, 12607.0], [288.0, 23942.0], [291.0, 43051.0], [290.0, 14593.0], [293.0, 16500.0], [292.0, 30207.0], [319.0, 11670.0], [306.0, 17558.0], [311.0, 10441.0], [305.0, 11118.0], [304.0, 11770.0], [310.0, 11579.0], [309.0, 10892.0], [308.0, 11865.0], [314.0, 11693.5], [318.0, 18770.0], [317.0, 11210.0], [316.0, 12351.0], [307.0, 17397.0], [315.0, 8971.0], [313.0, 13435.0], [312.0, 17358.0], [334.0, 12079.0], [335.0, 17012.0], [333.0, 11039.0], [332.0, 16910.0], [331.0, 9314.0], [330.0, 12741.0], [329.0, 58986.0], [328.0, 62261.0], [327.0, 11273.0], [321.0, 12333.0], [320.0, 11177.0], [323.0, 10925.0], [322.0, 15306.0], [326.0, 20669.0], [325.0, 19579.0], [324.0, 10199.0], [350.0, 16929.0], [340.0, 8646.0], [341.0, 10543.0], [343.0, 9135.0], [337.0, 11702.0], [336.0, 11009.0], [339.0, 16478.0], [338.0, 27795.0], [342.0, 22408.0], [351.0, 11541.0], [349.0, 11799.0], [348.0, 11542.0], [347.0, 13304.0], [346.0, 12774.0], [345.0, 23946.0], [344.0, 7308.0], [366.0, 9582.0], [352.0, 16565.5], [353.0, 14907.0], [355.0, 30429.0], [354.0, 15739.0], [359.0, 11696.0], [358.0, 8550.0], [357.0, 14725.0], [356.0, 7811.0], [367.0, 6836.0], [365.0, 9421.0], [364.0, 18633.0], [363.0, 12050.0], [362.0, 11579.0], [361.0, 41731.0], [360.0, 13660.0], [382.0, 5645.0], [373.0, 6927.0], [372.0, 8937.0], [374.0, 8304.0], [375.0, 8843.5], [377.0, 24122.0], [379.0, 12634.5], [383.0, 7007.0], [376.0, 18132.0], [381.0, 16987.0], [380.0, 6939.0], [371.0, 14746.0], [370.0, 5754.0], [369.0, 49840.0], [368.0, 16141.0], [378.0, 9161.0], [398.0, 17672.0], [397.0, 18981.0], [399.0, 38467.0], [396.0, 7851.0], [395.0, 6688.0], [394.0, 10317.0], [393.0, 20668.0], [392.0, 9845.0], [391.0, 9182.0], [385.0, 15954.0], [384.0, 13752.0], [387.0, 7379.0], [386.0, 6849.0], [390.0, 8783.0], [389.0, 8770.0], [388.0, 6464.0], [414.0, 6429.0], [413.0, 8112.5], [415.0, 57680.0], [412.0, 9439.0], [411.0, 7363.0], [410.0, 23091.0], [409.0, 8821.0], [408.0, 9348.0], [407.0, 37940.0], [401.0, 7793.0], [400.0, 10016.0], [403.0, 34929.0], [402.0, 9824.0], [406.0, 37878.0], [405.0, 7883.0], [404.0, 8260.0], [430.0, 5629.0], [431.0, 6389.0], [429.0, 36820.0], [428.0, 7419.0], [427.0, 58351.0], [426.0, 5226.0], [425.0, 13097.0], [424.0, 7564.0], [423.0, 11482.0], [417.0, 17036.0], [416.0, 9155.0], [419.0, 16946.0], [418.0, 41748.0], [422.0, 7595.0], [421.0, 8657.0], [420.0, 9392.0], [446.0, 10860.0], [447.0, 7655.0], [445.0, 5980.0], [444.0, 5139.0], [443.0, 7616.0], [442.0, 8560.0], [441.0, 17940.0], [440.0, 11290.0], [439.0, 12543.0], [433.0, 6091.0], [432.0, 35995.0], [435.0, 39158.0], [434.0, 6568.0], [438.0, 22813.0], [437.0, 8955.0], [462.0, 33850.0], [459.0, 6672.5], [461.0, 8319.0], [460.0, 7314.0], [458.0, 4826.0], [457.0, 35810.0], [456.0, 6615.0], [455.0, 10273.0], [449.0, 4795.0], [448.0, 11286.0], [451.0, 16995.0], [450.0, 5754.0], [454.0, 4803.0], [453.0, 20481.0], [452.0, 55093.0], [478.0, 4874.0], [479.0, 4770.0], [477.0, 4827.0], [476.0, 16934.0], [475.0, 6031.0], [474.0, 8277.0], [473.0, 10984.666666666668], [470.0, 5012.0], [467.0, 4768.0], [466.0, 15683.0], [465.0, 16904.0], [464.0, 11318.5], [468.0, 7370.0], [493.0, 13099.0], [495.0, 5328.5], [492.0, 11689.0], [483.0, 4777.0], [481.0, 8618.0], [480.0, 4812.0], [491.0, 5032.5], [489.0, 5828.0], [488.0, 4758.0], [487.0, 36953.0], [486.0, 16743.0], [485.0, 4793.0], [484.0, 11792.0], [500.0, 15587.529845246874], [499.0, 15518.0], [498.0, 4751.0], [497.0, 22114.5], [1.0, 197864.0]], "isOverall": false, "label": "NCPPServerlessWestGFSAreaUS-1time-fullzedd", "isController": false}, {"data": [[432.32620320855625, 18736.631550802154]], "isOverall": false, "label": "NCPPServerlessWestGFSAreaUS-1time-fullzedd-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 38.3, "minX": 1.65832926E12, "maxY": 4.81007321E7, "series": [{"data": [[1.65832938E12, 1300074.6], [1.65832926E12, 3.510188846666667E7], [1.65832944E12, 59061.166666666664], [1.65832932E12, 4.81007321E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65832938E12, 842.6], [1.65832926E12, 22750.2], [1.65832944E12, 38.3], [1.65832932E12, 31176.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65832944E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 14500.810983397208, "minX": 1.65832926E12, "maxY": 197864.0, "series": [{"data": [[1.65832938E12, 85053.99999999997], [1.65832926E12, 14500.810983397208], [1.65832944E12, 197864.0], [1.65832932E12, 19885.464522232734]], "isOverall": false, "label": "NCPPServerlessWestGFSAreaUS-1time-fullzedd", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65832944E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5006.624521072795, "minX": 1.65832926E12, "maxY": 27057.793103448275, "series": [{"data": [[1.65832938E12, 27057.793103448275], [1.65832926E12, 5006.624521072795], [1.65832944E12, 6068.0], [1.65832932E12, 8883.749290444654]], "isOverall": false, "label": "NCPPServerlessWestGFSAreaUS-1time-fullzedd", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65832944E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.65832926E12, "maxY": 1534.5998107852404, "series": [{"data": [[1.65832938E12, 34.37931034482759], [1.65832926E12, 795.9961685823755], [1.65832944E12, 0.0], [1.65832932E12, 1534.5998107852404]], "isOverall": false, "label": "NCPPServerlessWestGFSAreaUS-1time-fullzedd", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65832944E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4575.0, "minX": 1.65832926E12, "maxY": 197864.0, "series": [{"data": [[1.65832938E12, 150660.0], [1.65832926E12, 40526.0], [1.65832944E12, 197864.0], [1.65832932E12, 95491.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65832938E12, 119452.0], [1.65832926E12, 21190.70000000001], [1.65832944E12, 197864.0], [1.65832932E12, 40705.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65832938E12, 150660.0], [1.65832926E12, 32999.0], [1.65832944E12, 197864.0], [1.65832932E12, 70665.19000000005]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65832938E12, 144026.75], [1.65832926E12, 23800.0], [1.65832944E12, 197864.0], [1.65832932E12, 51314.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65832938E12, 48242.0], [1.65832926E12, 5323.0], [1.65832944E12, 197864.0], [1.65832932E12, 4575.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65832938E12, 84226.0], [1.65832926E12, 17342.0], [1.65832944E12, 197864.0], [1.65832932E12, 17313.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65832944E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 4766.0, "minX": 2.0, "maxY": 81508.0, "series": [{"data": [[2.0, 81508.0], [32.0, 11702.0], [34.0, 9503.0], [36.0, 15556.0], [38.0, 10673.0], [40.0, 16146.0], [42.0, 16322.0], [48.0, 16961.0], [50.0, 16022.0], [52.0, 22373.0], [54.0, 16743.0], [56.0, 18366.5], [58.0, 23708.5], [62.0, 13093.0], [4.0, 44116.0], [66.0, 13907.0], [70.0, 16188.0], [68.0, 22784.5], [74.0, 17323.0], [72.0, 12586.0], [76.0, 18680.0], [78.0, 8468.5], [82.0, 20994.5], [80.0, 10646.0], [84.0, 9422.5], [86.0, 20610.0], [94.0, 17992.5], [6.0, 45998.5], [104.0, 15722.0], [118.0, 18506.5], [116.0, 12257.0], [8.0, 36293.0], [132.0, 16739.0], [138.0, 18577.0], [142.0, 19371.5], [10.0, 34267.0], [12.0, 30401.5], [14.0, 50291.0], [16.0, 30882.0], [18.0, 40110.0], [20.0, 52882.0], [22.0, 13590.0], [24.0, 23020.0], [26.0, 15306.0], [28.0, 11767.5], [30.0, 21085.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 16929.0], [2.0, 78342.0], [34.0, 30285.0], [36.0, 8044.0], [38.0, 6806.0], [40.0, 9020.0], [42.0, 5704.0], [48.0, 5629.0], [50.0, 30162.0], [52.0, 4819.0], [54.0, 5032.5], [56.0, 4770.0], [58.0, 4803.0], [62.0, 4809.5], [4.0, 80675.0], [66.0, 31222.0], [70.0, 4784.5], [68.0, 6651.0], [74.0, 31496.0], [72.0, 5753.5], [76.0, 14097.0], [78.0, 4828.0], [82.0, 4841.0], [80.0, 5446.0], [84.0, 4768.0], [86.0, 9576.0], [94.0, 12780.0], [6.0, 35343.5], [104.0, 17287.0], [118.0, 4778.0], [116.0, 4847.0], [132.0, 4776.0], [8.0, 43065.0], [138.0, 4766.0], [142.0, 4777.0], [10.0, 34908.0], [12.0, 29483.5], [14.0, 34957.0], [16.0, 34899.0], [18.0, 30404.0], [20.0, 29603.0], [22.0, 5284.0], [24.0, 4830.0], [26.0, 16910.0], [28.0, 7325.5], [30.0, 14396.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 142.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 2.0, "maxY": 38578.5, "series": [{"data": [[2.0, 8129.0], [32.0, 7636.0], [34.0, 6186.5], [36.0, 5442.0], [38.0, 5946.0], [40.0, 5818.0], [42.0, 6154.0], [48.0, 5603.0], [50.0, 10441.5], [52.0, 6510.0], [54.0, 6465.0], [56.0, 5522.5], [58.0, 6569.0], [62.0, 6151.0], [4.0, 5658.0], [66.0, 6489.5], [70.0, 5766.0], [68.0, 6740.5], [74.0, 8217.5], [72.0, 6584.0], [76.0, 6608.0], [78.0, 6181.5], [82.0, 6338.5], [80.0, 6814.0], [84.0, 5780.0], [86.0, 6347.0], [94.0, 6366.0], [6.0, 38578.5], [104.0, 7634.0], [118.0, 5468.5], [116.0, 6147.0], [8.0, 18598.5], [132.0, 5743.0], [138.0, 5370.0], [142.0, 5551.0], [10.0, 6278.0], [12.0, 29887.0], [14.0, 6504.0], [16.0, 13947.0], [18.0, 27743.0], [20.0, 14731.0], [22.0, 5999.5], [24.0, 11320.0], [26.0, 7579.0], [28.0, 7479.0], [30.0, 5675.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 0.0], [2.0, 0.0], [34.0, 0.0], [36.0, 0.0], [38.0, 0.0], [40.0, 0.0], [42.0, 0.0], [48.0, 0.0], [50.0, 0.0], [52.0, 0.0], [54.0, 0.0], [56.0, 0.0], [58.0, 0.0], [62.0, 0.0], [4.0, 0.0], [66.0, 0.0], [70.0, 0.0], [68.0, 0.0], [74.0, 0.0], [72.0, 0.0], [76.0, 0.0], [78.0, 0.0], [82.0, 0.0], [80.0, 0.0], [84.0, 0.0], [86.0, 0.0], [94.0, 0.0], [6.0, 0.0], [104.0, 0.0], [118.0, 0.0], [116.0, 0.0], [132.0, 0.0], [8.0, 0.0], [138.0, 0.0], [142.0, 0.0], [10.0, 0.0], [12.0, 0.0], [14.0, 0.0], [16.0, 0.0], [18.0, 0.0], [20.0, 0.0], [22.0, 0.0], [24.0, 0.0], [26.0, 0.0], [28.0, 0.0], [30.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 142.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 19.566666666666666, "minX": 1.65832926E12, "maxY": 42.766666666666666, "series": [{"data": [[1.65832926E12, 42.766666666666666], [1.65832932E12, 19.566666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65832932E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.65832926E12, "maxY": 27.133333333333333, "series": [{"data": [[1.65832938E12, 0.7333333333333333], [1.65832926E12, 19.8], [1.65832944E12, 0.03333333333333333], [1.65832932E12, 27.133333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.65832926E12, 0.2], [1.65832932E12, 0.1]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}, {"data": [[1.65832938E12, 0.23333333333333334], [1.65832926E12, 5.966666666666667], [1.65832932E12, 7.633333333333334]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketTimeoutException", "isController": false}, {"data": [[1.65832926E12, 0.13333333333333333], [1.65832932E12, 0.36666666666666664]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65832944E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.65832926E12, "maxY": 27.133333333333333, "series": [{"data": [[1.65832938E12, 0.7333333333333333], [1.65832926E12, 19.8], [1.65832944E12, 0.03333333333333333], [1.65832932E12, 27.133333333333333]], "isOverall": false, "label": "NCPPServerlessWestGFSAreaUS-1time-fullzedd-success", "isController": false}, {"data": [[1.65832938E12, 0.23333333333333334], [1.65832926E12, 6.3], [1.65832932E12, 8.1]], "isOverall": false, "label": "NCPPServerlessWestGFSAreaUS-1time-fullzedd-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65832944E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.65832926E12, "maxY": 27.133333333333333, "series": [{"data": [[1.65832938E12, 0.7333333333333333], [1.65832926E12, 19.8], [1.65832944E12, 0.03333333333333333], [1.65832932E12, 27.133333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65832938E12, 0.23333333333333334], [1.65832926E12, 6.3], [1.65832932E12, 8.1]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65832944E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


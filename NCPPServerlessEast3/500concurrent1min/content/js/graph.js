/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4729.0, "minX": 0.0, "maxY": 212806.0, "series": [{"data": [[0.0, 4729.0], [0.1, 4732.0], [0.2, 4736.0], [0.3, 4740.0], [0.4, 4742.0], [0.5, 4742.0], [0.6, 4743.0], [0.7, 4743.0], [0.8, 4744.0], [0.9, 4744.0], [1.0, 4745.0], [1.1, 4746.0], [1.2, 4747.0], [1.3, 4747.0], [1.4, 4748.0], [1.5, 4748.0], [1.6, 4749.0], [1.7, 4749.0], [1.8, 4750.0], [1.9, 4750.0], [2.0, 4751.0], [2.1, 4751.0], [2.2, 4751.0], [2.3, 4752.0], [2.4, 4752.0], [2.5, 4752.0], [2.6, 4753.0], [2.7, 4753.0], [2.8, 4754.0], [2.9, 4755.0], [3.0, 4756.0], [3.1, 4756.0], [3.2, 4756.0], [3.3, 4756.0], [3.4, 4756.0], [3.5, 4757.0], [3.6, 4757.0], [3.7, 4757.0], [3.8, 4758.0], [3.9, 4758.0], [4.0, 4759.0], [4.1, 4759.0], [4.2, 4760.0], [4.3, 4760.0], [4.4, 4761.0], [4.5, 4761.0], [4.6, 4761.0], [4.7, 4762.0], [4.8, 4762.0], [4.9, 4762.0], [5.0, 4763.0], [5.1, 4763.0], [5.2, 4763.0], [5.3, 4764.0], [5.4, 4764.0], [5.5, 4765.0], [5.6, 4765.0], [5.7, 4766.0], [5.8, 4766.0], [5.9, 4766.0], [6.0, 4767.0], [6.1, 4767.0], [6.2, 4767.0], [6.3, 4767.0], [6.4, 4767.0], [6.5, 4768.0], [6.6, 4768.0], [6.7, 4769.0], [6.8, 4769.0], [6.9, 4769.0], [7.0, 4769.0], [7.1, 4770.0], [7.2, 4770.0], [7.3, 4770.0], [7.4, 4770.0], [7.5, 4771.0], [7.6, 4771.0], [7.7, 4771.0], [7.8, 4771.0], [7.9, 4772.0], [8.0, 4772.0], [8.1, 4772.0], [8.2, 4773.0], [8.3, 4773.0], [8.4, 4774.0], [8.5, 4774.0], [8.6, 4774.0], [8.7, 4775.0], [8.8, 4775.0], [8.9, 4775.0], [9.0, 4775.0], [9.1, 4776.0], [9.2, 4776.0], [9.3, 4776.0], [9.4, 4777.0], [9.5, 4778.0], [9.6, 4778.0], [9.7, 4779.0], [9.8, 4779.0], [9.9, 4780.0], [10.0, 4782.0], [10.1, 4782.0], [10.2, 4783.0], [10.3, 4783.0], [10.4, 4784.0], [10.5, 4786.0], [10.6, 4787.0], [10.7, 4787.0], [10.8, 4788.0], [10.9, 4789.0], [11.0, 4789.0], [11.1, 4790.0], [11.2, 4792.0], [11.3, 4795.0], [11.4, 4795.0], [11.5, 4797.0], [11.6, 4801.0], [11.7, 4801.0], [11.8, 4802.0], [11.9, 4805.0], [12.0, 4806.0], [12.1, 4810.0], [12.2, 4812.0], [12.3, 4813.0], [12.4, 4814.0], [12.5, 4817.0], [12.6, 4818.0], [12.7, 4818.0], [12.8, 4822.0], [12.9, 4824.0], [13.0, 4824.0], [13.1, 4825.0], [13.2, 4829.0], [13.3, 4830.0], [13.4, 4834.0], [13.5, 4837.0], [13.6, 4838.0], [13.7, 4840.0], [13.8, 4842.0], [13.9, 4842.0], [14.0, 4845.0], [14.1, 4846.0], [14.2, 4847.0], [14.3, 4847.0], [14.4, 4858.0], [14.5, 4921.0], [14.6, 5015.0], [14.7, 5037.0], [14.8, 5047.0], [14.9, 5073.0], [15.0, 5101.0], [15.1, 5180.0], [15.2, 5183.0], [15.3, 5251.0], [15.4, 5271.0], [15.5, 5295.0], [15.6, 5301.0], [15.7, 5312.0], [15.8, 5329.0], [15.9, 5343.0], [16.0, 5349.0], [16.1, 5380.0], [16.2, 5426.0], [16.3, 5434.0], [16.4, 5468.0], [16.5, 5509.0], [16.6, 5517.0], [16.7, 5555.0], [16.8, 5569.0], [16.9, 5584.0], [17.0, 5660.0], [17.1, 5683.0], [17.2, 5750.0], [17.3, 5779.0], [17.4, 5930.0], [17.5, 5972.0], [17.6, 5993.0], [17.7, 6032.0], [17.8, 6094.0], [17.9, 6146.0], [18.0, 6183.0], [18.1, 6195.0], [18.2, 6255.0], [18.3, 6290.0], [18.4, 6308.0], [18.5, 6370.0], [18.6, 6456.0], [18.7, 6536.0], [18.8, 6544.0], [18.9, 6557.0], [19.0, 6631.0], [19.1, 6659.0], [19.2, 6707.0], [19.3, 6749.0], [19.4, 6766.0], [19.5, 6794.0], [19.6, 6827.0], [19.7, 6845.0], [19.8, 6898.0], [19.9, 6914.0], [20.0, 7046.0], [20.1, 7099.0], [20.2, 7102.0], [20.3, 7108.0], [20.4, 7123.0], [20.5, 7143.0], [20.6, 7152.0], [20.7, 7168.0], [20.8, 7195.0], [20.9, 7219.0], [21.0, 7228.0], [21.1, 7251.0], [21.2, 7256.0], [21.3, 7283.0], [21.4, 7337.0], [21.5, 7359.0], [21.6, 7390.0], [21.7, 7404.0], [21.8, 7423.0], [21.9, 7444.0], [22.0, 7482.0], [22.1, 7497.0], [22.2, 7527.0], [22.3, 7530.0], [22.4, 7584.0], [22.5, 7620.0], [22.6, 7638.0], [22.7, 7668.0], [22.8, 7701.0], [22.9, 7738.0], [23.0, 7766.0], [23.1, 7814.0], [23.2, 7825.0], [23.3, 7829.0], [23.4, 7866.0], [23.5, 7874.0], [23.6, 7887.0], [23.7, 7890.0], [23.8, 7893.0], [23.9, 7919.0], [24.0, 7944.0], [24.1, 7990.0], [24.2, 8004.0], [24.3, 8011.0], [24.4, 8011.0], [24.5, 8022.0], [24.6, 8034.0], [24.7, 8046.0], [24.8, 8056.0], [24.9, 8104.0], [25.0, 8119.0], [25.1, 8133.0], [25.2, 8181.0], [25.3, 8194.0], [25.4, 8196.0], [25.5, 8219.0], [25.6, 8227.0], [25.7, 8264.0], [25.8, 8273.0], [25.9, 8292.0], [26.0, 8307.0], [26.1, 8307.0], [26.2, 8320.0], [26.3, 8351.0], [26.4, 8374.0], [26.5, 8382.0], [26.6, 8384.0], [26.7, 8395.0], [26.8, 8400.0], [26.9, 8402.0], [27.0, 8410.0], [27.1, 8434.0], [27.2, 8437.0], [27.3, 8447.0], [27.4, 8455.0], [27.5, 8494.0], [27.6, 8502.0], [27.7, 8504.0], [27.8, 8531.0], [27.9, 8569.0], [28.0, 8585.0], [28.1, 8599.0], [28.2, 8605.0], [28.3, 8624.0], [28.4, 8656.0], [28.5, 8682.0], [28.6, 8714.0], [28.7, 8722.0], [28.8, 8737.0], [28.9, 8786.0], [29.0, 8798.0], [29.1, 8809.0], [29.2, 8819.0], [29.3, 8852.0], [29.4, 8908.0], [29.5, 8909.0], [29.6, 8972.0], [29.7, 8980.0], [29.8, 9001.0], [29.9, 9010.0], [30.0, 9013.0], [30.1, 9025.0], [30.2, 9045.0], [30.3, 9048.0], [30.4, 9079.0], [30.5, 9082.0], [30.6, 9089.0], [30.7, 9112.0], [30.8, 9116.0], [30.9, 9152.0], [31.0, 9185.0], [31.1, 9201.0], [31.2, 9245.0], [31.3, 9280.0], [31.4, 9288.0], [31.5, 9294.0], [31.6, 9305.0], [31.7, 9314.0], [31.8, 9324.0], [31.9, 9335.0], [32.0, 9344.0], [32.1, 9353.0], [32.2, 9388.0], [32.3, 9402.0], [32.4, 9413.0], [32.5, 9418.0], [32.6, 9426.0], [32.7, 9492.0], [32.8, 9501.0], [32.9, 9545.0], [33.0, 9587.0], [33.1, 9611.0], [33.2, 9629.0], [33.3, 9672.0], [33.4, 9694.0], [33.5, 9703.0], [33.6, 9719.0], [33.7, 9735.0], [33.8, 9770.0], [33.9, 9838.0], [34.0, 9842.0], [34.1, 9860.0], [34.2, 9909.0], [34.3, 9917.0], [34.4, 9949.0], [34.5, 9973.0], [34.6, 10052.0], [34.7, 10066.0], [34.8, 10102.0], [34.9, 10112.0], [35.0, 10190.0], [35.1, 10196.0], [35.2, 10220.0], [35.3, 10264.0], [35.4, 10268.0], [35.5, 10317.0], [35.6, 10389.0], [35.7, 10408.0], [35.8, 10449.0], [35.9, 10463.0], [36.0, 10478.0], [36.1, 10508.0], [36.2, 10528.0], [36.3, 10582.0], [36.4, 10593.0], [36.5, 10612.0], [36.6, 10637.0], [36.7, 10646.0], [36.8, 10671.0], [36.9, 10696.0], [37.0, 10697.0], [37.1, 10729.0], [37.2, 10752.0], [37.3, 10770.0], [37.4, 10810.0], [37.5, 10815.0], [37.6, 10845.0], [37.7, 10885.0], [37.8, 10905.0], [37.9, 10944.0], [38.0, 10977.0], [38.1, 10987.0], [38.2, 11040.0], [38.3, 11050.0], [38.4, 11069.0], [38.5, 11091.0], [38.6, 11134.0], [38.7, 11136.0], [38.8, 11176.0], [38.9, 11208.0], [39.0, 11249.0], [39.1, 11260.0], [39.2, 11287.0], [39.3, 11332.0], [39.4, 11340.0], [39.5, 11348.0], [39.6, 11372.0], [39.7, 11398.0], [39.8, 11429.0], [39.9, 11475.0], [40.0, 11493.0], [40.1, 11538.0], [40.2, 11628.0], [40.3, 11714.0], [40.4, 11725.0], [40.5, 11749.0], [40.6, 11765.0], [40.7, 11788.0], [40.8, 11808.0], [40.9, 11828.0], [41.0, 11875.0], [41.1, 11907.0], [41.2, 11935.0], [41.3, 11941.0], [41.4, 11973.0], [41.5, 11993.0], [41.6, 11999.0], [41.7, 12026.0], [41.8, 12061.0], [41.9, 12070.0], [42.0, 12129.0], [42.1, 12171.0], [42.2, 12193.0], [42.3, 12209.0], [42.4, 12226.0], [42.5, 12346.0], [42.6, 12375.0], [42.7, 12397.0], [42.8, 12421.0], [42.9, 12442.0], [43.0, 12452.0], [43.1, 12483.0], [43.2, 12500.0], [43.3, 12532.0], [43.4, 12580.0], [43.5, 12607.0], [43.6, 12634.0], [43.7, 12645.0], [43.8, 12663.0], [43.9, 12728.0], [44.0, 12786.0], [44.1, 12797.0], [44.2, 12840.0], [44.3, 12865.0], [44.4, 12888.0], [44.5, 12914.0], [44.6, 12958.0], [44.7, 13005.0], [44.8, 13039.0], [44.9, 13090.0], [45.0, 13130.0], [45.1, 13154.0], [45.2, 13185.0], [45.3, 13277.0], [45.4, 13338.0], [45.5, 13356.0], [45.6, 13371.0], [45.7, 13375.0], [45.8, 13401.0], [45.9, 13446.0], [46.0, 13459.0], [46.1, 13478.0], [46.2, 13531.0], [46.3, 13533.0], [46.4, 13566.0], [46.5, 13581.0], [46.6, 13607.0], [46.7, 13615.0], [46.8, 13617.0], [46.9, 13648.0], [47.0, 13666.0], [47.1, 13682.0], [47.2, 13719.0], [47.3, 13746.0], [47.4, 13752.0], [47.5, 13813.0], [47.6, 13841.0], [47.7, 13845.0], [47.8, 13907.0], [47.9, 13916.0], [48.0, 13926.0], [48.1, 13965.0], [48.2, 14051.0], [48.3, 14090.0], [48.4, 14114.0], [48.5, 14168.0], [48.6, 14224.0], [48.7, 14233.0], [48.8, 14238.0], [48.9, 14251.0], [49.0, 14258.0], [49.1, 14285.0], [49.2, 14362.0], [49.3, 14394.0], [49.4, 14418.0], [49.5, 14483.0], [49.6, 14489.0], [49.7, 14515.0], [49.8, 14549.0], [49.9, 14590.0], [50.0, 14654.0], [50.1, 14705.0], [50.2, 14731.0], [50.3, 14765.0], [50.4, 14847.0], [50.5, 14869.0], [50.6, 14895.0], [50.7, 14915.0], [50.8, 14979.0], [50.9, 15005.0], [51.0, 15021.0], [51.1, 15047.0], [51.2, 15100.0], [51.3, 15102.0], [51.4, 15110.0], [51.5, 15135.0], [51.6, 15172.0], [51.7, 15228.0], [51.8, 15274.0], [51.9, 15330.0], [52.0, 15344.0], [52.1, 15377.0], [52.2, 15387.0], [52.3, 15399.0], [52.4, 15468.0], [52.5, 15570.0], [52.6, 15593.0], [52.7, 15610.0], [52.8, 15639.0], [52.9, 15673.0], [53.0, 15682.0], [53.1, 15728.0], [53.2, 15775.0], [53.3, 15884.0], [53.4, 15906.0], [53.5, 15982.0], [53.6, 16064.0], [53.7, 16084.0], [53.8, 16104.0], [53.9, 16185.0], [54.0, 16234.0], [54.1, 16297.0], [54.2, 16336.0], [54.3, 16355.0], [54.4, 16370.0], [54.5, 16406.0], [54.6, 16447.0], [54.7, 16453.0], [54.8, 16481.0], [54.9, 16509.0], [55.0, 16523.0], [55.1, 16528.0], [55.2, 16544.0], [55.3, 16658.0], [55.4, 16680.0], [55.5, 16720.0], [55.6, 16775.0], [55.7, 16799.0], [55.8, 16851.0], [55.9, 16862.0], [56.0, 16885.0], [56.1, 16915.0], [56.2, 16924.0], [56.3, 16938.0], [56.4, 16942.0], [56.5, 16962.0], [56.6, 16969.0], [56.7, 16985.0], [56.8, 16994.0], [56.9, 16998.0], [57.0, 17020.0], [57.1, 17049.0], [57.2, 17064.0], [57.3, 17066.0], [57.4, 17098.0], [57.5, 17142.0], [57.6, 17158.0], [57.7, 17187.0], [57.8, 17246.0], [57.9, 17255.0], [58.0, 17290.0], [58.1, 17294.0], [58.2, 17311.0], [58.3, 17321.0], [58.4, 17329.0], [58.5, 17351.0], [58.6, 17371.0], [58.7, 17404.0], [58.8, 17437.0], [58.9, 17439.0], [59.0, 17444.0], [59.1, 17463.0], [59.2, 17494.0], [59.3, 17507.0], [59.4, 17530.0], [59.5, 17551.0], [59.6, 17590.0], [59.7, 17591.0], [59.8, 17684.0], [59.9, 17705.0], [60.0, 17721.0], [60.1, 17754.0], [60.2, 17802.0], [60.3, 17843.0], [60.4, 17864.0], [60.5, 17885.0], [60.6, 17886.0], [60.7, 17925.0], [60.8, 17947.0], [60.9, 18002.0], [61.0, 18039.0], [61.1, 18061.0], [61.2, 18120.0], [61.3, 18177.0], [61.4, 18254.0], [61.5, 18334.0], [61.6, 18349.0], [61.7, 18385.0], [61.8, 18496.0], [61.9, 18528.0], [62.0, 18561.0], [62.1, 18572.0], [62.2, 18578.0], [62.3, 18620.0], [62.4, 18682.0], [62.5, 18695.0], [62.6, 18704.0], [62.7, 18720.0], [62.8, 18737.0], [62.9, 18758.0], [63.0, 18774.0], [63.1, 18789.0], [63.2, 18813.0], [63.3, 18822.0], [63.4, 18828.0], [63.5, 18844.0], [63.6, 18880.0], [63.7, 18900.0], [63.8, 18906.0], [63.9, 18918.0], [64.0, 18949.0], [64.1, 18976.0], [64.2, 18991.0], [64.3, 19014.0], [64.4, 19060.0], [64.5, 19072.0], [64.6, 19091.0], [64.7, 19105.0], [64.8, 19110.0], [64.9, 19132.0], [65.0, 19142.0], [65.1, 19163.0], [65.2, 19182.0], [65.3, 19199.0], [65.4, 19205.0], [65.5, 19217.0], [65.6, 19227.0], [65.7, 19233.0], [65.8, 19263.0], [65.9, 19274.0], [66.0, 19312.0], [66.1, 19338.0], [66.2, 19362.0], [66.3, 19416.0], [66.4, 19445.0], [66.5, 19466.0], [66.6, 19505.0], [66.7, 19511.0], [66.8, 19534.0], [66.9, 19556.0], [67.0, 19575.0], [67.1, 19602.0], [67.2, 19614.0], [67.3, 19617.0], [67.4, 19656.0], [67.5, 19732.0], [67.6, 19794.0], [67.7, 19866.0], [67.8, 19909.0], [67.9, 19917.0], [68.0, 19986.0], [68.1, 19991.0], [68.2, 20009.0], [68.3, 20047.0], [68.4, 20081.0], [68.5, 20085.0], [68.6, 20125.0], [68.7, 20151.0], [68.8, 20199.0], [68.9, 20223.0], [69.0, 20235.0], [69.1, 20240.0], [69.2, 20271.0], [69.3, 20276.0], [69.4, 20290.0], [69.5, 20313.0], [69.6, 20330.0], [69.7, 20351.0], [69.8, 20353.0], [69.9, 20366.0], [70.0, 20376.0], [70.1, 20396.0], [70.2, 20414.0], [70.3, 20447.0], [70.4, 20491.0], [70.5, 20498.0], [70.6, 20501.0], [70.7, 20506.0], [70.8, 20563.0], [70.9, 20572.0], [71.0, 20625.0], [71.1, 20657.0], [71.2, 20672.0], [71.3, 20699.0], [71.4, 20713.0], [71.5, 20736.0], [71.6, 20764.0], [71.7, 20808.0], [71.8, 20913.0], [71.9, 20946.0], [72.0, 20985.0], [72.1, 20997.0], [72.2, 21018.0], [72.3, 21064.0], [72.4, 21094.0], [72.5, 21114.0], [72.6, 21169.0], [72.7, 21188.0], [72.8, 21216.0], [72.9, 21298.0], [73.0, 21345.0], [73.1, 21381.0], [73.2, 21383.0], [73.3, 21423.0], [73.4, 21454.0], [73.5, 21507.0], [73.6, 21516.0], [73.7, 21521.0], [73.8, 21587.0], [73.9, 21665.0], [74.0, 21718.0], [74.1, 21771.0], [74.2, 21824.0], [74.3, 21836.0], [74.4, 21858.0], [74.5, 21875.0], [74.6, 21927.0], [74.7, 21979.0], [74.8, 21990.0], [74.9, 22026.0], [75.0, 22065.0], [75.1, 22100.0], [75.2, 22114.0], [75.3, 22138.0], [75.4, 22163.0], [75.5, 22257.0], [75.6, 22287.0], [75.7, 22318.0], [75.8, 22332.0], [75.9, 22368.0], [76.0, 22462.0], [76.1, 22476.0], [76.2, 22538.0], [76.3, 22587.0], [76.4, 22591.0], [76.5, 22591.0], [76.6, 22639.0], [76.7, 22678.0], [76.8, 22709.0], [76.9, 22759.0], [77.0, 22845.0], [77.1, 22878.0], [77.2, 22940.0], [77.3, 22980.0], [77.4, 22987.0], [77.5, 23092.0], [77.6, 23177.0], [77.7, 23236.0], [77.8, 23266.0], [77.9, 23322.0], [78.0, 23383.0], [78.1, 23452.0], [78.2, 23481.0], [78.3, 23516.0], [78.4, 23573.0], [78.5, 23659.0], [78.6, 23665.0], [78.7, 23684.0], [78.8, 23721.0], [78.9, 23760.0], [79.0, 23821.0], [79.1, 23862.0], [79.2, 23863.0], [79.3, 23876.0], [79.4, 23905.0], [79.5, 23915.0], [79.6, 23932.0], [79.7, 23937.0], [79.8, 23973.0], [79.9, 24000.0], [80.0, 24113.0], [80.1, 24141.0], [80.2, 24168.0], [80.3, 24212.0], [80.4, 24269.0], [80.5, 24322.0], [80.6, 24378.0], [80.7, 24379.0], [80.8, 24407.0], [80.9, 24545.0], [81.0, 24563.0], [81.1, 24658.0], [81.2, 24694.0], [81.3, 24732.0], [81.4, 24863.0], [81.5, 25039.0], [81.6, 25067.0], [81.7, 25149.0], [81.8, 25248.0], [81.9, 25282.0], [82.0, 25310.0], [82.1, 25416.0], [82.2, 25498.0], [82.3, 25524.0], [82.4, 25649.0], [82.5, 25822.0], [82.6, 25935.0], [82.7, 26027.0], [82.8, 26047.0], [82.9, 26082.0], [83.0, 26135.0], [83.1, 26308.0], [83.2, 26339.0], [83.3, 26491.0], [83.4, 26535.0], [83.5, 26593.0], [83.6, 26692.0], [83.7, 26737.0], [83.8, 26896.0], [83.9, 27026.0], [84.0, 27244.0], [84.1, 27256.0], [84.2, 27304.0], [84.3, 27365.0], [84.4, 27475.0], [84.5, 27527.0], [84.6, 27574.0], [84.7, 27617.0], [84.8, 27653.0], [84.9, 27694.0], [85.0, 27965.0], [85.1, 28119.0], [85.2, 28168.0], [85.3, 28311.0], [85.4, 28341.0], [85.5, 28351.0], [85.6, 28517.0], [85.7, 28566.0], [85.8, 28727.0], [85.9, 28767.0], [86.0, 28939.0], [86.1, 29017.0], [86.2, 29131.0], [86.3, 29432.0], [86.4, 29498.0], [86.5, 29644.0], [86.6, 29650.0], [86.7, 29715.0], [86.8, 29990.0], [86.9, 30032.0], [87.0, 30177.0], [87.1, 30184.0], [87.2, 30193.0], [87.3, 30205.0], [87.4, 30239.0], [87.5, 30275.0], [87.6, 30310.0], [87.7, 30432.0], [87.8, 30465.0], [87.9, 30563.0], [88.0, 30821.0], [88.1, 31074.0], [88.2, 31185.0], [88.3, 31204.0], [88.4, 31283.0], [88.5, 31378.0], [88.6, 31467.0], [88.7, 31645.0], [88.8, 31729.0], [88.9, 31790.0], [89.0, 32051.0], [89.1, 32156.0], [89.2, 32188.0], [89.3, 32265.0], [89.4, 32421.0], [89.5, 32597.0], [89.6, 32668.0], [89.7, 32938.0], [89.8, 33215.0], [89.9, 33354.0], [90.0, 33531.0], [90.1, 33598.0], [90.2, 33760.0], [90.3, 33785.0], [90.4, 34142.0], [90.5, 34245.0], [90.6, 34822.0], [90.7, 34900.0], [90.8, 34916.0], [90.9, 34942.0], [91.0, 35024.0], [91.1, 35176.0], [91.2, 35197.0], [91.3, 35265.0], [91.4, 35370.0], [91.5, 35755.0], [91.6, 35822.0], [91.7, 36030.0], [91.8, 36353.0], [91.9, 36834.0], [92.0, 37128.0], [92.1, 37593.0], [92.2, 37860.0], [92.3, 38006.0], [92.4, 38364.0], [92.5, 38365.0], [92.6, 38421.0], [92.7, 38615.0], [92.8, 39320.0], [92.9, 39693.0], [93.0, 39769.0], [93.1, 39951.0], [93.2, 40046.0], [93.3, 40176.0], [93.4, 40326.0], [93.5, 40406.0], [93.6, 40541.0], [93.7, 40753.0], [93.8, 40880.0], [93.9, 40893.0], [94.0, 41255.0], [94.1, 41316.0], [94.2, 41601.0], [94.3, 41927.0], [94.4, 42378.0], [94.5, 43230.0], [94.6, 44841.0], [94.7, 45569.0], [94.8, 46245.0], [94.9, 47670.0], [95.0, 48101.0], [95.1, 48422.0], [95.2, 48728.0], [95.3, 48862.0], [95.4, 49384.0], [95.5, 49932.0], [95.6, 50804.0], [95.7, 50955.0], [95.8, 51233.0], [95.9, 51736.0], [96.0, 52201.0], [96.1, 52449.0], [96.2, 53049.0], [96.3, 53798.0], [96.4, 54709.0], [96.5, 55095.0], [96.6, 55394.0], [96.7, 56017.0], [96.8, 56882.0], [96.9, 57202.0], [97.0, 57568.0], [97.1, 57645.0], [97.2, 61072.0], [97.3, 62229.0], [97.4, 62597.0], [97.5, 62729.0], [97.6, 63968.0], [97.7, 64639.0], [97.8, 65948.0], [97.9, 66319.0], [98.0, 70129.0], [98.1, 71038.0], [98.2, 71295.0], [98.3, 72585.0], [98.4, 73925.0], [98.5, 77066.0], [98.6, 80086.0], [98.7, 91177.0], [98.8, 93116.0], [98.9, 100882.0], [99.0, 105230.0], [99.1, 105612.0], [99.2, 109261.0], [99.3, 110303.0], [99.4, 123039.0], [99.5, 123410.0], [99.6, 130147.0], [99.7, 147767.0], [99.8, 182946.0], [99.9, 212171.0], [100.0, 212806.0]], "isOverall": false, "label": "NCPPServerlessEastGFSAreaUS-1time-fullzedd", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 4700.0, "maxY": 218.0, "series": [{"data": [[204200.0, 1.0], [32900.0, 1.0], [33700.0, 3.0], [35300.0, 2.0], [38500.0, 1.0], [39300.0, 2.0], [40100.0, 1.0], [40900.0, 1.0], [48100.0, 1.0], [53700.0, 2.0], [56900.0, 1.0], [55300.0, 1.0], [62500.0, 1.0], [64100.0, 1.0], [77000.0, 1.0], [123400.0, 1.0], [4700.0, 218.0], [4800.0, 53.0], [4900.0, 3.0], [5100.0, 4.0], [5000.0, 8.0], [5200.0, 7.0], [5300.0, 11.0], [5400.0, 6.0], [5500.0, 8.0], [5600.0, 4.0], [5700.0, 5.0], [6100.0, 6.0], [5900.0, 5.0], [6000.0, 3.0], [6300.0, 3.0], [6200.0, 5.0], [6500.0, 6.0], [6600.0, 5.0], [6400.0, 1.0], [6700.0, 6.0], [6800.0, 6.0], [6900.0, 2.0], [109700.0, 1.0], [7100.0, 13.0], [7000.0, 4.0], [7300.0, 7.0], [7200.0, 9.0], [7400.0, 8.0], [7600.0, 5.0], [7500.0, 7.0], [7800.0, 15.0], [7700.0, 5.0], [7900.0, 7.0], [8000.0, 13.0], [8100.0, 10.0], [8200.0, 10.0], [8400.0, 15.0], [8600.0, 8.0], [9000.0, 17.0], [9200.0, 9.0], [8800.0, 7.0], [9600.0, 8.0], [9400.0, 9.0], [10200.0, 5.0], [9800.0, 6.0], [10000.0, 4.0], [10600.0, 11.0], [10400.0, 8.0], [10800.0, 9.0], [11000.0, 8.0], [11200.0, 7.0], [11400.0, 6.0], [11600.0, 1.0], [12000.0, 7.0], [11800.0, 6.0], [12200.0, 3.0], [12400.0, 8.0], [12600.0, 6.0], [12800.0, 5.0], [13200.0, 2.0], [13000.0, 5.0], [13400.0, 7.0], [13600.0, 10.0], [13800.0, 6.0], [14200.0, 11.0], [14000.0, 4.0], [14800.0, 4.0], [14600.0, 3.0], [14400.0, 5.0], [15000.0, 6.0], [15200.0, 4.0], [15600.0, 7.0], [15800.0, 3.0], [15400.0, 3.0], [16000.0, 4.0], [16200.0, 3.0], [16800.0, 6.0], [16400.0, 7.0], [17200.0, 7.0], [18000.0, 5.0], [17600.0, 3.0], [18400.0, 3.0], [18800.0, 11.0], [19200.0, 11.0], [20000.0, 9.0], [20400.0, 8.0], [19600.0, 6.0], [21200.0, 3.0], [20800.0, 2.0], [22400.0, 3.0], [21600.0, 2.0], [22000.0, 4.0], [22800.0, 5.0], [23200.0, 4.0], [23600.0, 5.0], [24400.0, 1.0], [24000.0, 2.0], [25200.0, 5.0], [24800.0, 1.0], [26000.0, 7.0], [25600.0, 1.0], [26400.0, 2.0], [27600.0, 4.0], [26800.0, 3.0], [27200.0, 3.0], [28000.0, 1.0], [28400.0, 1.0], [29600.0, 3.0], [28800.0, 1.0], [30400.0, 3.0], [30000.0, 2.0], [31200.0, 3.0], [31600.0, 2.0], [30800.0, 1.0], [32400.0, 2.0], [32000.0, 1.0], [33600.0, 1.0], [36800.0, 1.0], [36000.0, 2.0], [35200.0, 2.0], [37600.0, 1.0], [38400.0, 1.0], [40800.0, 4.0], [40000.0, 1.0], [41600.0, 2.0], [44800.0, 1.0], [43200.0, 1.0], [48800.0, 2.0], [52000.0, 1.0], [51200.0, 1.0], [56000.0, 2.0], [56800.0, 1.0], [57600.0, 2.0], [62400.0, 1.0], [72000.0, 1.0], [80000.0, 1.0], [100800.0, 1.0], [102400.0, 1.0], [105600.0, 1.0], [212100.0, 1.0], [67100.0, 1.0], [76700.0, 1.0], [91100.0, 1.0], [110300.0, 1.0], [123100.0, 1.0], [33900.0, 1.0], [33100.0, 1.0], [36300.0, 2.0], [38700.0, 1.0], [37100.0, 1.0], [40300.0, 2.0], [41900.0, 1.0], [48300.0, 1.0], [49100.0, 1.0], [49900.0, 1.0], [54700.0, 1.0], [62700.0, 2.0], [71000.0, 2.0], [91800.0, 1.0], [70100.0, 1.0], [17300.0, 11.0], [16900.0, 17.0], [16500.0, 7.0], [17700.0, 6.0], [18100.0, 4.0], [18500.0, 7.0], [18900.0, 10.0], [19300.0, 7.0], [20100.0, 5.0], [19700.0, 4.0], [21300.0, 6.0], [20500.0, 8.0], [20900.0, 7.0], [21700.0, 3.0], [22100.0, 7.0], [22500.0, 7.0], [22900.0, 4.0], [23300.0, 3.0], [24100.0, 5.0], [23700.0, 4.0], [24500.0, 5.0], [25300.0, 2.0], [24900.0, 1.0], [26500.0, 4.0], [26100.0, 2.0], [25700.0, 1.0], [27300.0, 3.0], [28100.0, 3.0], [28500.0, 3.0], [27700.0, 1.0], [28900.0, 2.0], [30100.0, 7.0], [30500.0, 2.0], [29700.0, 2.0], [31700.0, 3.0], [31300.0, 3.0], [32100.0, 4.0], [32500.0, 1.0], [34600.0, 1.0], [37800.0, 2.0], [38600.0, 1.0], [37000.0, 1.0], [40200.0, 1.0], [45000.0, 1.0], [53000.0, 1.0], [52200.0, 1.0], [54600.0, 1.0], [61000.0, 1.0], [86800.0, 1.0], [109200.0, 1.0], [117200.0, 1.0], [65900.0, 2.0], [73900.0, 1.0], [77100.0, 1.0], [93100.0, 1.0], [99500.0, 1.0], [34100.0, 2.0], [33300.0, 1.0], [36500.0, 1.0], [34900.0, 5.0], [35700.0, 1.0], [37300.0, 1.0], [40500.0, 3.0], [39700.0, 2.0], [41300.0, 2.0], [42900.0, 1.0], [42100.0, 1.0], [48500.0, 1.0], [50900.0, 1.0], [49300.0, 1.0], [51700.0, 1.0], [54900.0, 1.0], [147700.0, 1.0], [182900.0, 1.0], [8300.0, 16.0], [8500.0, 10.0], [8700.0, 9.0], [9100.0, 7.0], [8900.0, 7.0], [9300.0, 14.0], [9500.0, 6.0], [9700.0, 7.0], [9900.0, 7.0], [10100.0, 7.0], [10500.0, 7.0], [10700.0, 6.0], [10300.0, 4.0], [11100.0, 6.0], [10900.0, 6.0], [11300.0, 9.0], [11500.0, 3.0], [11700.0, 10.0], [11900.0, 10.0], [12100.0, 5.0], [12700.0, 7.0], [12300.0, 6.0], [12500.0, 6.0], [12900.0, 4.0], [13300.0, 8.0], [13100.0, 6.0], [13500.0, 8.0], [13700.0, 7.0], [13900.0, 6.0], [14300.0, 4.0], [14100.0, 4.0], [14500.0, 6.0], [14700.0, 6.0], [15100.0, 8.0], [15300.0, 9.0], [14900.0, 5.0], [15500.0, 3.0], [15700.0, 4.0], [16100.0, 4.0], [15900.0, 3.0], [16300.0, 7.0], [16600.0, 4.0], [17400.0, 10.0], [17000.0, 9.0], [17800.0, 8.0], [18200.0, 2.0], [18600.0, 5.0], [19000.0, 8.0], [19400.0, 4.0], [20200.0, 12.0], [19800.0, 3.0], [20600.0, 7.0], [21400.0, 4.0], [21000.0, 5.0], [21800.0, 8.0], [22200.0, 4.0], [22600.0, 5.0], [23400.0, 3.0], [23000.0, 2.0], [23800.0, 7.0], [24200.0, 4.0], [24600.0, 3.0], [25400.0, 3.0], [25000.0, 3.0], [26600.0, 2.0], [25800.0, 1.0], [27400.0, 2.0], [27000.0, 1.0], [28200.0, 1.0], [29400.0, 4.0], [29000.0, 1.0], [29800.0, 1.0], [30200.0, 5.0], [31000.0, 3.0], [31400.0, 2.0], [32600.0, 2.0], [32200.0, 2.0], [34800.0, 2.0], [33200.0, 2.0], [35600.0, 1.0], [139900.0, 1.0], [38000.0, 1.0], [40400.0, 1.0], [39600.0, 1.0], [41200.0, 1.0], [43600.0, 1.0], [46000.0, 1.0], [47600.0, 1.0], [48400.0, 1.0], [50800.0, 2.0], [51600.0, 1.0], [52400.0, 3.0], [57200.0, 1.0], [61200.0, 1.0], [65200.0, 1.0], [71200.0, 1.0], [212800.0, 1.0], [152900.0, 1.0], [66300.0, 1.0], [33500.0, 3.0], [35100.0, 3.0], [38300.0, 4.0], [37500.0, 1.0], [40700.0, 1.0], [39900.0, 3.0], [42300.0, 1.0], [46300.0, 1.0], [45500.0, 1.0], [48700.0, 1.0], [50300.0, 1.0], [57500.0, 1.0], [63900.0, 1.0], [105400.0, 1.0], [123000.0, 1.0], [72500.0, 1.0], [70900.0, 1.0], [123700.0, 1.0], [130100.0, 1.0], [16700.0, 5.0], [17100.0, 6.0], [18300.0, 5.0], [17500.0, 9.0], [17900.0, 5.0], [18700.0, 11.0], [19100.0, 13.0], [20300.0, 12.0], [19500.0, 11.0], [19900.0, 6.0], [20700.0, 6.0], [21100.0, 7.0], [21500.0, 7.0], [22300.0, 6.0], [21900.0, 6.0], [22700.0, 3.0], [23500.0, 5.0], [23100.0, 3.0], [23900.0, 10.0], [24300.0, 6.0], [24700.0, 3.0], [25500.0, 2.0], [25100.0, 1.0], [25900.0, 2.0], [26300.0, 2.0], [27500.0, 5.0], [26700.0, 2.0], [27100.0, 1.0], [28300.0, 5.0], [27900.0, 1.0], [29100.0, 2.0], [28700.0, 3.0], [30300.0, 2.0], [30700.0, 1.0], [29900.0, 1.0], [31100.0, 1.0], [31900.0, 1.0], [32700.0, 1.0], [34200.0, 1.0], [35000.0, 2.0], [35800.0, 1.0], [46200.0, 1.0], [49400.0, 1.0], [55000.0, 2.0], [57400.0, 1.0], [59000.0, 1.0], [62200.0, 1.0], [64600.0, 1.0], [105200.0, 1.0]], "isOverall": false, "label": "NCPPServerlessEastGFSAreaUS-1time-fullzedd", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 212800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 472.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1409.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1409.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 472.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.65832956E12, "maxY": 495.9661016949151, "series": [{"data": [[1.65832968E12, 66.0], [1.65832974E12, 5.5], [1.65832956E12, 495.9661016949151], [1.65832962E12, 456.99084807809646], [1.6583298E12, 2.0]], "isOverall": false, "label": "NCPPServerlessEastGFSAreaUS-1time-fullzedd", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6583298E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4750.0, "minX": 1.0, "maxY": 212806.0, "series": [{"data": [[2.0, 212806.0], [3.0, 204259.0], [4.0, 182946.0], [5.0, 152968.0], [6.0, 147767.0], [7.0, 139938.0], [8.0, 130147.0], [9.0, 123144.0], [10.0, 123791.0], [11.0, 123039.0], [12.0, 123410.0], [13.0, 117264.0], [14.0, 110303.0], [15.0, 109261.0], [16.0, 105230.0], [17.0, 109762.0], [18.0, 105469.0], [19.0, 105612.0], [20.0, 102472.0], [21.0, 49384.0], [22.0, 57202.0], [23.0, 54695.0], [24.0, 55394.0], [25.0, 100882.0], [26.0, 61296.0], [27.0, 57645.0], [28.0, 71066.0], [29.0, 49168.0], [30.0, 48862.0], [31.0, 48422.0], [33.0, 99542.0], [32.0, 48101.0], [35.0, 48728.0], [34.0, 61072.0], [37.0, 49463.0], [36.0, 48804.0], [39.0, 59043.0], [38.0, 93116.0], [41.0, 70900.0], [40.0, 91810.0], [43.0, 72032.0], [42.0, 71038.0], [45.0, 56882.0], [44.0, 41255.0], [47.0, 40268.0], [46.0, 40880.0], [49.0, 55095.0], [48.0, 41637.0], [51.0, 38421.0], [50.0, 42167.0], [53.0, 54709.0], [52.0, 55097.0], [55.0, 91177.0], [54.0, 39979.0], [57.0, 53798.0], [56.0, 53749.0], [59.0, 36323.0], [58.0, 48313.0], [61.0, 41601.0], [60.0, 52449.0], [63.0, 45569.0], [62.0, 41316.0], [67.0, 37128.0], [66.0, 46245.0], [65.0, 56049.0], [64.0, 86829.0], [71.0, 50879.0], [70.0, 30821.0], [69.0, 50955.0], [68.0, 35176.0], [75.0, 30433.0], [74.0, 33354.0], [73.0, 40880.0], [72.0, 43230.0], [79.0, 30275.0], [78.0, 31378.0], [77.0, 49932.0], [76.0, 30310.0], [83.0, 29715.0], [82.0, 28436.0], [81.0, 40541.0], [80.0, 39741.0], [87.0, 52440.0], [86.0, 80086.0], [85.0, 28168.0], [84.0, 54925.0], [91.0, 27653.0], [90.0, 27256.0], [89.0, 76757.0], [88.0, 27638.0], [95.0, 35265.0], [94.0, 57568.0], [93.0, 33164.0], [92.0, 26082.0], [99.0, 23236.0], [98.0, 77066.0], [97.0, 40931.0], [96.0, 31058.0], [103.0, 50804.0], [102.0, 24322.0], [101.0, 38331.0], [100.0, 77166.0], [107.0, 38006.0], [106.0, 23076.0], [105.0, 39385.0], [104.0, 24379.0], [111.0, 24316.0], [110.0, 33915.0], [109.0, 39693.0], [108.0, 40893.0], [115.0, 73925.0], [114.0, 39907.0], [113.0, 31283.0], [112.0, 21862.0], [119.0, 23659.0], [118.0, 38782.0], [117.0, 31383.0], [116.0, 40046.0], [123.0, 23905.0], [122.0, 35263.0], [121.0, 37861.0], [120.0, 30277.0], [127.0, 20985.0], [126.0, 22083.0], [125.0, 70129.0], [124.0, 23866.0], [135.0, 26462.0], [134.0, 22544.0], [133.0, 22322.0], [132.0, 42924.0], [131.0, 22065.0], [130.0, 20009.0], [129.0, 23973.0], [128.0, 32156.0], [143.0, 21990.0], [142.0, 27965.0], [141.0, 20498.0], [140.0, 29484.0], [139.0, 28816.0], [138.0, 23668.0], [137.0, 20085.0], [136.0, 22684.0], [151.0, 22332.0], [150.0, 17590.0], [149.0, 24907.0], [148.0, 22053.0], [147.0, 71295.0], [146.0, 20699.0], [145.0, 20808.0], [144.0, 39769.0], [159.0, 23481.0], [158.0, 67175.0], [157.0, 20987.0], [156.0, 20396.0], [155.0, 30205.0], [154.0, 72585.0], [153.0, 35302.0], [152.0, 22156.0], [167.0, 36030.0], [166.0, 30018.0], [165.0, 34942.0], [164.0, 33693.0], [163.0, 36015.0], [162.0, 23383.0], [161.0, 22940.0], [160.0, 28939.0], [175.0, 65948.0], [174.0, 17548.0], [173.0, 31074.0], [172.0, 37593.0], [171.0, 35024.0], [170.0, 39951.0], [169.0, 40326.0], [168.0, 33598.0], [183.0, 19064.0], [182.0, 23417.0], [181.0, 33215.0], [180.0, 30500.0], [179.0, 24168.0], [178.0, 31670.0], [177.0, 33231.0], [176.0, 20403.0], [191.0, 14895.0], [190.0, 62783.0], [189.0, 12645.0], [188.0, 35370.0], [187.0, 12888.0], [186.0, 22215.0], [185.0, 19466.0], [184.0, 12958.0], [199.0, 66319.0], [198.0, 19312.0], [197.0, 43694.0], [196.0, 11628.0], [195.0, 13014.0], [194.0, 15468.0], [193.0, 16985.0], [192.0, 65950.0], [207.0, 13682.0], [206.0, 13446.0], [205.0, 13375.0], [204.0, 14090.0], [203.0, 13666.0], [202.0, 32164.0], [201.0, 13154.0], [200.0, 11727.0], [215.0, 10102.0], [214.0, 23266.0], [213.0, 12379.0], [212.0, 10944.0], [211.0, 16509.0], [210.0, 32621.0], [209.0, 40511.0], [208.0, 22974.0], [223.0, 9713.0], [222.0, 17591.0], [221.0, 13813.0], [220.0, 20997.0], [219.0, 15377.0], [218.0, 10317.0], [217.0, 63968.0], [216.0, 17721.0], [231.0, 15593.0], [230.0, 9305.0], [229.0, 27273.0], [228.0, 20491.0], [227.0, 9091.0], [226.0, 12311.0], [225.0, 9201.0], [224.0, 21383.0], [239.0, 13644.0], [238.0, 9855.0], [237.0, 14778.0], [236.0, 17329.0], [235.0, 29432.0], [234.0, 13130.0], [233.0, 65248.0], [232.0, 62229.0], [247.0, 25149.0], [246.0, 31332.0], [245.0, 9089.0], [244.0, 26086.0], [243.0, 28341.0], [242.0, 8497.0], [241.0, 22666.0], [240.0, 8624.0], [255.0, 33760.0], [254.0, 21521.0], [253.0, 9013.0], [252.0, 64639.0], [251.0, 9735.0], [250.0, 62597.0], [249.0, 20383.0], [248.0, 9501.0], [270.0, 32051.0], [271.0, 24732.0], [269.0, 32188.0], [268.0, 8852.0], [267.0, 8320.0], [266.0, 9786.0], [265.0, 24764.0], [264.0, 62729.0], [263.0, 30781.0], [257.0, 9353.0], [256.0, 52477.0], [259.0, 29990.0], [258.0, 62443.0], [262.0, 64160.0], [261.0, 24250.0], [260.0, 25248.0], [286.0, 9394.0], [287.0, 14517.0], [285.0, 7157.0], [284.0, 6655.0], [283.0, 7220.0], [282.0, 31760.0], [281.0, 28351.0], [280.0, 7991.0], [279.0, 7143.0], [273.0, 22878.0], [272.0, 10508.0], [275.0, 51233.0], [274.0, 14418.0], [278.0, 12171.0], [277.0, 20572.0], [276.0, 25088.0], [302.0, 7102.0], [303.0, 7359.0], [301.0, 34897.0], [300.0, 17065.0], [299.0, 8383.0], [298.0, 8682.0], [297.0, 6087.0], [296.0, 37045.0], [295.0, 25822.0], [289.0, 19566.0], [288.0, 10885.0], [291.0, 23092.0], [290.0, 17754.0], [294.0, 11287.0], [293.0, 7469.0], [292.0, 10389.0], [318.0, 13926.0], [319.0, 27527.0], [317.0, 5779.0], [316.0, 40753.0], [315.0, 8602.0], [314.0, 10738.0], [313.0, 9005.0], [312.0, 10810.0], [311.0, 13090.0], [305.0, 9597.0], [304.0, 15704.0], [307.0, 35755.0], [306.0, 24141.0], [310.0, 8133.0], [309.0, 8384.0], [308.0, 5930.0], [334.0, 5142.0], [335.0, 16664.0], [333.0, 23285.0], [332.0, 5301.0], [331.0, 7827.0], [330.0, 5180.0], [329.0, 19517.0], [328.0, 32265.0], [327.0, 21718.0], [321.0, 33531.0], [320.0, 30032.0], [323.0, 8254.0], [322.0, 7188.0], [326.0, 4825.0], [325.0, 11891.0], [324.0, 5015.0], [350.0, 4789.0], [351.0, 4752.0], [349.0, 18880.0], [348.0, 4789.0], [347.0, 7701.0], [346.0, 7985.0], [345.0, 21665.0], [344.0, 28949.0], [343.0, 24200.0], [337.0, 9973.0], [336.0, 17158.0], [339.0, 4755.0], [338.0, 8035.0], [342.0, 56973.0], [341.0, 7283.0], [340.0, 56017.0], [366.0, 4792.0], [367.0, 57636.0], [365.0, 34822.0], [364.0, 4803.0], [363.0, 19739.0], [362.0, 11828.0], [361.0, 22114.5], [359.0, 5295.0], [353.0, 5157.0], [355.0, 4801.0], [354.0, 23263.0], [358.0, 23577.0], [357.0, 22538.0], [356.0, 8006.0], [382.0, 19986.0], [383.0, 5530.0], [381.0, 37307.0], [380.0, 23919.0], [379.0, 18349.0], [378.0, 21423.0], [377.0, 30193.0], [376.0, 4790.0], [375.0, 28128.0], [369.0, 9045.0], [368.0, 18002.0], [371.0, 32763.0], [370.0, 32421.0], [374.0, 4817.0], [373.0, 23972.0], [372.0, 32271.0], [399.0, 19296.0], [397.0, 21577.0], [387.0, 6372.0], [386.0, 22466.0], [385.0, 9001.0], [384.0, 20366.0], [395.0, 16799.0], [394.0, 30243.0], [393.0, 27130.0], [392.0, 8289.0], [391.0, 24085.0], [390.0, 34245.0], [389.0, 24863.0], [388.0, 4824.0], [414.0, 4822.0], [415.0, 57494.0], [413.0, 34916.0], [412.0, 4772.0], [411.0, 21298.0], [410.0, 23709.0], [409.0, 31467.0], [408.0, 17705.0], [407.0, 31272.0], [403.0, 17807.0], [402.0, 17006.0], [401.0, 21765.0], [400.0, 28727.0], [405.0, 25417.0], [428.0, 17231.5], [421.0, 19004.0], [420.0, 9233.0], [422.0, 13048.0], [423.0, 18853.0], [417.0, 23684.0], [416.0, 26606.0], [419.0, 20290.0], [418.0, 18595.0], [424.0, 6895.5], [425.0, 32597.0], [431.0, 6659.0], [430.0, 15133.5], [427.0, 24142.0], [426.0, 6193.0], [447.0, 6255.0], [440.0, 30074.5], [446.0, 25369.0], [445.0, 18438.0], [444.0, 16494.0], [435.0, 20276.0], [434.0, 17098.0], [433.0, 35040.0], [432.0, 13617.0], [443.0, 19091.0], [442.0, 19265.0], [441.0, 4750.0], [439.0, 4783.0], [438.0, 16460.0], [437.0, 4757.0], [436.0, 6631.0], [462.0, 17444.0], [463.0, 27563.0], [461.0, 20219.0], [460.0, 12797.0], [459.0, 29633.0], [458.0, 29644.0], [457.0, 20223.0], [456.0, 20657.0], [455.0, 22133.0], [449.0, 15906.0], [448.0, 16192.0], [451.0, 52201.0], [450.0, 10190.0], [454.0, 19656.0], [453.0, 23862.0], [452.0, 16353.0], [478.0, 19614.0], [466.0, 17817.5], [465.0, 34142.0], [464.0, 26135.0], [467.0, 18758.0], [471.0, 23322.0], [470.0, 19030.0], [469.0, 24662.0], [479.0, 30184.0], [477.0, 27694.0], [476.0, 18061.0], [475.0, 27244.0], [474.0, 18528.0], [473.0, 15165.0], [472.0, 31204.0], [494.0, 25733.0], [495.0, 32668.0], [493.0, 26308.0], [492.0, 25248.0], [491.0, 13841.0], [490.0, 46011.0], [489.0, 31790.0], [488.0, 26491.0], [487.0, 21308.0], [481.0, 13039.0], [480.0, 17417.0], [483.0, 22476.0], [482.0, 19110.0], [486.0, 41313.0], [485.0, 20002.0], [484.0, 13368.0], [500.0, 13708.269818181814], [499.0, 23933.0], [498.0, 5972.0], [497.0, 26017.0], [496.0, 11134.0], [1.0, 212171.0]], "isOverall": false, "label": "NCPPServerlessEastGFSAreaUS-1time-fullzedd", "isController": false}, {"data": [[433.430090377459, 18552.422115895806]], "isOverall": false, "label": "NCPPServerlessEastGFSAreaUS-1time-fullzedd-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 57.45, "minX": 1.65832956E12, "maxY": 3.572457535E7, "series": [{"data": [[1.65832968E12, 3101319.433333333], [1.65832974E12, 118122.33333333333], [1.65832956E12, 2600253.3333333335], [1.65832962E12, 3.572457535E7], [1.6583298E12, 88591.75]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65832968E12, 2010.75], [1.65832974E12, 76.6], [1.65832956E12, 1685.2], [1.65832962E12, 23152.35], [1.6583298E12, 57.45]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6583298E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 11513.754237288134, "minX": 1.65832956E12, "maxY": 209745.33333333334, "series": [{"data": [[1.65832968E12, 54317.598290598275], [1.65832974E12, 155904.75], [1.65832956E12, 11513.754237288134], [1.65832962E12, 15820.908480780952], [1.6583298E12, 209745.33333333334]], "isOverall": false, "label": "NCPPServerlessEastGFSAreaUS-1time-fullzedd", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6583298E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5904.618644067795, "minX": 1.65832956E12, "maxY": 23967.658119658117, "series": [{"data": [[1.65832968E12, 23967.658119658117], [1.65832974E12, 7314.75], [1.65832956E12, 5904.618644067795], [1.65832962E12, 6496.715070164738], [1.6583298E12, 8010.333333333333]], "isOverall": false, "label": "NCPPServerlessEastGFSAreaUS-1time-fullzedd", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6583298E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 44.25, "minX": 1.65832956E12, "maxY": 1189.2416107382562, "series": [{"data": [[1.65832968E12, 115.41880341880334], [1.65832974E12, 44.25], [1.65832956E12, 149.7372881355932], [1.65832962E12, 1189.2416107382562], [1.6583298E12, 46.666666666666664]], "isOverall": false, "label": "NCPPServerlessEastGFSAreaUS-1time-fullzedd", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6583298E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5180.0, "minX": 1.65832956E12, "maxY": 212806.0, "series": [{"data": [[1.65832968E12, 130147.0], [1.65832974E12, 182946.0], [1.65832956E12, 18005.0], [1.65832962E12, 72585.0], [1.6583298E12, 212806.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65832968E12, 105526.2], [1.65832974E12, 182946.0], [1.65832956E12, 16903.3], [1.65832962E12, 29017.0], [1.6583298E12, 212806.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65832968E12, 129765.63999999998], [1.65832974E12, 182946.0], [1.65832956E12, 18005.0], [1.65832962E12, 62777.600000000006], [1.6583298E12, 212806.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65832968E12, 121306.49999999994], [1.65832974E12, 182946.0], [1.65832956E12, 17223.399999999998], [1.65832962E12, 36676.0], [1.6583298E12, 212806.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65832968E12, 21862.0], [1.65832974E12, 139938.0], [1.65832956E12, 7825.0], [1.65832962E12, 5180.0], [1.6583298E12, 204259.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65832968E12, 46245.0], [1.65832974E12, 150367.5], [1.65832956E12, 14224.5], [1.65832962E12, 17179.0], [1.6583298E12, 212171.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6583298E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 4756.0, "minX": 1.0, "maxY": 123410.0, "series": [{"data": [[2.0, 49168.0], [32.0, 11158.0], [33.0, 13274.0], [34.0, 10350.5], [35.0, 10843.0], [37.0, 18017.5], [39.0, 20817.0], [38.0, 22115.5], [41.0, 9694.0], [42.0, 14063.0], [44.0, 18061.0], [47.0, 20509.0], [48.0, 19460.5], [3.0, 46245.0], [62.0, 19338.0], [4.0, 40574.0], [5.0, 40455.0], [6.0, 12888.5], [8.0, 23699.0], [9.0, 31808.0], [10.0, 30111.0], [11.0, 14589.0], [12.0, 11136.0], [13.0, 22544.0], [14.0, 16908.5], [15.0, 11627.0], [16.0, 16392.0], [1.0, 123410.0], [17.0, 18090.0], [18.0, 8866.0], [19.0, 14216.0], [20.0, 17297.0], [21.0, 9210.0], [22.0, 25006.0], [23.0, 16972.0], [24.0, 18837.0], [25.0, 14869.0], [27.0, 12509.5], [28.0, 9943.0], [29.0, 12973.0], [30.0, 16481.0], [31.0, 21381.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 6022.5], [33.0, 4842.0], [2.0, 17548.0], [34.0, 5043.0], [35.0, 4833.0], [37.0, 4777.5], [39.0, 4763.0], [38.0, 19597.0], [41.0, 4810.0], [42.0, 4770.0], [44.0, 4812.0], [47.0, 4767.0], [48.0, 4836.5], [3.0, 71066.0], [62.0, 4768.0], [4.0, 60416.0], [5.0, 35265.0], [6.0, 47054.5], [8.0, 37591.5], [9.0, 36015.0], [10.0, 23595.0], [11.0, 7602.5], [12.0, 16994.0], [13.0, 28816.0], [14.0, 4764.5], [15.0, 5762.0], [16.0, 4759.0], [17.0, 4756.0], [18.0, 24788.5], [19.0, 6253.5], [20.0, 5273.5], [21.0, 19072.0], [23.0, 16945.0], [24.0, 4768.0], [25.0, 5044.0], [27.0, 5930.0], [28.0, 12580.0], [29.0, 23559.5], [30.0, 4777.0], [31.0, 4790.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 62.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 33949.0, "series": [{"data": [[2.0, 8406.0], [32.0, 5733.0], [33.0, 5635.5], [34.0, 5963.0], [35.0, 6424.0], [37.0, 7614.5], [39.0, 8155.0], [38.0, 8618.0], [41.0, 5940.0], [42.0, 6054.5], [44.0, 6913.0], [47.0, 6304.0], [48.0, 6348.0], [3.0, 33949.0], [62.0, 7992.0], [4.0, 28867.0], [5.0, 12050.5], [6.0, 7942.5], [8.0, 11665.0], [9.0, 14471.5], [10.0, 19207.5], [11.0, 11676.0], [12.0, 7613.0], [13.0, 21028.0], [14.0, 8273.0], [15.0, 8013.0], [16.0, 7773.0], [1.0, 7677.0], [17.0, 7796.0], [18.0, 6261.0], [19.0, 7712.0], [20.0, 8000.5], [21.0, 7787.0], [22.0, 7620.5], [23.0, 11472.0], [24.0, 7655.0], [25.0, 7935.0], [27.0, 6574.0], [28.0, 7407.0], [29.0, 7419.0], [30.0, 7662.0], [31.0, 6845.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 0.0], [33.0, 0.0], [2.0, 0.0], [34.0, 0.0], [35.0, 0.0], [37.0, 0.0], [39.0, 0.0], [38.0, 0.0], [41.0, 0.0], [42.0, 0.0], [44.0, 0.0], [47.0, 0.0], [48.0, 0.0], [3.0, 0.0], [62.0, 0.0], [4.0, 0.0], [5.0, 0.0], [6.0, 0.0], [8.0, 0.0], [9.0, 0.0], [10.0, 0.0], [11.0, 0.0], [12.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 0.0], [16.0, 0.0], [17.0, 0.0], [18.0, 0.0], [19.0, 0.0], [20.0, 0.0], [21.0, 0.0], [23.0, 0.0], [24.0, 0.0], [25.0, 0.0], [27.0, 0.0], [28.0, 0.0], [29.0, 0.0], [30.0, 0.0], [31.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 62.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 10.3, "minX": 1.65832956E12, "maxY": 21.05, "series": [{"data": [[1.65832956E12, 10.3], [1.65832962E12, 21.05]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65832962E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65832956E12, "maxY": 20.15, "series": [{"data": [[1.65832968E12, 1.75], [1.65832974E12, 0.06666666666666667], [1.65832956E12, 1.4666666666666666], [1.65832962E12, 20.15], [1.6583298E12, 0.05]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.65832962E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}, {"data": [[1.65832968E12, 0.18333333333333332], [1.65832956E12, 0.5], [1.65832962E12, 6.833333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketTimeoutException", "isController": false}, {"data": [[1.65832968E12, 0.016666666666666666], [1.65832962E12, 0.3]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.65832962E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.ConnectTimeoutException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6583298E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.65832956E12, "maxY": 20.15, "series": [{"data": [[1.65832968E12, 1.75], [1.65832974E12, 0.06666666666666667], [1.65832956E12, 1.4666666666666666], [1.65832962E12, 20.15], [1.6583298E12, 0.05]], "isOverall": false, "label": "NCPPServerlessEastGFSAreaUS-1time-fullzedd-success", "isController": false}, {"data": [[1.65832968E12, 0.2], [1.65832956E12, 0.5], [1.65832962E12, 7.166666666666667]], "isOverall": false, "label": "NCPPServerlessEastGFSAreaUS-1time-fullzedd-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6583298E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.65832956E12, "maxY": 20.15, "series": [{"data": [[1.65832968E12, 1.75], [1.65832974E12, 0.06666666666666667], [1.65832956E12, 1.4666666666666666], [1.65832962E12, 20.15], [1.6583298E12, 0.05]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65832968E12, 0.2], [1.65832956E12, 0.5], [1.65832962E12, 7.166666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6583298E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


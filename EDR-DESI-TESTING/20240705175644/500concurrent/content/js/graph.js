/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6147.0, "minX": 0.0, "maxY": 60452.0, "series": [{"data": [[0.0, 6147.0], [0.1, 6147.0], [0.2, 6453.0], [0.3, 6453.0], [0.4, 6648.0], [0.5, 6648.0], [0.6, 6648.0], [0.7, 7093.0], [0.8, 7475.0], [0.9, 7475.0], [1.0, 7515.0], [1.1, 7515.0], [1.2, 7601.0], [1.3, 7601.0], [1.4, 7653.0], [1.5, 7653.0], [1.6, 7657.0], [1.7, 7657.0], [1.8, 7681.0], [1.9, 7681.0], [2.0, 7772.0], [2.1, 7772.0], [2.2, 7853.0], [2.3, 7853.0], [2.4, 7871.0], [2.5, 7871.0], [2.6, 7892.0], [2.7, 7892.0], [2.8, 7892.0], [2.9, 8035.0], [3.0, 8035.0], [3.1, 8109.0], [3.2, 8109.0], [3.3, 8187.0], [3.4, 8187.0], [3.5, 8223.0], [3.6, 8223.0], [3.7, 8227.0], [3.8, 8227.0], [3.9, 8254.0], [4.0, 8254.0], [4.1, 8259.0], [4.2, 8259.0], [4.3, 8275.0], [4.4, 8275.0], [4.5, 8277.0], [4.6, 8277.0], [4.7, 8314.0], [4.8, 8314.0], [4.9, 8336.0], [5.0, 8336.0], [5.1, 8379.0], [5.2, 8379.0], [5.3, 8511.0], [5.4, 8511.0], [5.5, 8512.0], [5.6, 8512.0], [5.7, 8543.0], [5.8, 8543.0], [5.9, 8558.0], [6.0, 8558.0], [6.1, 8581.0], [6.2, 8581.0], [6.3, 9136.0], [6.4, 9136.0], [6.5, 10257.0], [6.6, 10257.0], [6.7, 10282.0], [6.8, 10282.0], [6.9, 10348.0], [7.0, 10348.0], [7.1, 10367.0], [7.2, 10367.0], [7.3, 10519.0], [7.4, 10519.0], [7.5, 10603.0], [7.6, 10603.0], [7.7, 10780.0], [7.8, 10780.0], [7.9, 10956.0], [8.0, 10956.0], [8.1, 11009.0], [8.2, 11009.0], [8.3, 11049.0], [8.4, 11049.0], [8.5, 11079.0], [8.6, 11079.0], [8.7, 11331.0], [8.8, 11458.0], [8.9, 11458.0], [9.0, 11466.0], [9.1, 11466.0], [9.2, 11497.0], [9.3, 11497.0], [9.4, 11745.0], [9.5, 11745.0], [9.6, 11982.0], [9.7, 11982.0], [9.8, 12268.0], [9.9, 12268.0], [10.0, 12551.0], [10.1, 12551.0], [10.2, 12663.0], [10.3, 12663.0], [10.4, 12717.0], [10.5, 12717.0], [10.6, 12818.0], [10.7, 12818.0], [10.8, 12830.0], [10.9, 12830.0], [11.0, 12997.0], [11.1, 12997.0], [11.2, 13002.0], [11.3, 13002.0], [11.4, 13079.0], [11.5, 13079.0], [11.6, 13107.0], [11.7, 13107.0], [11.8, 13126.0], [11.9, 13126.0], [12.0, 13159.0], [12.1, 13159.0], [12.2, 13306.0], [12.3, 13306.0], [12.4, 13378.0], [12.5, 13378.0], [12.6, 13380.0], [12.7, 13380.0], [12.8, 13728.0], [12.9, 13728.0], [13.0, 15000.0], [13.1, 15000.0], [13.2, 15110.0], [13.3, 15110.0], [13.4, 15146.0], [13.5, 15146.0], [13.6, 15231.0], [13.7, 15231.0], [13.8, 15312.0], [13.9, 15312.0], [14.0, 15580.0], [14.1, 15580.0], [14.2, 15633.0], [14.3, 15633.0], [14.4, 15650.0], [14.5, 15650.0], [14.6, 15706.0], [14.7, 15706.0], [14.8, 15734.0], [14.9, 15734.0], [15.0, 15735.0], [15.1, 15735.0], [15.2, 15832.0], [15.3, 15832.0], [15.4, 15835.0], [15.5, 15835.0], [15.6, 16104.0], [15.7, 16104.0], [15.8, 16221.0], [15.9, 16221.0], [16.0, 16430.0], [16.1, 16430.0], [16.2, 17210.0], [16.3, 17210.0], [16.4, 17220.0], [16.5, 17220.0], [16.6, 18051.0], [16.7, 18051.0], [16.8, 18108.0], [16.9, 18108.0], [17.0, 18170.0], [17.1, 18170.0], [17.2, 18354.0], [17.3, 18354.0], [17.4, 18407.0], [17.5, 18407.0], [17.6, 18428.0], [17.7, 18428.0], [17.8, 18700.0], [17.9, 18700.0], [18.0, 18858.0], [18.1, 18858.0], [18.2, 18928.0], [18.3, 18928.0], [18.4, 18951.0], [18.5, 18951.0], [18.6, 19151.0], [18.7, 19151.0], [18.8, 19236.0], [18.9, 19236.0], [19.0, 19258.0], [19.1, 19258.0], [19.2, 19284.0], [19.3, 19284.0], [19.4, 19341.0], [19.5, 19341.0], [19.6, 19451.0], [19.7, 19451.0], [19.8, 19563.0], [19.9, 19563.0], [20.0, 19972.0], [20.1, 19972.0], [20.2, 20084.0], [20.3, 20084.0], [20.4, 20085.0], [20.5, 20085.0], [20.6, 20548.0], [20.7, 20548.0], [20.8, 20552.0], [20.9, 20552.0], [21.0, 20690.0], [21.1, 20690.0], [21.2, 20752.0], [21.3, 20752.0], [21.4, 20762.0], [21.5, 20762.0], [21.6, 20807.0], [21.7, 20807.0], [21.8, 21267.0], [21.9, 21267.0], [22.0, 21319.0], [22.1, 21319.0], [22.2, 21543.0], [22.3, 21543.0], [22.4, 22497.0], [22.5, 22497.0], [22.6, 22560.0], [22.7, 22560.0], [22.8, 22619.0], [22.9, 22619.0], [23.0, 22850.0], [23.1, 22850.0], [23.2, 23148.0], [23.3, 23148.0], [23.4, 23373.0], [23.5, 23373.0], [23.6, 23462.0], [23.7, 23462.0], [23.8, 23580.0], [23.9, 23580.0], [24.0, 23684.0], [24.1, 23684.0], [24.2, 23789.0], [24.3, 23789.0], [24.4, 23968.0], [24.5, 23968.0], [24.6, 24001.0], [24.7, 24001.0], [24.8, 24026.0], [24.9, 24026.0], [25.0, 24030.0], [25.1, 24030.0], [25.2, 24126.0], [25.3, 24126.0], [25.4, 24161.0], [25.5, 24161.0], [25.6, 24338.0], [25.7, 24338.0], [25.8, 24495.0], [25.9, 24495.0], [26.0, 24594.0], [26.1, 24594.0], [26.2, 24636.0], [26.3, 24636.0], [26.4, 24869.0], [26.5, 24869.0], [26.6, 24932.0], [26.7, 24932.0], [26.8, 25041.0], [26.9, 25041.0], [27.0, 25124.0], [27.1, 25124.0], [27.2, 25265.0], [27.3, 25265.0], [27.4, 25441.0], [27.5, 25441.0], [27.6, 25615.0], [27.7, 25615.0], [27.8, 25990.0], [27.9, 25990.0], [28.0, 26051.0], [28.1, 26051.0], [28.2, 26201.0], [28.3, 26201.0], [28.4, 26410.0], [28.5, 26410.0], [28.6, 26438.0], [28.7, 26438.0], [28.8, 27059.0], [28.9, 27059.0], [29.0, 27206.0], [29.1, 27206.0], [29.2, 27316.0], [29.3, 27316.0], [29.4, 27552.0], [29.5, 27552.0], [29.6, 27567.0], [29.7, 27567.0], [29.8, 28618.0], [29.9, 28618.0], [30.0, 28629.0], [30.1, 28629.0], [30.2, 28975.0], [30.3, 28975.0], [30.4, 29035.0], [30.5, 29035.0], [30.6, 29047.0], [30.7, 29047.0], [30.8, 29089.0], [30.9, 29089.0], [31.0, 29126.0], [31.1, 29126.0], [31.2, 29190.0], [31.3, 29190.0], [31.4, 29192.0], [31.5, 29192.0], [31.6, 29521.0], [31.7, 29521.0], [31.8, 29535.0], [31.9, 29535.0], [32.0, 29562.0], [32.1, 29562.0], [32.2, 29572.0], [32.3, 29572.0], [32.4, 29601.0], [32.5, 29601.0], [32.6, 29799.0], [32.7, 29799.0], [32.8, 29827.0], [32.9, 29827.0], [33.0, 29977.0], [33.1, 29977.0], [33.2, 30021.0], [33.3, 30021.0], [33.4, 30219.0], [33.5, 30219.0], [33.6, 30323.0], [33.7, 30323.0], [33.8, 30327.0], [33.9, 30327.0], [34.0, 30341.0], [34.1, 30341.0], [34.2, 30375.0], [34.3, 30375.0], [34.4, 30458.0], [34.5, 30458.0], [34.6, 30562.0], [34.7, 30562.0], [34.8, 30701.0], [34.9, 30701.0], [35.0, 30888.0], [35.1, 30888.0], [35.2, 31806.0], [35.3, 31806.0], [35.4, 32518.0], [35.5, 32518.0], [35.6, 32519.0], [35.7, 32519.0], [35.8, 32627.0], [35.9, 32627.0], [36.0, 32896.0], [36.1, 32896.0], [36.2, 33871.0], [36.3, 33871.0], [36.4, 34160.0], [36.5, 34160.0], [36.6, 34186.0], [36.7, 34186.0], [36.8, 34299.0], [36.9, 34299.0], [37.0, 34401.0], [37.1, 34401.0], [37.2, 34403.0], [37.3, 34403.0], [37.4, 34409.0], [37.5, 34409.0], [37.6, 34432.0], [37.7, 34432.0], [37.8, 34586.0], [37.9, 34586.0], [38.0, 34804.0], [38.1, 34804.0], [38.2, 34819.0], [38.3, 34819.0], [38.4, 34819.0], [38.5, 34933.0], [38.6, 34933.0], [38.7, 34962.0], [38.8, 34962.0], [38.9, 35013.0], [39.0, 35013.0], [39.1, 35209.0], [39.2, 35209.0], [39.3, 35222.0], [39.4, 35222.0], [39.5, 35241.0], [39.6, 35241.0], [39.7, 35427.0], [39.8, 35427.0], [39.9, 35498.0], [40.0, 35498.0], [40.1, 35532.0], [40.2, 35532.0], [40.3, 35680.0], [40.4, 35680.0], [40.5, 35709.0], [40.6, 35709.0], [40.7, 35839.0], [40.8, 35839.0], [40.9, 35853.0], [41.0, 35853.0], [41.1, 35890.0], [41.2, 35890.0], [41.3, 36279.0], [41.4, 36279.0], [41.5, 36304.0], [41.6, 36304.0], [41.7, 36986.0], [41.8, 36986.0], [41.9, 37937.0], [42.0, 37937.0], [42.1, 38043.0], [42.2, 38043.0], [42.3, 38136.0], [42.4, 38136.0], [42.5, 38877.0], [42.6, 38877.0], [42.7, 38993.0], [42.8, 38993.0], [42.9, 39072.0], [43.0, 39072.0], [43.1, 39095.0], [43.2, 39095.0], [43.3, 39104.0], [43.4, 39104.0], [43.5, 39225.0], [43.6, 39225.0], [43.7, 39243.0], [43.8, 39243.0], [43.9, 39333.0], [44.0, 39333.0], [44.1, 39346.0], [44.2, 39346.0], [44.3, 39397.0], [44.4, 39397.0], [44.5, 39569.0], [44.6, 39569.0], [44.7, 39581.0], [44.8, 39581.0], [44.9, 39610.0], [45.0, 39610.0], [45.1, 39634.0], [45.2, 39634.0], [45.3, 39792.0], [45.4, 39792.0], [45.5, 39965.0], [45.6, 39965.0], [45.7, 39975.0], [45.8, 39975.0], [45.9, 39978.0], [46.0, 39978.0], [46.1, 40405.0], [46.2, 40405.0], [46.3, 40407.0], [46.4, 40407.0], [46.5, 40545.0], [46.6, 40545.0], [46.7, 40552.0], [46.8, 40552.0], [46.9, 40789.0], [47.0, 40789.0], [47.1, 40891.0], [47.2, 40891.0], [47.3, 41152.0], [47.4, 41152.0], [47.5, 41320.0], [47.6, 41320.0], [47.7, 41350.0], [47.8, 41350.0], [47.9, 41478.0], [48.0, 41478.0], [48.1, 42366.0], [48.2, 42366.0], [48.3, 42811.0], [48.4, 42811.0], [48.5, 43220.0], [48.6, 43220.0], [48.7, 43410.0], [48.8, 43410.0], [48.9, 43609.0], [49.0, 43609.0], [49.1, 43867.0], [49.2, 43867.0], [49.3, 43868.0], [49.4, 43868.0], [49.5, 43871.0], [49.6, 43871.0], [49.7, 43880.0], [49.8, 43880.0], [49.9, 43899.0], [50.0, 43899.0], [50.1, 44085.0], [50.2, 44085.0], [50.3, 44159.0], [50.4, 44159.0], [50.5, 44276.0], [50.6, 44276.0], [50.7, 44328.0], [50.8, 44328.0], [50.9, 44366.0], [51.0, 44366.0], [51.1, 44532.0], [51.2, 44532.0], [51.3, 44592.0], [51.4, 44592.0], [51.5, 44641.0], [51.6, 44641.0], [51.7, 44699.0], [51.8, 44699.0], [51.9, 44850.0], [52.0, 44850.0], [52.1, 44886.0], [52.2, 44886.0], [52.3, 44980.0], [52.4, 44980.0], [52.5, 45142.0], [52.6, 45142.0], [52.7, 45511.0], [52.8, 45511.0], [52.9, 45582.0], [53.0, 45582.0], [53.1, 45940.0], [53.2, 45940.0], [53.3, 46066.0], [53.4, 46066.0], [53.5, 46248.0], [53.6, 46248.0], [53.7, 46271.0], [53.8, 46271.0], [53.9, 46469.0], [54.0, 46469.0], [54.1, 46897.0], [54.2, 46897.0], [54.3, 47336.0], [54.4, 47336.0], [54.5, 47754.0], [54.6, 47754.0], [54.7, 47909.0], [54.8, 47909.0], [54.9, 48101.0], [55.0, 48101.0], [55.1, 48443.0], [55.2, 48443.0], [55.3, 48524.0], [55.4, 48524.0], [55.5, 48799.0], [55.6, 48799.0], [55.7, 48922.0], [55.8, 48922.0], [55.9, 49031.0], [56.0, 49031.0], [56.1, 49339.0], [56.2, 49339.0], [56.3, 49575.0], [56.4, 49575.0], [56.5, 49733.0], [56.6, 49733.0], [56.7, 49793.0], [56.8, 49793.0], [56.9, 49836.0], [57.0, 49836.0], [57.1, 49923.0], [57.2, 49923.0], [57.3, 49955.0], [57.4, 49955.0], [57.5, 50060.0], [57.6, 50060.0], [57.7, 50077.0], [57.8, 50077.0], [57.9, 50153.0], [58.0, 50153.0], [58.1, 50193.0], [58.2, 50193.0], [58.3, 50267.0], [58.4, 50267.0], [58.5, 50355.0], [58.6, 50355.0], [58.7, 50414.0], [58.8, 50414.0], [58.9, 50517.0], [59.0, 50517.0], [59.1, 50613.0], [59.2, 50613.0], [59.3, 50626.0], [59.4, 50626.0], [59.5, 50675.0], [59.6, 50675.0], [59.7, 50700.0], [59.8, 50700.0], [59.9, 51058.0], [60.0, 51058.0], [60.1, 51114.0], [60.2, 51114.0], [60.3, 51422.0], [60.4, 51422.0], [60.5, 51813.0], [60.6, 51813.0], [60.7, 51997.0], [60.8, 51997.0], [60.9, 52176.0], [61.0, 52176.0], [61.1, 52209.0], [61.2, 52209.0], [61.3, 52688.0], [61.4, 52688.0], [61.5, 52796.0], [61.6, 52796.0], [61.7, 52905.0], [61.8, 52905.0], [61.9, 53330.0], [62.0, 53330.0], [62.1, 53542.0], [62.2, 53542.0], [62.3, 54036.0], [62.4, 54036.0], [62.5, 54539.0], [62.6, 54539.0], [62.7, 54622.0], [62.8, 54622.0], [62.9, 54915.0], [63.0, 54915.0], [63.1, 54953.0], [63.2, 54953.0], [63.3, 55075.0], [63.4, 55075.0], [63.5, 55212.0], [63.6, 55212.0], [63.7, 55726.0], [63.8, 55726.0], [63.9, 55754.0], [64.0, 55754.0], [64.1, 55779.0], [64.2, 55779.0], [64.3, 56137.0], [64.4, 56137.0], [64.5, 56279.0], [64.6, 56279.0], [64.7, 56291.0], [64.8, 56291.0], [64.9, 56303.0], [65.0, 56303.0], [65.1, 56380.0], [65.2, 56380.0], [65.3, 56492.0], [65.4, 56492.0], [65.5, 56538.0], [65.6, 56538.0], [65.7, 56580.0], [65.8, 56580.0], [65.9, 56584.0], [66.0, 56584.0], [66.1, 56601.0], [66.2, 56601.0], [66.3, 56620.0], [66.4, 56620.0], [66.5, 56727.0], [66.6, 56727.0], [66.7, 56786.0], [66.8, 56786.0], [66.9, 56861.0], [67.0, 56861.0], [67.1, 56876.0], [67.2, 56876.0], [67.3, 57409.0], [67.4, 57409.0], [67.5, 57619.0], [67.6, 57619.0], [67.7, 57682.0], [67.8, 57682.0], [67.9, 58316.0], [68.0, 58316.0], [68.1, 58502.0], [68.2, 58502.0], [68.3, 58828.0], [68.4, 58828.0], [68.5, 58963.0], [68.6, 58963.0], [68.7, 59027.0], [68.8, 59027.0], [68.9, 59472.0], [69.0, 59472.0], [69.1, 59525.0], [69.2, 59525.0], [69.3, 59734.0], [69.4, 59734.0], [69.5, 59773.0], [69.6, 59773.0], [69.7, 59915.0], [69.8, 59915.0], [69.9, 60008.0], [70.0, 60008.0], [70.1, 60011.0], [70.2, 60011.0], [70.3, 60012.0], [70.4, 60012.0], [70.5, 60012.0], [70.6, 60012.0], [70.7, 60012.0], [70.8, 60012.0], [70.9, 60013.0], [71.0, 60013.0], [71.1, 60014.0], [71.2, 60014.0], [71.3, 60014.0], [71.4, 60014.0], [71.5, 60014.0], [71.6, 60014.0], [71.7, 60015.0], [71.8, 60015.0], [71.9, 60015.0], [72.0, 60015.0], [72.1, 60015.0], [72.2, 60015.0], [72.3, 60015.0], [72.4, 60015.0], [72.5, 60015.0], [72.6, 60015.0], [72.7, 60016.0], [72.8, 60016.0], [72.9, 60016.0], [73.0, 60016.0], [73.1, 60016.0], [73.2, 60016.0], [73.3, 60017.0], [73.4, 60017.0], [73.5, 60017.0], [73.6, 60017.0], [73.7, 60017.0], [73.8, 60017.0], [73.9, 60018.0], [74.0, 60018.0], [74.1, 60018.0], [74.2, 60018.0], [74.3, 60019.0], [74.4, 60019.0], [74.5, 60019.0], [74.6, 60019.0], [74.7, 60019.0], [74.8, 60019.0], [74.9, 60019.0], [75.0, 60019.0], [75.1, 60020.0], [75.2, 60020.0], [75.3, 60020.0], [75.4, 60020.0], [75.5, 60020.0], [75.6, 60020.0], [75.7, 60020.0], [75.8, 60020.0], [75.9, 60020.0], [76.0, 60020.0], [76.1, 60021.0], [76.2, 60021.0], [76.3, 60021.0], [76.4, 60021.0], [76.5, 60021.0], [76.6, 60021.0], [76.7, 60021.0], [76.8, 60021.0], [76.9, 60022.0], [77.0, 60022.0], [77.1, 60022.0], [77.2, 60022.0], [77.3, 60023.0], [77.4, 60023.0], [77.5, 60023.0], [77.6, 60023.0], [77.7, 60023.0], [77.8, 60023.0], [77.9, 60023.0], [78.0, 60023.0], [78.1, 60023.0], [78.2, 60023.0], [78.3, 60023.0], [78.4, 60023.0], [78.5, 60023.0], [78.6, 60023.0], [78.7, 60024.0], [78.8, 60024.0], [78.9, 60024.0], [79.0, 60024.0], [79.1, 60024.0], [79.2, 60024.0], [79.3, 60024.0], [79.4, 60024.0], [79.5, 60024.0], [79.6, 60024.0], [79.7, 60024.0], [79.8, 60024.0], [79.9, 60024.0], [80.0, 60024.0], [80.1, 60024.0], [80.2, 60024.0], [80.3, 60024.0], [80.4, 60024.0], [80.5, 60025.0], [80.6, 60025.0], [80.7, 60026.0], [80.8, 60026.0], [80.9, 60026.0], [81.0, 60026.0], [81.1, 60027.0], [81.2, 60027.0], [81.3, 60027.0], [81.4, 60027.0], [81.5, 60027.0], [81.6, 60027.0], [81.7, 60027.0], [81.8, 60027.0], [81.9, 60027.0], [82.0, 60027.0], [82.1, 60027.0], [82.2, 60027.0], [82.3, 60027.0], [82.4, 60027.0], [82.5, 60027.0], [82.6, 60027.0], [82.7, 60028.0], [82.8, 60028.0], [82.9, 60028.0], [83.0, 60028.0], [83.1, 60028.0], [83.2, 60028.0], [83.3, 60028.0], [83.4, 60028.0], [83.5, 60028.0], [83.6, 60028.0], [83.7, 60029.0], [83.8, 60029.0], [83.9, 60029.0], [84.0, 60029.0], [84.1, 60029.0], [84.2, 60029.0], [84.3, 60029.0], [84.4, 60029.0], [84.5, 60029.0], [84.6, 60029.0], [84.7, 60029.0], [84.8, 60029.0], [84.9, 60030.0], [85.0, 60030.0], [85.1, 60030.0], [85.2, 60030.0], [85.3, 60030.0], [85.4, 60030.0], [85.5, 60031.0], [85.6, 60031.0], [85.7, 60031.0], [85.8, 60031.0], [85.9, 60031.0], [86.0, 60031.0], [86.1, 60031.0], [86.2, 60031.0], [86.3, 60031.0], [86.4, 60031.0], [86.5, 60031.0], [86.6, 60031.0], [86.7, 60031.0], [86.8, 60031.0], [86.9, 60032.0], [87.0, 60032.0], [87.1, 60032.0], [87.2, 60032.0], [87.3, 60034.0], [87.4, 60034.0], [87.5, 60035.0], [87.6, 60035.0], [87.7, 60035.0], [87.8, 60035.0], [87.9, 60035.0], [88.0, 60035.0], [88.1, 60035.0], [88.2, 60035.0], [88.3, 60035.0], [88.4, 60035.0], [88.5, 60035.0], [88.6, 60035.0], [88.7, 60036.0], [88.8, 60036.0], [88.9, 60036.0], [89.0, 60036.0], [89.1, 60037.0], [89.2, 60037.0], [89.3, 60038.0], [89.4, 60038.0], [89.5, 60039.0], [89.6, 60039.0], [89.7, 60039.0], [89.8, 60039.0], [89.9, 60039.0], [90.0, 60039.0], [90.1, 60039.0], [90.2, 60039.0], [90.3, 60040.0], [90.4, 60040.0], [90.5, 60041.0], [90.6, 60041.0], [90.7, 60042.0], [90.8, 60042.0], [90.9, 60042.0], [91.0, 60042.0], [91.1, 60042.0], [91.2, 60042.0], [91.3, 60043.0], [91.4, 60043.0], [91.5, 60043.0], [91.6, 60043.0], [91.7, 60043.0], [91.8, 60043.0], [91.9, 60044.0], [92.0, 60044.0], [92.1, 60045.0], [92.2, 60045.0], [92.3, 60047.0], [92.4, 60047.0], [92.5, 60047.0], [92.6, 60047.0], [92.7, 60051.0], [92.8, 60051.0], [92.9, 60052.0], [93.0, 60052.0], [93.1, 60058.0], [93.2, 60058.0], [93.3, 60061.0], [93.4, 60061.0], [93.5, 60064.0], [93.6, 60064.0], [93.7, 60065.0], [93.8, 60065.0], [93.9, 60066.0], [94.0, 60066.0], [94.1, 60066.0], [94.2, 60066.0], [94.3, 60071.0], [94.4, 60071.0], [94.5, 60071.0], [94.6, 60071.0], [94.7, 60072.0], [94.8, 60072.0], [94.9, 60075.0], [95.0, 60075.0], [95.1, 60079.0], [95.2, 60079.0], [95.3, 60080.0], [95.4, 60080.0], [95.5, 60084.0], [95.6, 60084.0], [95.7, 60088.0], [95.8, 60088.0], [95.9, 60092.0], [96.0, 60092.0], [96.1, 60103.0], [96.2, 60103.0], [96.3, 60106.0], [96.4, 60106.0], [96.5, 60112.0], [96.6, 60112.0], [96.7, 60117.0], [96.8, 60117.0], [96.9, 60127.0], [97.0, 60127.0], [97.1, 60133.0], [97.2, 60133.0], [97.3, 60143.0], [97.4, 60143.0], [97.5, 60152.0], [97.6, 60152.0], [97.7, 60153.0], [97.8, 60153.0], [97.9, 60154.0], [98.0, 60154.0], [98.1, 60174.0], [98.2, 60174.0], [98.3, 60181.0], [98.4, 60181.0], [98.5, 60190.0], [98.6, 60190.0], [98.7, 60203.0], [98.8, 60203.0], [98.9, 60221.0], [99.0, 60221.0], [99.1, 60272.0], [99.2, 60272.0], [99.3, 60305.0], [99.4, 60305.0], [99.5, 60312.0], [99.6, 60312.0], [99.7, 60316.0], [99.8, 60316.0], [99.9, 60452.0], [100.0, 60452.0]], "isOverall": false, "label": "Tile-321-MRMS_Tiles_CONUS-ReflectivityAtLowestAltitude", "isController": false}, {"data": [[0.0, 56243.0], [0.1, 56243.0], [0.2, 56243.0], [0.3, 56243.0], [0.4, 59236.0], [0.5, 59236.0], [0.6, 59236.0], [0.7, 59273.0], [0.8, 59273.0], [0.9, 59273.0], [1.0, 59999.0], [1.1, 59999.0], [1.2, 59999.0], [1.3, 60000.0], [1.4, 60000.0], [1.5, 60000.0], [1.6, 60000.0], [1.7, 60000.0], [1.8, 60000.0], [1.9, 60000.0], [2.0, 60000.0], [2.1, 60000.0], [2.2, 60000.0], [2.3, 60000.0], [2.4, 60000.0], [2.5, 60000.0], [2.6, 60000.0], [2.7, 60000.0], [2.8, 60000.0], [2.9, 60000.0], [3.0, 60000.0], [3.1, 60000.0], [3.2, 60000.0], [3.3, 60000.0], [3.4, 60000.0], [3.5, 60000.0], [3.6, 60001.0], [3.7, 60001.0], [3.8, 60001.0], [3.9, 60001.0], [4.0, 60001.0], [4.1, 60001.0], [4.2, 60001.0], [4.3, 60001.0], [4.4, 60001.0], [4.5, 60001.0], [4.6, 60001.0], [4.7, 60001.0], [4.8, 60001.0], [4.9, 60001.0], [5.0, 60001.0], [5.1, 60001.0], [5.2, 60001.0], [5.3, 60001.0], [5.4, 60001.0], [5.5, 60001.0], [5.6, 60001.0], [5.7, 60001.0], [5.8, 60001.0], [5.9, 60001.0], [6.0, 60001.0], [6.1, 60001.0], [6.2, 60001.0], [6.3, 60001.0], [6.4, 60001.0], [6.5, 60001.0], [6.6, 60001.0], [6.7, 60001.0], [6.8, 60001.0], [6.9, 60001.0], [7.0, 60001.0], [7.1, 60001.0], [7.2, 60001.0], [7.3, 60001.0], [7.4, 60001.0], [7.5, 60001.0], [7.6, 60001.0], [7.7, 60001.0], [7.8, 60001.0], [7.9, 60001.0], [8.0, 60001.0], [8.1, 60001.0], [8.2, 60001.0], [8.3, 60001.0], [8.4, 60002.0], [8.5, 60002.0], [8.6, 60002.0], [8.7, 60002.0], [8.8, 60002.0], [8.9, 60002.0], [9.0, 60002.0], [9.1, 60002.0], [9.2, 60002.0], [9.3, 60002.0], [9.4, 60002.0], [9.5, 60002.0], [9.6, 60002.0], [9.7, 60002.0], [9.8, 60002.0], [9.9, 60002.0], [10.0, 60002.0], [10.1, 60002.0], [10.2, 60002.0], [10.3, 60002.0], [10.4, 60002.0], [10.5, 60002.0], [10.6, 60002.0], [10.7, 60002.0], [10.8, 60002.0], [10.9, 60002.0], [11.0, 60002.0], [11.1, 60002.0], [11.2, 60002.0], [11.3, 60002.0], [11.4, 60002.0], [11.5, 60002.0], [11.6, 60002.0], [11.7, 60002.0], [11.8, 60002.0], [11.9, 60002.0], [12.0, 60002.0], [12.1, 60002.0], [12.2, 60002.0], [12.3, 60002.0], [12.4, 60002.0], [12.5, 60002.0], [12.6, 60002.0], [12.7, 60002.0], [12.8, 60002.0], [12.9, 60002.0], [13.0, 60002.0], [13.1, 60002.0], [13.2, 60002.0], [13.3, 60002.0], [13.4, 60002.0], [13.5, 60002.0], [13.6, 60002.0], [13.7, 60002.0], [13.8, 60002.0], [13.9, 60002.0], [14.0, 60002.0], [14.1, 60002.0], [14.2, 60002.0], [14.3, 60002.0], [14.4, 60002.0], [14.5, 60002.0], [14.6, 60002.0], [14.7, 60002.0], [14.8, 60002.0], [14.9, 60002.0], [15.0, 60002.0], [15.1, 60002.0], [15.2, 60002.0], [15.3, 60002.0], [15.4, 60002.0], [15.5, 60002.0], [15.6, 60002.0], [15.7, 60002.0], [15.8, 60002.0], [15.9, 60002.0], [16.0, 60002.0], [16.1, 60002.0], [16.2, 60002.0], [16.3, 60003.0], [16.4, 60003.0], [16.5, 60003.0], [16.6, 60003.0], [16.7, 60003.0], [16.8, 60003.0], [16.9, 60003.0], [17.0, 60003.0], [17.1, 60003.0], [17.2, 60003.0], [17.3, 60003.0], [17.4, 60003.0], [17.5, 60003.0], [17.6, 60003.0], [17.7, 60003.0], [17.8, 60003.0], [17.9, 60003.0], [18.0, 60003.0], [18.1, 60003.0], [18.2, 60003.0], [18.3, 60003.0], [18.4, 60003.0], [18.5, 60003.0], [18.6, 60003.0], [18.7, 60003.0], [18.8, 60003.0], [18.9, 60003.0], [19.0, 60003.0], [19.1, 60003.0], [19.2, 60003.0], [19.3, 60003.0], [19.4, 60003.0], [19.5, 60003.0], [19.6, 60003.0], [19.7, 60003.0], [19.8, 60003.0], [19.9, 60003.0], [20.0, 60003.0], [20.1, 60003.0], [20.2, 60003.0], [20.3, 60003.0], [20.4, 60003.0], [20.5, 60003.0], [20.6, 60003.0], [20.7, 60003.0], [20.8, 60003.0], [20.9, 60003.0], [21.0, 60003.0], [21.1, 60003.0], [21.2, 60003.0], [21.3, 60003.0], [21.4, 60003.0], [21.5, 60003.0], [21.6, 60003.0], [21.7, 60003.0], [21.8, 60003.0], [21.9, 60003.0], [22.0, 60003.0], [22.1, 60003.0], [22.2, 60003.0], [22.3, 60003.0], [22.4, 60003.0], [22.5, 60003.0], [22.6, 60003.0], [22.7, 60003.0], [22.8, 60003.0], [22.9, 60003.0], [23.0, 60003.0], [23.1, 60003.0], [23.2, 60003.0], [23.3, 60003.0], [23.4, 60003.0], [23.5, 60003.0], [23.6, 60003.0], [23.7, 60003.0], [23.8, 60003.0], [23.9, 60003.0], [24.0, 60003.0], [24.1, 60003.0], [24.2, 60003.0], [24.3, 60003.0], [24.4, 60003.0], [24.5, 60003.0], [24.6, 60003.0], [24.7, 60003.0], [24.8, 60003.0], [24.9, 60003.0], [25.0, 60003.0], [25.1, 60003.0], [25.2, 60003.0], [25.3, 60003.0], [25.4, 60003.0], [25.5, 60003.0], [25.6, 60003.0], [25.7, 60003.0], [25.8, 60003.0], [25.9, 60003.0], [26.0, 60003.0], [26.1, 60003.0], [26.2, 60003.0], [26.3, 60003.0], [26.4, 60003.0], [26.5, 60003.0], [26.6, 60003.0], [26.7, 60003.0], [26.8, 60003.0], [26.9, 60003.0], [27.0, 60003.0], [27.1, 60003.0], [27.2, 60003.0], [27.3, 60003.0], [27.4, 60003.0], [27.5, 60003.0], [27.6, 60003.0], [27.7, 60003.0], [27.8, 60003.0], [27.9, 60003.0], [28.0, 60003.0], [28.1, 60003.0], [28.2, 60003.0], [28.3, 60003.0], [28.4, 60003.0], [28.5, 60003.0], [28.6, 60003.0], [28.7, 60003.0], [28.8, 60003.0], [28.9, 60003.0], [29.0, 60003.0], [29.1, 60003.0], [29.2, 60003.0], [29.3, 60003.0], [29.4, 60003.0], [29.5, 60003.0], [29.6, 60003.0], [29.7, 60003.0], [29.8, 60003.0], [29.9, 60003.0], [30.0, 60003.0], [30.1, 60003.0], [30.2, 60003.0], [30.3, 60003.0], [30.4, 60003.0], [30.5, 60003.0], [30.6, 60003.0], [30.7, 60003.0], [30.8, 60003.0], [30.9, 60003.0], [31.0, 60003.0], [31.1, 60003.0], [31.2, 60003.0], [31.3, 60003.0], [31.4, 60003.0], [31.5, 60003.0], [31.6, 60003.0], [31.7, 60003.0], [31.8, 60003.0], [31.9, 60003.0], [32.0, 60003.0], [32.1, 60003.0], [32.2, 60003.0], [32.3, 60003.0], [32.4, 60003.0], [32.5, 60003.0], [32.6, 60003.0], [32.7, 60003.0], [32.8, 60003.0], [32.9, 60003.0], [33.0, 60004.0], [33.1, 60004.0], [33.2, 60004.0], [33.3, 60004.0], [33.4, 60004.0], [33.5, 60004.0], [33.6, 60004.0], [33.7, 60004.0], [33.8, 60004.0], [33.9, 60004.0], [34.0, 60004.0], [34.1, 60004.0], [34.2, 60004.0], [34.3, 60004.0], [34.4, 60004.0], [34.5, 60004.0], [34.6, 60004.0], [34.7, 60004.0], [34.8, 60004.0], [34.9, 60004.0], [35.0, 60004.0], [35.1, 60004.0], [35.2, 60004.0], [35.3, 60004.0], [35.4, 60004.0], [35.5, 60004.0], [35.6, 60004.0], [35.7, 60004.0], [35.8, 60004.0], [35.9, 60004.0], [36.0, 60004.0], [36.1, 60004.0], [36.2, 60004.0], [36.3, 60004.0], [36.4, 60004.0], [36.5, 60004.0], [36.6, 60004.0], [36.7, 60004.0], [36.8, 60004.0], [36.9, 60004.0], [37.0, 60004.0], [37.1, 60004.0], [37.2, 60004.0], [37.3, 60004.0], [37.4, 60004.0], [37.5, 60004.0], [37.6, 60004.0], [37.7, 60004.0], [37.8, 60004.0], [37.9, 60004.0], [38.0, 60004.0], [38.1, 60004.0], [38.2, 60004.0], [38.3, 60004.0], [38.4, 60004.0], [38.5, 60004.0], [38.6, 60004.0], [38.7, 60004.0], [38.8, 60004.0], [38.9, 60004.0], [39.0, 60004.0], [39.1, 60004.0], [39.2, 60004.0], [39.3, 60004.0], [39.4, 60004.0], [39.5, 60004.0], [39.6, 60004.0], [39.7, 60004.0], [39.8, 60004.0], [39.9, 60004.0], [40.0, 60004.0], [40.1, 60004.0], [40.2, 60004.0], [40.3, 60004.0], [40.4, 60004.0], [40.5, 60004.0], [40.6, 60004.0], [40.7, 60004.0], [40.8, 60004.0], [40.9, 60004.0], [41.0, 60004.0], [41.1, 60004.0], [41.2, 60004.0], [41.3, 60004.0], [41.4, 60004.0], [41.5, 60004.0], [41.6, 60004.0], [41.7, 60004.0], [41.8, 60004.0], [41.9, 60004.0], [42.0, 60004.0], [42.1, 60004.0], [42.2, 60004.0], [42.3, 60004.0], [42.4, 60004.0], [42.5, 60004.0], [42.6, 60004.0], [42.7, 60004.0], [42.8, 60004.0], [42.9, 60004.0], [43.0, 60004.0], [43.1, 60004.0], [43.2, 60004.0], [43.3, 60004.0], [43.4, 60004.0], [43.5, 60004.0], [43.6, 60004.0], [43.7, 60004.0], [43.8, 60004.0], [43.9, 60004.0], [44.0, 60004.0], [44.1, 60004.0], [44.2, 60004.0], [44.3, 60004.0], [44.4, 60004.0], [44.5, 60004.0], [44.6, 60004.0], [44.7, 60004.0], [44.8, 60004.0], [44.9, 60004.0], [45.0, 60004.0], [45.1, 60004.0], [45.2, 60004.0], [45.3, 60004.0], [45.4, 60004.0], [45.5, 60004.0], [45.6, 60004.0], [45.7, 60004.0], [45.8, 60004.0], [45.9, 60004.0], [46.0, 60004.0], [46.1, 60004.0], [46.2, 60004.0], [46.3, 60004.0], [46.4, 60004.0], [46.5, 60004.0], [46.6, 60004.0], [46.7, 60004.0], [46.8, 60004.0], [46.9, 60004.0], [47.0, 60004.0], [47.1, 60004.0], [47.2, 60004.0], [47.3, 60004.0], [47.4, 60004.0], [47.5, 60004.0], [47.6, 60004.0], [47.7, 60004.0], [47.8, 60004.0], [47.9, 60004.0], [48.0, 60004.0], [48.1, 60004.0], [48.2, 60004.0], [48.3, 60004.0], [48.4, 60004.0], [48.5, 60004.0], [48.6, 60004.0], [48.7, 60004.0], [48.8, 60004.0], [48.9, 60004.0], [49.0, 60004.0], [49.1, 60004.0], [49.2, 60004.0], [49.3, 60004.0], [49.4, 60004.0], [49.5, 60004.0], [49.6, 60004.0], [49.7, 60004.0], [49.8, 60004.0], [49.9, 60004.0], [50.0, 60004.0], [50.1, 60004.0], [50.2, 60004.0], [50.3, 60004.0], [50.4, 60004.0], [50.5, 60004.0], [50.6, 60004.0], [50.7, 60004.0], [50.8, 60004.0], [50.9, 60004.0], [51.0, 60004.0], [51.1, 60004.0], [51.2, 60005.0], [51.3, 60005.0], [51.4, 60005.0], [51.5, 60005.0], [51.6, 60005.0], [51.7, 60005.0], [51.8, 60005.0], [51.9, 60005.0], [52.0, 60005.0], [52.1, 60005.0], [52.2, 60005.0], [52.3, 60005.0], [52.4, 60005.0], [52.5, 60005.0], [52.6, 60005.0], [52.7, 60005.0], [52.8, 60005.0], [52.9, 60005.0], [53.0, 60005.0], [53.1, 60005.0], [53.2, 60005.0], [53.3, 60005.0], [53.4, 60005.0], [53.5, 60005.0], [53.6, 60005.0], [53.7, 60005.0], [53.8, 60005.0], [53.9, 60005.0], [54.0, 60005.0], [54.1, 60005.0], [54.2, 60005.0], [54.3, 60005.0], [54.4, 60005.0], [54.5, 60005.0], [54.6, 60005.0], [54.7, 60005.0], [54.8, 60005.0], [54.9, 60005.0], [55.0, 60005.0], [55.1, 60005.0], [55.2, 60005.0], [55.3, 60005.0], [55.4, 60005.0], [55.5, 60005.0], [55.6, 60005.0], [55.7, 60005.0], [55.8, 60005.0], [55.9, 60005.0], [56.0, 60005.0], [56.1, 60005.0], [56.2, 60005.0], [56.3, 60005.0], [56.4, 60005.0], [56.5, 60005.0], [56.6, 60005.0], [56.7, 60005.0], [56.8, 60005.0], [56.9, 60005.0], [57.0, 60005.0], [57.1, 60005.0], [57.2, 60005.0], [57.3, 60005.0], [57.4, 60005.0], [57.5, 60005.0], [57.6, 60005.0], [57.7, 60005.0], [57.8, 60005.0], [57.9, 60005.0], [58.0, 60005.0], [58.1, 60005.0], [58.2, 60005.0], [58.3, 60005.0], [58.4, 60005.0], [58.5, 60005.0], [58.6, 60005.0], [58.7, 60005.0], [58.8, 60005.0], [58.9, 60005.0], [59.0, 60005.0], [59.1, 60005.0], [59.2, 60005.0], [59.3, 60005.0], [59.4, 60005.0], [59.5, 60005.0], [59.6, 60005.0], [59.7, 60005.0], [59.8, 60005.0], [59.9, 60005.0], [60.0, 60005.0], [60.1, 60005.0], [60.2, 60005.0], [60.3, 60005.0], [60.4, 60005.0], [60.5, 60005.0], [60.6, 60005.0], [60.7, 60005.0], [60.8, 60005.0], [60.9, 60005.0], [61.0, 60005.0], [61.1, 60005.0], [61.2, 60005.0], [61.3, 60005.0], [61.4, 60005.0], [61.5, 60005.0], [61.6, 60005.0], [61.7, 60005.0], [61.8, 60005.0], [61.9, 60005.0], [62.0, 60005.0], [62.1, 60005.0], [62.2, 60005.0], [62.3, 60005.0], [62.4, 60005.0], [62.5, 60005.0], [62.6, 60005.0], [62.7, 60005.0], [62.8, 60005.0], [62.9, 60005.0], [63.0, 60005.0], [63.1, 60005.0], [63.2, 60005.0], [63.3, 60006.0], [63.4, 60006.0], [63.5, 60006.0], [63.6, 60006.0], [63.7, 60006.0], [63.8, 60006.0], [63.9, 60006.0], [64.0, 60006.0], [64.1, 60006.0], [64.2, 60006.0], [64.3, 60006.0], [64.4, 60006.0], [64.5, 60006.0], [64.6, 60006.0], [64.7, 60006.0], [64.8, 60006.0], [64.9, 60006.0], [65.0, 60006.0], [65.1, 60006.0], [65.2, 60006.0], [65.3, 60006.0], [65.4, 60006.0], [65.5, 60006.0], [65.6, 60006.0], [65.7, 60006.0], [65.8, 60006.0], [65.9, 60006.0], [66.0, 60006.0], [66.1, 60006.0], [66.2, 60006.0], [66.3, 60006.0], [66.4, 60006.0], [66.5, 60006.0], [66.6, 60006.0], [66.7, 60006.0], [66.8, 60006.0], [66.9, 60006.0], [67.0, 60006.0], [67.1, 60006.0], [67.2, 60006.0], [67.3, 60006.0], [67.4, 60006.0], [67.5, 60006.0], [67.6, 60006.0], [67.7, 60006.0], [67.8, 60006.0], [67.9, 60006.0], [68.0, 60006.0], [68.1, 60006.0], [68.2, 60006.0], [68.3, 60006.0], [68.4, 60006.0], [68.5, 60006.0], [68.6, 60006.0], [68.7, 60006.0], [68.8, 60006.0], [68.9, 60006.0], [69.0, 60006.0], [69.1, 60006.0], [69.2, 60006.0], [69.3, 60006.0], [69.4, 60006.0], [69.5, 60006.0], [69.6, 60006.0], [69.7, 60006.0], [69.8, 60006.0], [69.9, 60006.0], [70.0, 60006.0], [70.1, 60006.0], [70.2, 60006.0], [70.3, 60006.0], [70.4, 60006.0], [70.5, 60006.0], [70.6, 60006.0], [70.7, 60006.0], [70.8, 60006.0], [70.9, 60006.0], [71.0, 60006.0], [71.1, 60006.0], [71.2, 60006.0], [71.3, 60006.0], [71.4, 60006.0], [71.5, 60006.0], [71.6, 60006.0], [71.7, 60006.0], [71.8, 60006.0], [71.9, 60006.0], [72.0, 60006.0], [72.1, 60006.0], [72.2, 60006.0], [72.3, 60006.0], [72.4, 60006.0], [72.5, 60006.0], [72.6, 60006.0], [72.7, 60006.0], [72.8, 60006.0], [72.9, 60006.0], [73.0, 60006.0], [73.1, 60006.0], [73.2, 60006.0], [73.3, 60006.0], [73.4, 60006.0], [73.5, 60006.0], [73.6, 60006.0], [73.7, 60006.0], [73.8, 60006.0], [73.9, 60006.0], [74.0, 60006.0], [74.1, 60006.0], [74.2, 60007.0], [74.3, 60007.0], [74.4, 60007.0], [74.5, 60007.0], [74.6, 60007.0], [74.7, 60007.0], [74.8, 60007.0], [74.9, 60007.0], [75.0, 60007.0], [75.1, 60007.0], [75.2, 60007.0], [75.3, 60007.0], [75.4, 60007.0], [75.5, 60007.0], [75.6, 60007.0], [75.7, 60007.0], [75.8, 60007.0], [75.9, 60007.0], [76.0, 60007.0], [76.1, 60007.0], [76.2, 60007.0], [76.3, 60007.0], [76.4, 60007.0], [76.5, 60007.0], [76.6, 60007.0], [76.7, 60007.0], [76.8, 60007.0], [76.9, 60007.0], [77.0, 60007.0], [77.1, 60007.0], [77.2, 60007.0], [77.3, 60007.0], [77.4, 60007.0], [77.5, 60007.0], [77.6, 60007.0], [77.7, 60007.0], [77.8, 60007.0], [77.9, 60007.0], [78.0, 60007.0], [78.1, 60007.0], [78.2, 60007.0], [78.3, 60007.0], [78.4, 60007.0], [78.5, 60007.0], [78.6, 60007.0], [78.7, 60007.0], [78.8, 60007.0], [78.9, 60007.0], [79.0, 60007.0], [79.1, 60007.0], [79.2, 60007.0], [79.3, 60007.0], [79.4, 60007.0], [79.5, 60007.0], [79.6, 60008.0], [79.7, 60008.0], [79.8, 60008.0], [79.9, 60008.0], [80.0, 60008.0], [80.1, 60008.0], [80.2, 60008.0], [80.3, 60008.0], [80.4, 60008.0], [80.5, 60008.0], [80.6, 60008.0], [80.7, 60008.0], [80.8, 60008.0], [80.9, 60008.0], [81.0, 60008.0], [81.1, 60008.0], [81.2, 60008.0], [81.3, 60008.0], [81.4, 60008.0], [81.5, 60008.0], [81.6, 60008.0], [81.7, 60008.0], [81.8, 60008.0], [81.9, 60008.0], [82.0, 60008.0], [82.1, 60008.0], [82.2, 60008.0], [82.3, 60008.0], [82.4, 60008.0], [82.5, 60008.0], [82.6, 60008.0], [82.7, 60008.0], [82.8, 60008.0], [82.9, 60008.0], [83.0, 60008.0], [83.1, 60008.0], [83.2, 60008.0], [83.3, 60008.0], [83.4, 60008.0], [83.5, 60008.0], [83.6, 60008.0], [83.7, 60008.0], [83.8, 60008.0], [83.9, 60008.0], [84.0, 60008.0], [84.1, 60008.0], [84.2, 60008.0], [84.3, 60008.0], [84.4, 60009.0], [84.5, 60009.0], [84.6, 60009.0], [84.7, 60009.0], [84.8, 60009.0], [84.9, 60009.0], [85.0, 60009.0], [85.1, 60009.0], [85.2, 60009.0], [85.3, 60009.0], [85.4, 60009.0], [85.5, 60009.0], [85.6, 60009.0], [85.7, 60009.0], [85.8, 60009.0], [85.9, 60009.0], [86.0, 60009.0], [86.1, 60009.0], [86.2, 60009.0], [86.3, 60009.0], [86.4, 60009.0], [86.5, 60009.0], [86.6, 60009.0], [86.7, 60009.0], [86.8, 60009.0], [86.9, 60009.0], [87.0, 60009.0], [87.1, 60009.0], [87.2, 60009.0], [87.3, 60009.0], [87.4, 60009.0], [87.5, 60009.0], [87.6, 60009.0], [87.7, 60009.0], [87.8, 60009.0], [87.9, 60009.0], [88.0, 60009.0], [88.1, 60009.0], [88.2, 60009.0], [88.3, 60009.0], [88.4, 60009.0], [88.5, 60009.0], [88.6, 60009.0], [88.7, 60009.0], [88.8, 60009.0], [88.9, 60009.0], [89.0, 60009.0], [89.1, 60009.0], [89.2, 60009.0], [89.3, 60009.0], [89.4, 60009.0], [89.5, 60010.0], [89.6, 60010.0], [89.7, 60010.0], [89.8, 60010.0], [89.9, 60010.0], [90.0, 60010.0], [90.1, 60010.0], [90.2, 60010.0], [90.3, 60010.0], [90.4, 60010.0], [90.5, 60010.0], [90.6, 60010.0], [90.7, 60010.0], [90.8, 60010.0], [90.9, 60010.0], [91.0, 60010.0], [91.1, 60010.0], [91.2, 60010.0], [91.3, 60010.0], [91.4, 60010.0], [91.5, 60010.0], [91.6, 60010.0], [91.7, 60010.0], [91.8, 60010.0], [91.9, 60010.0], [92.0, 60010.0], [92.1, 60010.0], [92.2, 60010.0], [92.3, 60010.0], [92.4, 60011.0], [92.5, 60011.0], [92.6, 60011.0], [92.7, 60011.0], [92.8, 60011.0], [92.9, 60011.0], [93.0, 60011.0], [93.1, 60011.0], [93.2, 60011.0], [93.3, 60011.0], [93.4, 60011.0], [93.5, 60011.0], [93.6, 60011.0], [93.7, 60012.0], [93.8, 60012.0], [93.9, 60012.0], [94.0, 60013.0], [94.1, 60013.0], [94.2, 60013.0], [94.3, 60013.0], [94.4, 60013.0], [94.5, 60013.0], [94.6, 60014.0], [94.7, 60014.0], [94.8, 60014.0], [94.9, 60016.0], [95.0, 60016.0], [95.1, 60016.0], [95.2, 60016.0], [95.3, 60017.0], [95.4, 60017.0], [95.5, 60017.0], [95.6, 60017.0], [95.7, 60017.0], [95.8, 60017.0], [95.9, 60024.0], [96.0, 60024.0], [96.1, 60024.0], [96.2, 60038.0], [96.3, 60038.0], [96.4, 60038.0], [96.5, 60041.0], [96.6, 60041.0], [96.7, 60041.0], [96.8, 60041.0], [96.9, 60041.0], [97.0, 60041.0], [97.1, 60041.0], [97.2, 60045.0], [97.3, 60045.0], [97.4, 60045.0], [97.5, 60057.0], [97.6, 60057.0], [97.7, 60057.0], [97.8, 60061.0], [97.9, 60061.0], [98.0, 60061.0], [98.1, 60082.0], [98.2, 60082.0], [98.3, 60082.0], [98.4, 60082.0], [98.5, 60084.0], [98.6, 60084.0], [98.7, 60084.0], [98.8, 60141.0], [98.9, 60141.0], [99.0, 60141.0], [99.1, 60162.0], [99.2, 60162.0], [99.3, 60162.0], [99.4, 60163.0], [99.5, 60163.0], [99.6, 60163.0], [99.7, 60177.0], [99.8, 60177.0], [99.9, 60177.0]], "isOverall": false, "label": "Tile-322-MRMS_Tiles_CONUS-ReflectivityAtLowestAltitude", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 6100.0, "maxY": 305.0, "series": [{"data": [[34100.0, 2.0], [34500.0, 1.0], [34900.0, 2.0], [35700.0, 1.0], [36900.0, 1.0], [38100.0, 1.0], [38900.0, 1.0], [39300.0, 3.0], [39700.0, 1.0], [40500.0, 2.0], [41300.0, 2.0], [44500.0, 2.0], [44100.0, 1.0], [44900.0, 1.0], [47300.0, 1.0], [48100.0, 1.0], [47700.0, 1.0], [48500.0, 1.0], [48900.0, 1.0], [49700.0, 2.0], [50100.0, 2.0], [49300.0, 1.0], [50500.0, 1.0], [52100.0, 1.0], [52900.0, 1.0], [53300.0, 1.0], [54500.0, 1.0], [54900.0, 2.0], [55700.0, 3.0], [56500.0, 3.0], [56100.0, 1.0], [58500.0, 1.0], [58900.0, 1.0], [60100.0, 13.0], [59700.0, 2.0], [6100.0, 1.0], [6400.0, 1.0], [6600.0, 1.0], [7000.0, 1.0], [7400.0, 1.0], [7600.0, 4.0], [7500.0, 1.0], [7800.0, 3.0], [7700.0, 1.0], [8000.0, 1.0], [8100.0, 2.0], [8200.0, 6.0], [8500.0, 5.0], [8300.0, 3.0], [9100.0, 1.0], [10200.0, 2.0], [10500.0, 1.0], [10300.0, 2.0], [10700.0, 1.0], [10600.0, 1.0], [11000.0, 3.0], [10900.0, 1.0], [11400.0, 3.0], [11300.0, 1.0], [11700.0, 1.0], [11900.0, 1.0], [12200.0, 1.0], [12500.0, 1.0], [12700.0, 1.0], [12600.0, 1.0], [13000.0, 2.0], [12800.0, 2.0], [13100.0, 3.0], [13300.0, 3.0], [12900.0, 1.0], [13700.0, 1.0], [15100.0, 2.0], [15000.0, 1.0], [15300.0, 1.0], [15200.0, 1.0], [15700.0, 3.0], [15800.0, 2.0], [15600.0, 2.0], [15500.0, 1.0], [16100.0, 1.0], [16200.0, 1.0], [16400.0, 1.0], [17200.0, 2.0], [18000.0, 1.0], [18400.0, 2.0], [18800.0, 1.0], [19200.0, 3.0], [19400.0, 1.0], [20000.0, 2.0], [20600.0, 1.0], [20800.0, 1.0], [21200.0, 1.0], [22400.0, 1.0], [22600.0, 1.0], [22800.0, 1.0], [23400.0, 1.0], [23600.0, 1.0], [24000.0, 3.0], [24400.0, 1.0], [24600.0, 1.0], [24800.0, 1.0], [25200.0, 1.0], [25000.0, 1.0], [25400.0, 1.0], [25600.0, 1.0], [26000.0, 1.0], [26200.0, 1.0], [26400.0, 2.0], [27000.0, 1.0], [27200.0, 1.0], [28600.0, 2.0], [29000.0, 3.0], [29600.0, 1.0], [29800.0, 1.0], [30200.0, 1.0], [30000.0, 1.0], [30400.0, 1.0], [30800.0, 1.0], [31800.0, 1.0], [32600.0, 1.0], [32800.0, 1.0], [34400.0, 4.0], [34800.0, 2.0], [35200.0, 3.0], [35600.0, 1.0], [38000.0, 1.0], [38800.0, 1.0], [39200.0, 2.0], [39600.0, 2.0], [40400.0, 2.0], [40800.0, 1.0], [42800.0, 1.0], [43600.0, 1.0], [43200.0, 1.0], [44000.0, 1.0], [44800.0, 2.0], [46000.0, 1.0], [46800.0, 1.0], [46400.0, 1.0], [48400.0, 1.0], [50000.0, 2.0], [50400.0, 1.0], [54000.0, 1.0], [55200.0, 1.0], [56800.0, 2.0], [56400.0, 1.0], [57600.0, 2.0], [58800.0, 1.0], [60000.0, 131.0], [60400.0, 1.0], [35500.0, 1.0], [36300.0, 1.0], [37900.0, 1.0], [39900.0, 3.0], [39100.0, 1.0], [39500.0, 2.0], [40700.0, 1.0], [41100.0, 1.0], [42300.0, 1.0], [44300.0, 2.0], [45100.0, 1.0], [45500.0, 2.0], [45900.0, 1.0], [47900.0, 1.0], [48700.0, 1.0], [49500.0, 1.0], [49900.0, 2.0], [50700.0, 1.0], [50300.0, 1.0], [51100.0, 1.0], [52700.0, 1.0], [51900.0, 1.0], [53500.0, 1.0], [56300.0, 2.0], [56700.0, 2.0], [58300.0, 1.0], [60300.0, 3.0], [59500.0, 1.0], [59900.0, 1.0], [18100.0, 2.0], [18300.0, 1.0], [18700.0, 1.0], [18900.0, 2.0], [19100.0, 1.0], [19300.0, 1.0], [19500.0, 1.0], [19900.0, 1.0], [20500.0, 2.0], [20700.0, 2.0], [21500.0, 1.0], [21300.0, 1.0], [22500.0, 1.0], [23100.0, 1.0], [23300.0, 1.0], [23500.0, 1.0], [23700.0, 1.0], [24100.0, 2.0], [23900.0, 1.0], [24300.0, 1.0], [24500.0, 1.0], [24900.0, 1.0], [25100.0, 1.0], [25900.0, 1.0], [27300.0, 1.0], [27500.0, 2.0], [29100.0, 3.0], [28900.0, 1.0], [29500.0, 4.0], [29700.0, 1.0], [29900.0, 1.0], [30300.0, 4.0], [30700.0, 1.0], [30500.0, 1.0], [32500.0, 2.0], [33800.0, 1.0], [34200.0, 1.0], [35000.0, 1.0], [35400.0, 2.0], [35800.0, 3.0], [36200.0, 1.0], [39000.0, 2.0], [41400.0, 1.0], [43800.0, 5.0], [43400.0, 1.0], [44200.0, 1.0], [44600.0, 2.0], [46200.0, 2.0], [49000.0, 1.0], [49800.0, 1.0], [50600.0, 3.0], [50200.0, 1.0], [51000.0, 1.0], [51400.0, 1.0], [51800.0, 1.0], [52600.0, 1.0], [52200.0, 1.0], [55000.0, 1.0], [54600.0, 1.0], [56200.0, 2.0], [56600.0, 2.0], [57400.0, 1.0], [59000.0, 1.0], [59400.0, 1.0], [60200.0, 3.0]], "isOverall": false, "label": "Tile-321-MRMS_Tiles_CONUS-ReflectivityAtLowestAltitude", "isController": false}, {"data": [[56200.0, 1.0], [59200.0, 2.0], [60000.0, 305.0], [60100.0, 4.0], [59900.0, 1.0]], "isOverall": false, "label": "Tile-322-MRMS_Tiles_CONUS-ReflectivityAtLowestAltitude", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 356.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 457.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 356.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 457.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 83.51204819277115, "minX": 1.72020246E12, "maxY": 481.3537414965987, "series": [{"data": [[1.72020252E12, 388.8720000000002], [1.72020258E12, 83.51204819277115], [1.72020246E12, 481.3537414965987]], "isOverall": false, "label": "EDR-DESI-Tiles", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72020258E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6453.0, "minX": 1.0, "maxY": 60452.0, "series": [{"data": [[287.0, 60020.0], [286.0, 60020.0], [285.0, 60027.0], [284.0, 60024.0], [283.0, 60020.0], [282.0, 60035.0], [301.0, 60019.0], [303.0, 60030.0], [300.0, 60017.0], [291.0, 60029.0], [290.0, 60017.0], [289.0, 60047.0], [288.0, 60024.0], [299.0, 60011.0], [298.0, 60022.0], [297.0, 60008.0], [296.0, 60023.0], [295.0, 60023.0], [294.0, 60032.0], [293.0, 60031.0], [292.0, 60029.0], [318.0, 60023.0], [319.0, 60027.0], [316.0, 60015.0], [307.0, 60027.0], [306.0, 60014.0], [305.0, 60023.0], [304.0, 60038.0], [315.0, 60012.0], [314.0, 60028.0], [313.0, 60015.0], [312.0, 60026.0], [311.0, 60016.0], [310.0, 60065.0], [309.0, 60030.0], [308.0, 60023.0], [333.0, 60020.0], [335.0, 60025.5], [332.0, 60031.0], [323.0, 60059.0], [321.0, 60019.0], [320.0, 60024.0], [331.0, 60084.0], [330.0, 60061.0], [329.0, 60051.0], [328.0, 60079.0], [327.0, 60016.0], [326.0, 60091.5], [324.0, 60037.0], [349.0, 60088.0], [338.0, 33088.0], [350.0, 60027.0], [348.0, 60072.0], [339.0, 60028.0], [347.0, 60027.0], [346.0, 60028.0], [345.0, 60017.0], [344.0, 60029.0], [342.0, 60031.0], [341.0, 60012.0], [352.0, 6453.0], [354.0, 33335.5], [365.0, 60031.0], [363.0, 60035.0], [362.0, 60024.0], [358.0, 60035.0], [355.0, 60272.0], [353.0, 60026.0], [371.0, 60019.0], [383.0, 60103.0], [379.0, 33610.0], [382.0, 7653.0], [378.0, 60152.0], [376.0, 60174.0], [374.0, 60190.0], [373.0, 60039.0], [372.0, 60022.0], [370.0, 60019.0], [369.0, 60035.0], [368.0, 60039.0], [397.0, 33892.5], [386.0, 25070.666666666668], [385.0, 60036.5], [387.0, 60035.0], [395.0, 33968.5], [399.0, 33949.5], [398.0, 60024.0], [393.0, 60015.0], [392.0, 60021.0], [391.0, 60042.0], [390.0, 60037.5], [388.0, 60018.0], [412.0, 60071.0], [414.0, 60023.0], [405.0, 42788.333333333336], [411.0, 25074.333333333332], [413.0, 60058.0], [409.0, 60106.0], [408.0, 60031.0], [407.0, 60027.0], [403.0, 60312.0], [401.0, 60032.0], [406.0, 60030.0], [417.0, 7853.0], [416.0, 7601.0], [419.0, 34114.5], [418.0, 60044.5], [420.0, 34074.0], [421.0, 60036.0], [422.0, 8275.0], [431.0, 60452.0], [428.0, 60032.0], [427.0, 60024.0], [426.0, 60028.8], [433.0, 34270.0], [432.0, 34025.0], [434.0, 34178.0], [435.0, 25552.0], [436.0, 25757.666666666668], [437.0, 60181.0], [438.0, 34134.0], [439.0, 8336.0], [445.0, 8404.0], [447.0, 60221.0], [443.0, 60025.0], [442.0, 59978.0], [440.0, 60015.0], [462.0, 60028.0], [448.0, 8286.5], [449.0, 60119.0], [451.0, 60064.0], [450.0, 60071.0], [463.0, 60305.0], [461.0, 60024.0], [460.0, 59525.0], [459.0, 60012.0], [457.0, 60143.0], [456.0, 60154.0], [455.0, 60021.0], [454.0, 60015.0], [453.0, 60030.0], [452.0, 59472.0], [478.0, 56601.0], [466.0, 34601.0], [465.0, 60018.0], [464.0, 60029.0], [467.0, 60044.0], [471.0, 58502.0], [470.0, 58963.0], [469.0, 59027.0], [468.0, 60031.0], [479.0, 56584.0], [477.0, 57409.0], [476.0, 56620.0], [475.0, 57619.0], [474.0, 58316.0], [473.0, 57682.0], [472.0, 58828.0], [494.0, 56291.0], [495.0, 55212.0], [493.0, 56380.0], [492.0, 56303.0], [491.0, 56279.0], [490.0, 56538.0], [489.0, 56786.0], [488.0, 56020.0], [485.0, 56876.0], [483.0, 56794.0], [480.0, 56492.0], [484.0, 56137.0], [500.0, 31593.691489361692], [499.0, 54622.0], [498.0, 55779.0], [497.0, 54915.0], [496.0, 54953.0]], "isOverall": false, "label": "Tile-321-MRMS_Tiles_CONUS-ReflectivityAtLowestAltitude", "isController": false}, {"data": [[454.12799999999993, 40462.79000000002]], "isOverall": false, "label": "Tile-321-MRMS_Tiles_CONUS-ReflectivityAtLowestAltitude-Aggregated", "isController": false}, {"data": [[2.0, 60005.0], [3.0, 60006.0], [4.0, 60003.0], [5.0, 60004.0], [6.0, 60002.0], [7.0, 60009.0], [8.0, 60002.0], [9.0, 60007.0], [10.0, 60006.0], [11.0, 60002.0], [12.0, 60007.0], [13.0, 60006.0], [14.0, 60009.0], [15.0, 60008.0], [16.0, 60004.0], [17.0, 60005.0], [18.0, 60005.0], [19.0, 60038.0], [20.0, 60004.0], [21.0, 60004.0], [23.0, 60005.0], [24.0, 60004.0], [25.0, 60004.0], [26.0, 60004.0], [27.0, 60010.0], [28.0, 60006.0], [29.0, 60002.0], [30.0, 60007.0], [31.0, 60003.0], [33.0, 60005.0], [32.0, 60006.0], [35.0, 60005.0], [34.0, 60005.0], [37.0, 60004.0], [36.0, 60008.0], [39.0, 60005.0], [38.0, 60006.0], [41.0, 60010.0], [40.0, 60002.0], [43.0, 60008.0], [42.0, 60006.0], [45.0, 60002.0], [44.0, 60003.0], [47.0, 60004.0], [46.0, 60006.0], [49.0, 60002.0], [48.0, 60009.0], [51.0, 60004.0], [50.0, 60005.0], [53.0, 60004.0], [52.0, 60001.0], [55.0, 60010.0], [54.0, 60000.0], [57.0, 60003.0], [56.0, 60003.0], [59.0, 60004.0], [58.0, 60005.0], [61.0, 60001.0], [60.0, 60006.0], [63.0, 60003.0], [62.0, 60003.0], [67.0, 60011.0], [66.0, 60002.0], [65.0, 60008.0], [64.0, 60004.0], [71.0, 60002.0], [70.0, 60004.0], [69.0, 60006.0], [68.0, 60003.0], [75.0, 60002.0], [74.0, 60008.0], [73.0, 60003.0], [72.0, 60003.0], [79.0, 60001.0], [78.0, 60003.0], [77.0, 60008.0], [76.0, 60006.0], [83.0, 60005.0], [82.0, 60006.0], [81.0, 60004.0], [80.0, 60004.0], [87.0, 60001.0], [86.0, 60004.0], [85.0, 60014.0], [84.0, 60004.0], [91.0, 60005.0], [90.0, 60001.0], [89.0, 60005.0], [88.0, 60004.0], [95.0, 60002.0], [94.0, 60000.0], [93.0, 60003.0], [92.0, 60009.0], [99.0, 60009.0], [98.0, 60005.0], [97.0, 60007.0], [103.0, 60006.0], [102.0, 60003.0], [101.0, 60024.0], [100.0, 60010.0], [107.0, 60003.0], [106.0, 60005.0], [105.0, 60007.0], [104.0, 60007.0], [111.0, 60005.0], [110.0, 60003.0], [109.0, 60009.0], [108.0, 59999.0], [115.0, 60003.0], [114.0, 60002.0], [113.0, 60006.0], [112.0, 60006.0], [119.0, 60004.0], [118.0, 60006.0], [117.0, 60004.0], [116.0, 60007.0], [123.0, 60003.0], [122.0, 60004.0], [121.0, 60003.0], [120.0, 60009.0], [127.0, 60007.0], [126.0, 60008.0], [125.0, 60006.0], [124.0, 60004.0], [135.0, 60002.0], [134.0, 60001.0], [133.0, 60003.0], [132.0, 60001.0], [131.0, 60163.0], [130.0, 60002.0], [129.0, 60004.0], [128.0, 60001.0], [143.0, 60004.0], [142.0, 60006.0], [141.0, 60002.0], [140.0, 60005.0], [139.0, 60002.0], [138.0, 60006.0], [137.0, 60004.0], [136.0, 60004.0], [151.0, 60004.0], [150.0, 60004.0], [149.0, 60003.0], [148.0, 60006.0], [147.0, 60004.0], [146.0, 60004.0], [145.0, 60005.0], [144.0, 60007.0], [159.0, 60003.0], [158.0, 60005.0], [157.0, 60010.0], [156.0, 60011.0], [155.0, 60004.0], [154.0, 60006.0], [153.0, 60003.0], [152.0, 60005.0], [167.0, 60002.0], [166.0, 60003.0], [165.0, 60001.0], [164.0, 60005.0], [163.0, 60001.0], [162.0, 60004.0], [161.0, 60006.0], [160.0, 60006.0], [175.0, 60000.0], [174.0, 60009.0], [173.0, 60004.0], [172.0, 60006.0], [171.0, 60004.0], [170.0, 60004.0], [169.0, 60003.0], [168.0, 60005.0], [183.0, 60009.0], [182.0, 60004.0], [181.0, 60003.0], [180.0, 60007.0], [179.0, 60004.0], [178.0, 60003.0], [177.0, 60007.0], [176.0, 60003.0], [190.0, 60006.0], [189.0, 60005.0], [188.0, 60017.0], [187.0, 60010.0], [186.0, 60002.5], [184.0, 60002.0], [199.0, 60003.0], [198.0, 60016.0], [197.0, 60004.0], [196.0, 60009.0], [195.0, 60003.0], [194.0, 60013.0], [193.0, 60005.0], [192.0, 60003.5], [207.0, 60003.0], [206.0, 60004.0], [205.0, 60007.0], [204.0, 60005.0], [203.0, 60003.0], [202.0, 60041.0], [201.0, 60005.0], [200.0, 60003.0], [215.0, 60000.0], [214.0, 60010.0], [213.0, 60011.0], [212.0, 60003.0], [211.0, 60005.0], [210.0, 60001.0], [209.0, 60001.0], [208.0, 60004.0], [223.0, 60004.0], [222.0, 60004.0], [221.0, 60008.0], [220.0, 60004.0], [218.0, 60008.0], [217.0, 60005.0], [216.0, 60008.0], [231.0, 60004.0], [230.0, 60004.0], [229.0, 60006.0], [228.0, 60084.0], [227.0, 60004.0], [226.0, 60006.0], [225.0, 60003.0], [224.0, 60005.0], [239.0, 60005.0], [238.0, 60006.0], [235.0, 60003.0], [234.0, 60006.0], [233.0, 60004.0], [232.0, 60005.0], [247.0, 60006.0], [246.0, 60005.0], [245.0, 60007.0], [244.0, 60008.0], [243.0, 60006.0], [242.0, 60003.0], [241.0, 60003.0], [240.0, 60007.0], [255.0, 60005.0], [254.0, 60004.0], [253.0, 60008.0], [252.0, 60006.0], [251.0, 60009.0], [250.0, 60006.0], [249.0, 60006.0], [248.0, 60009.0], [270.0, 60003.0], [271.0, 60061.0], [269.0, 60045.0], [268.0, 60003.0], [267.0, 60002.0], [266.0, 60003.0], [265.0, 60011.0], [264.0, 60005.0], [263.0, 60017.0], [257.0, 60010.0], [256.0, 60004.0], [259.0, 60004.0], [258.0, 60005.0], [262.0, 60003.0], [261.0, 60000.0], [260.0, 60000.0], [274.0, 60003.0], [281.0, 60001.0], [280.0, 60003.0], [279.0, 60008.0], [278.0, 60003.0], [277.0, 60004.0], [276.0, 60008.0], [275.0, 60003.0], [273.0, 60009.0], [272.0, 60003.0], [317.0, 60003.0], [351.0, 60003.0], [343.0, 60006.0], [341.0, 60007.0], [337.0, 60007.0], [336.0, 60008.0], [366.0, 60002.0], [364.0, 60013.0], [361.0, 60003.0], [360.0, 60000.0], [359.0, 60002.0], [358.0, 60003.0], [356.0, 60009.0], [353.0, 60002.0], [382.0, 60057.0], [381.0, 60082.0], [377.0, 60141.0], [375.0, 60162.0], [397.0, 60001.0], [394.0, 60002.0], [386.0, 60007.0], [415.0, 60003.0], [410.0, 60001.0], [403.0, 60007.0], [430.0, 60004.0], [429.0, 60012.0], [416.0, 60041.0], [446.0, 60177.0], [444.0, 59236.0], [439.0, 59273.0], [458.0, 60004.0], [481.0, 56243.0], [1.0, 60009.0]], "isOverall": false, "label": "Tile-322-MRMS_Tiles_CONUS-ReflectivityAtLowestAltitude", "isController": false}, {"data": [[166.11501597444078, 59991.46645367411]], "isOverall": false, "label": "Tile-322-MRMS_Tiles_CONUS-ReflectivityAtLowestAltitude-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 676.2, "minX": 1.72020246E12, "maxY": 1464548.3, "series": [{"data": [[1.72020252E12, 1464548.3], [1.72020258E12, 807.8666666666667], [1.72020246E12, 1032675.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72020252E12, 2300.0], [1.72020258E12, 763.6], [1.72020246E12, 676.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72020258E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 16088.897959183678, "minX": 1.72020246E12, "maxY": 60006.01807228917, "series": [{"data": [[1.72020252E12, 50612.824362606225], [1.72020246E12, 16088.897959183678]], "isOverall": false, "label": "Tile-321-MRMS_Tiles_CONUS-ReflectivityAtLowestAltitude", "isController": false}, {"data": [[1.72020252E12, 59975.03401360545], [1.72020258E12, 60006.01807228917]], "isOverall": false, "label": "Tile-322-MRMS_Tiles_CONUS-ReflectivityAtLowestAltitude", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72020258E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 15474.353741496605, "minX": 1.72020246E12, "maxY": 60006.01204819278, "series": [{"data": [[1.72020252E12, 50397.082152974486], [1.72020246E12, 15474.353741496605]], "isOverall": false, "label": "Tile-321-MRMS_Tiles_CONUS-ReflectivityAtLowestAltitude", "isController": false}, {"data": [[1.72020252E12, 59964.98639455781], [1.72020258E12, 60006.01204819278]], "isOverall": false, "label": "Tile-322-MRMS_Tiles_CONUS-ReflectivityAtLowestAltitude", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72020258E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72020246E12, "maxY": 106.2585034013606, "series": [{"data": [[1.72020252E12, 34.71104815864022], [1.72020246E12, 106.2585034013606]], "isOverall": false, "label": "Tile-321-MRMS_Tiles_CONUS-ReflectivityAtLowestAltitude", "isController": false}, {"data": [[1.72020252E12, 0.0], [1.72020258E12, 0.0]], "isOverall": false, "label": "Tile-322-MRMS_Tiles_CONUS-ReflectivityAtLowestAltitude", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72020258E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6147.0, "minX": 1.72020246E12, "maxY": 60452.0, "series": [{"data": [[1.72020252E12, 60452.0], [1.72020246E12, 27316.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72020252E12, 56861.0], [1.72020246E12, 24881.600000000002]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72020252E12, 60287.8], [1.72020246E12, 27263.2]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72020252E12, 59254.5], [1.72020246E12, 26026.6]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72020252E12, 27552.0], [1.72020246E12, 6147.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72020252E12, 44159.0], [1.72020246E12, 15706.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72020252E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 8240.5, "minX": 1.0, "maxY": 60067.5, "series": [{"data": [[2.0, 39548.0], [8.0, 30271.0], [9.0, 35498.0], [10.0, 29528.0], [11.0, 34586.0], [3.0, 38043.0], [13.0, 56380.0], [14.0, 39970.0], [1.0, 13728.0], [4.0, 25528.0], [5.0, 32384.5], [6.0, 24900.5], [24.0, 8240.5], [97.0, 60039.0], [26.0, 59753.5], [7.0, 22776.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 60004.0], [8.0, 60004.0], [9.0, 60005.0], [10.0, 60004.0], [11.0, 60004.0], [3.0, 60003.0], [51.0, 60024.0], [13.0, 60004.0], [14.0, 60028.5], [1.0, 60006.0], [4.0, 60005.0], [5.0, 60005.0], [97.0, 60028.0], [6.0, 60004.0], [26.0, 60067.5], [7.0, 60004.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 97.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 6461.5, "minX": 1.0, "maxY": 60067.5, "series": [{"data": [[2.0, 39360.5], [8.0, 29855.0], [9.0, 35110.0], [10.0, 29134.0], [11.0, 34171.0], [3.0, 37836.0], [13.0, 55713.0], [14.0, 39764.5], [1.0, 13571.0], [4.0, 25275.0], [5.0, 32085.0], [6.0, 24380.0], [24.0, 6461.5], [97.0, 59765.0], [26.0, 59458.5], [7.0, 22243.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 60004.0], [8.0, 60004.0], [9.0, 60005.0], [10.0, 60004.0], [11.0, 60004.0], [3.0, 60003.0], [51.0, 60024.0], [13.0, 60004.0], [14.0, 60028.5], [1.0, 60006.0], [4.0, 60005.0], [5.0, 60005.0], [97.0, 60028.0], [6.0, 60004.0], [26.0, 60067.5], [7.0, 60004.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 97.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.7666666666666666, "minX": 1.72020246E12, "maxY": 10.783333333333333, "series": [{"data": [[1.72020252E12, 2.7666666666666666], [1.72020246E12, 10.783333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72020252E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.45, "minX": 1.72020246E12, "maxY": 4.85, "series": [{"data": [[1.72020252E12, 3.4833333333333334], [1.72020246E12, 2.45]], "isOverall": false, "label": "202", "isController": false}, {"data": [[1.72020252E12, 4.85], [1.72020258E12, 2.7666666666666666]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72020258E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.72020246E12, "maxY": 3.433333333333333, "series": [{"data": [[1.72020252E12, 3.433333333333333], [1.72020246E12, 2.45]], "isOverall": false, "label": "Tile-321-MRMS_Tiles_CONUS-ReflectivityAtLowestAltitude-success", "isController": false}, {"data": [[1.72020252E12, 2.45]], "isOverall": false, "label": "Tile-321-MRMS_Tiles_CONUS-ReflectivityAtLowestAltitude-failure", "isController": false}, {"data": [[1.72020252E12, 0.05]], "isOverall": false, "label": "Tile-322-MRMS_Tiles_CONUS-ReflectivityAtLowestAltitude-success", "isController": false}, {"data": [[1.72020252E12, 2.4], [1.72020258E12, 2.7666666666666666]], "isOverall": false, "label": "Tile-322-MRMS_Tiles_CONUS-ReflectivityAtLowestAltitude-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72020258E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.45, "minX": 1.72020246E12, "maxY": 4.85, "series": [{"data": [[1.72020252E12, 3.4833333333333334], [1.72020246E12, 2.45]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.72020252E12, 4.85], [1.72020258E12, 2.7666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72020258E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

